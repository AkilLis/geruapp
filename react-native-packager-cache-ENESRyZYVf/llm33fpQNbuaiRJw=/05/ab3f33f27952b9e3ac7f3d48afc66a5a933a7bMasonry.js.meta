["5f90e08307db57cee3515ac99d2b399ebd42f2b1","31c685f6ecf8c6a3bc9aa166394ec9eecebb3fc4",["react","react-native"],[86,183],{"version":3,"sources":["/var/www/geruapp/src/components/Masonry.js"],"names":["margin","get","height","width","itemWidth","Masonry","props","state","pageIndex","pageSize","columnsData","nextInsertColumn","loading","nextProps","nextState","items","length","setState","_initialColumnsData","loadMore","row","columnCount","push","minIndex","minLength","i","event","onScroll","_shouldLoadMore","_distanceFromEnd","distanceToLoadMore","distance","nativeEvent","contentSize","contentInset","contentOffset","layoutMeasurement","contentLength","trailingInset","scrollOffset","viewportLength","bottom","y","styles","loaderContainer","onLoadMore","cover","ratio","offset","_calcNextInsertColumn","rowRender","topOffset","columns","calcMasonryColumns","column","marginTop","map","item","onClick","_handeScroll","bind","container","wrapper","propTypes","func","bool","number","array","defaultProps","create","flex","flexDirection","flexWrap","marginRight","marginLeft"],"mappings":"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","sourcesContent":["import React, { PropTypes, Component } from 'react'\nimport { StyleSheet, Text, View, ScrollView, Dimensions, TouchableHighlight } from 'react-native'\n\nconst margin = 5\nconst { height, width } = Dimensions.get('window')\nconst itemWidth = (width - margin * 2) / 2\n\nexport default class Masonry extends Component {\n\t\n\tconstructor(props) {\n\t  super(props)\n\t\n\t  this.state = {\n\t  \tpageIndex: 0,\n\t  \tpageSize: 0,\n\t  \tcolumnsData: [],\n\t  \tnextInsertColumn: 0,\n\t  \tloading: false,\n\t  }\n\t}\n\n\tshouldComponentUpdate(nextProps, nextState) {\n\t\tif(this.props.loading !== nextProps.loading) return true\n\t\tif(this.props.items.length !== nextProps.items.length) return true\n\t\treturn false\n\t}\n\n\tcomponentWillReceiveProps(nextProps) {\n\t  this.setState({\n\t  \tpageIndex: 0,\n\t  \tnextInsertColumn: 0,\n\t  })\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.state.loading = false\n\t}\n\n\tcomponentWillMount() {\n\t\tthis.state.loading = true\n\t\tthis._initialColumnsData()\n\t\tthis.loadMore()\n\t}\n\n\t_initialColumnsData() {\n\t\tfor ( var row = 0; row < this.props.columnCount; row ++) {\n\t\t\tthis.state.columnsData.push({\n\t\t\t\tlength: 0,\n\t\t\t\titems: [],\n\t\t\t})\n\t\t}\n\t}\n\n\t_calcNextInsertColumn() {\n\t\tvar { columnsData, nextInsertColumn } = this.state\n\t\tvar { columnCount } = this.props\n\n\t\tvar minIndex = 0\n\t\tvar minLength = columnsData[0].length\n\n\t\tfor (var i = 1; i < columnCount; i ++) {\n\t\t\tif (columnsData[i].length < minLength) {\n\t\t\t\tminLength = columnsData[i].length\n\t\t\t\tminIndex = i\n\t\t\t}\n\t\t}\n\n\t\tnextInsertColumn = minIndex\n\t\tthis.state.nextInsertColumn = nextInsertColumn\n\n\t\treturn nextInsertColumn\n\t}\n\n\t_handeScroll(event) {\t\t\n\n\t\tif(this.state.loading) return\n\n\t    if(this.props.onScroll)\n\t    \tthis.props.onScroll(event)\n\n\t\tif (this._shouldLoadMore(event)) {\n\t      \tthis.loadMore()\n\t    }\n\t}\n\n\t_shouldLoadMore(event) {\n\t    return !this.props.loading && this._distanceFromEnd(event) < this.props.distanceToLoadMore\n\t}\n\n\t_distanceToLoadMore() {\n\t\tvar distance = this.state.columnsData[0].length\n\t\tfor(var i = 1; i < this.props.columnCount; i ++) {\n\t\t\tif (this.state.columnsData[i].length > distance) {\n\t\t\t\tdistance = this.state.columnsData[i].length\n\t\t\t}\n\t\t}\n\t\treturn distance\n\t}\n\n\t_distanceFromEnd(event): number {\n\t    let {\n\t      contentSize,\n\t      contentInset,\n\t      contentOffset,\n\t      layoutMeasurement,\n\t    } = event.nativeEvent\n\n\t    let contentLength\n\t    let trailingInset\n\t    let scrollOffset\n\t    let viewportLength\n\t    /*if (this.props.horizontal) {\n\t      contentLength = contentSize.width;\n\t      trailingInset = contentInset.right;\n\t      scrollOffset = contentOffset.x;\n\t      viewportLength = layoutMeasurement.width;\n\t    } else {*/\n\t    contentLength = contentSize.height\n\t    trailingInset = contentInset.bottom\n\t    scrollOffset = contentOffset.y\n\t    viewportLength = layoutMeasurement.height\n\t    //}\n\n\t    return contentLength + trailingInset - scrollOffset - viewportLength\n\t}\n\n\tdefaultLoadingView() {\n\t\treturn (\n\t\t\t<View style={styles.loaderContainer}>\n\t\t\t\t<Text>Loading ...</Text>\n\t\t\t</View>\n\t\t)\n\t}\n\n\tloadMore() {\n\t\tthis.state.pageIndex ++\n\t\tthis.props.onLoadMore(this.state.pageIndex)\n\t}\n\n\tcalcMasonryColumns() {\n\t\tvar { columnsData } = this.state\n\t\tvar { items } = this.props\n \t\tfor (var i = 0; i < items.length; i ++) {\n\t\t\tcolumnsData[this.state.nextInsertColumn].length = columnsData[this.state.nextInsertColumn].length + (items[i].cover.ratio * itemWidth + this.props.offset)\n\t\t\tcolumnsData[this.state.nextInsertColumn].items.push(items[i])\n\t\t\tthis._calcNextInsertColumn()\n\t\t}\n\t}\n\n\trender() {\n\t\tvar { columnCount, rowRender, offset, topOffset } = this.props\n\t\tvar { columnsData } = this.state\n\t\tvar columns = []\n\n\t\tthis.calcMasonryColumns()\n\n\t\tfor(var i = 0; i < columnCount; i ++) {\n\t\t\tcolumns.push(\n\t\t\t\t<View key={i} style={[styles.column, {marginTop: topOffset}]}>\n\t\t\t\t\t{\n\t\t\t\t\t\tcolumnsData[i].items.map((item, i) => (\n\t\t\t\t\t\t\t<TouchableHighlight key={i} \n\t\t\t\t\t\t\t                    underlayColor=\"#efefef\" \n\t\t\t\t\t\t\t                    //style={{height: item.collage.ratio * itemWidth + offset}} \n\t\t\t\t\t\t\t                    onPress={() => this.props.onClick(item)}>\n    \t\t\t\t\t\t\t{ rowRender(item, itemWidth, offset) }\n    \t\t\t\t\t\t</TouchableHighlight>\n    \t\t\t\t\t))\n\t\t\t\t\t}\n\t\t\t\t</View>\n\t\t\t)\n\t\t}\n\n\t\treturn (\n\t\t\t<ScrollView automaticallyAdjustContentInsets={false}\n\t\t\t   \t\t\tonScroll={this._handeScroll.bind(this)}\n\t\t\t            style={styles.container}>\n\t\t\t        <View style={styles.wrapper}>\n\t\t\t        \t{ columns }\n\t\t\t        </View>\n\t\t\t        \n\t\t\t        {/* this.defaultLoadingView() */}\n\t\t\t</ScrollView>\n\t\t)\n\t}\n\n}\n\nMasonry.propTypes = {\n\trowRender: PropTypes.func,\n\tloading: PropTypes.bool, \n\tcolumnCount: PropTypes.number,\n\tdistanceToLoadMore: PropTypes.number,\n\toffset: PropTypes.number,\n\tonLoadMore: PropTypes.func,\n\titems: PropTypes.array,\n\tonScroll: PropTypes.func,\n\tonClick: PropTypes.func,\n\ttopOffset: PropTypes.number,\n}\n\nMasonry.defaultProps = {\n\tloading: false,\n\tcolumnCount: 2,\n\tdistanceToLoadMore: 10,\n\ttopOffset: 70,\n\titems: [],\n\tonScroll: null,\n\tonClick: null,\n}\n\nvar styles = StyleSheet.create({\n\tcontainer: {\n\t\tflex: 1,\n\t\tflexDirection: 'column',\n\t\tmarginTop: 10,\n\t},\n\n\twrapper: {\n        flexDirection: 'row',\n        flexWrap: 'wrap',\n        marginRight: margin,\n        marginLeft: margin\n    },\n\n    column: {\n        flex: 2,\n        flexDirection: 'column',\n   \t},\n\n\tloaderContainer: {\n\t\tflex: 1,\n\t}\n})"]}]