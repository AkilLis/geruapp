["f490786d1b78cb65f4732c1712744b6c10125663","bac1e3650ee830d6ac0fd9521ec93994ca0347cc",["fbjs/lib/emptyObject","ReactFiberStack","fbjs/lib/invariant"],[43,92,229],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native/Libraries/Renderer/src/renderers/shared/fiber/ReactFiberHostContext.js"],"names":["emptyObject","require","createCursor","pop","push","invariant","module","exports","config","getChildHostContext","getRootHostContext","contextStackCursor","contextFiberStackCursor","rootInstanceStackCursor","getRootHostContainer","rootInstance","current","pushHostContainer","fiber","nextRootInstance","nextRootContext","popHostContainer","getHostContext","context","pushHostContext","nextContext","type","popHostContext","resetHostContainer"],"mappings":";;AAYA;;AAMA,IAAMA,cAAcC,QAAQ,sBAAR,CAApB;;eAMIA,QAAQ,iBAAR,C;IAHFC,Y,YAAAA,Y;IACAC,G,YAAAA,G;IACAC,I,YAAAA,I;;AAGF,IAAMC,YAAYJ,QAAQ,oBAAR,CAAlB;;AAYAK,OAAOC,OAAP,GAAiB,UACfC,MADe,EAEK;AAAA,MAElBC,mBAFkB,GAIhBD,MAJgB,CAElBC,mBAFkB;AAAA,MAGlBC,kBAHkB,GAIhBF,MAJgB,CAGlBE,kBAHkB;;;AAMpB,MAAIC,qBAA6CT,aAAc,IAAd,CAAjD;AACA,MAAIU,0BAAqDV,aACtD,IADsD,CAAzD;AAGA,MAAIW,0BAAiDX,aAAc,IAAd,CAArD;;AAEA,WAASY,oBAAT,GAAmC;AACjC,QAAMC,eAAeF,wBAAwBG,OAA7C;AACAX,cACEU,iBAAiB,IADnB,EAEE,wEACE,qCAHJ;AAKA,WAAOA,YAAP;AACD;;AAED,WAASE,iBAAT,CAA2BC,KAA3B,EAAyCC,gBAAzC,EAA8D;AAG5Df,SAAKS,uBAAL,EAA8BM,gBAA9B,EAAgDD,KAAhD;;AAEA,QAAME,kBAAkBV,mBAAmBS,gBAAnB,CAAxB;;AAIAf,SAAKQ,uBAAL,EAA8BM,KAA9B,EAAqCA,KAArC;AACAd,SAAKO,kBAAL,EAAyBS,eAAzB,EAA0CF,KAA1C;AACD;;AAED,WAASG,gBAAT,CAA0BH,KAA1B,EAAwC;AACtCf,QAAIQ,kBAAJ,EAAwBO,KAAxB;AACAf,QAAIS,uBAAJ,EAA6BM,KAA7B;AACAf,QAAIU,uBAAJ,EAA6BK,KAA7B;AACD;;AAED,WAASI,cAAT,GAA8B;AAC5B,QAAMC,UAAUZ,mBAAmBK,OAAnC;AACAX,cACEkB,WAAW,IADb,EAEE,0EACE,iCAHJ;AAKA,WAAOA,OAAP;AACD;;AAED,WAASC,eAAT,CAAyBN,KAAzB,EAA6C;AAC3C,QAAMH,eAAeF,wBAAwBG,OAA7C;AACAX,cACEU,gBAAgB,IADlB,EAEE,yEACE,uCAHJ;;AAMA,QAAMQ,UAAUZ,mBAAmBK,OAAnB,KAA+B,IAA/B,GACZL,mBAAmBK,OADP,GAEZhB,WAFJ;AAGA,QAAMyB,cAAchB,oBAAoBc,OAApB,EAA6BL,MAAMQ,IAAnC,EAAyCX,YAAzC,CAApB;;AAGA,QAAIQ,YAAYE,WAAhB,EAA6B;AAC3B;AACD;;AAIDrB,SAAKQ,uBAAL,EAA8BM,KAA9B,EAAqCA,KAArC;AACAd,SAAKO,kBAAL,EAAyBc,WAAzB,EAAsCP,KAAtC;AACD;;AAED,WAASS,cAAT,CAAwBT,KAAxB,EAA4C;AAG1C,QAAIN,wBAAwBI,OAAxB,KAAoCE,KAAxC,EAA+C;AAC7C;AACD;;AAEDf,QAAIQ,kBAAJ,EAAwBO,KAAxB;AACAf,QAAIS,uBAAJ,EAA6BM,KAA7B;AACD;;AAED,WAASU,kBAAT,GAA8B;AAC5BjB,uBAAmBK,OAAnB,GAA6B,IAA7B;AACAH,4BAAwBG,OAAxB,GAAkC,IAAlC;AACD;;AAED,SAAO;AACLM,kCADK;AAELR,8CAFK;AAGLO,sCAHK;AAILM,kCAJK;AAKLV,wCALK;AAMLO,oCANK;AAOLI;AAPK,GAAP;AASD,CAtGD","sourcesContent":["/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactFiberHostContext\n * @flow\n */\n\n'use strict';\n\nimport type {Fiber} from 'ReactFiber';\nimport type {HostConfig} from 'ReactFiberReconciler';\nimport type {StackCursor} from 'ReactFiberStack';\n\nconst emptyObject = require('fbjs/lib/emptyObject');\n\nconst {\n  createCursor,\n  pop,\n  push,\n} = require('ReactFiberStack');\n\nconst invariant = require('fbjs/lib/invariant');\n\nexport type HostContext<C, CX> = {\n  getHostContext(): CX,\n  getRootHostContainer(): C,\n  popHostContainer(fiber: Fiber): void,\n  popHostContext(fiber: Fiber): void,\n  pushHostContainer(fiber: Fiber, container: C): void,\n  pushHostContext(fiber: Fiber): void,\n  resetHostContainer(): void,\n};\n\nmodule.exports = function<T, P, I, TI, PI, C, CX, PL>(\n  config: HostConfig<T, P, I, TI, PI, C, CX, PL>,\n): HostContext<C, CX> {\n  const {\n    getChildHostContext,\n    getRootHostContext,\n  } = config;\n\n  let contextStackCursor: StackCursor<CX | null> = createCursor((null: ?CX));\n  let contextFiberStackCursor: StackCursor<Fiber | null> = createCursor(\n    (null: Fiber | null),\n  );\n  let rootInstanceStackCursor: StackCursor<C | null> = createCursor((null: ?C));\n\n  function getRootHostContainer(): C {\n    const rootInstance = rootInstanceStackCursor.current;\n    invariant(\n      rootInstance !== null,\n      'Expected root container to exist. This error is likely caused by a ' +\n        'bug in React. Please file an issue.',\n    );\n    return rootInstance;\n  }\n\n  function pushHostContainer(fiber: Fiber, nextRootInstance: C) {\n    // Push current root instance onto the stack;\n    // This allows us to reset root when portals are popped.\n    push(rootInstanceStackCursor, nextRootInstance, fiber);\n\n    const nextRootContext = getRootHostContext(nextRootInstance);\n\n    // Track the context and the Fiber that provided it.\n    // This enables us to pop only Fibers that provide unique contexts.\n    push(contextFiberStackCursor, fiber, fiber);\n    push(contextStackCursor, nextRootContext, fiber);\n  }\n\n  function popHostContainer(fiber: Fiber) {\n    pop(contextStackCursor, fiber);\n    pop(contextFiberStackCursor, fiber);\n    pop(rootInstanceStackCursor, fiber);\n  }\n\n  function getHostContext(): CX {\n    const context = contextStackCursor.current;\n    invariant(\n      context != null,\n      'Expected host context to exist. This error is likely caused by a bug ' +\n        'in React. Please file an issue.',\n    );\n    return context;\n  }\n\n  function pushHostContext(fiber: Fiber): void {\n    const rootInstance = rootInstanceStackCursor.current;\n    invariant(\n      rootInstance != null,\n      'Expected root host context to exist. This error is likely caused by ' +\n        'a bug in React. Please file an issue.',\n    );\n\n    const context = contextStackCursor.current !== null\n      ? contextStackCursor.current\n      : emptyObject;\n    const nextContext = getChildHostContext(context, fiber.type, rootInstance);\n\n    // Don't push this Fiber's context unless it's unique.\n    if (context === nextContext) {\n      return;\n    }\n\n    // Track the context and the Fiber that provided it.\n    // This enables us to pop only Fibers that provide unique contexts.\n    push(contextFiberStackCursor, fiber, fiber);\n    push(contextStackCursor, nextContext, fiber);\n  }\n\n  function popHostContext(fiber: Fiber): void {\n    // Do not pop unless this Fiber provided the current context.\n    // pushHostContext() only pushes Fibers that provide unique contexts.\n    if (contextFiberStackCursor.current !== fiber) {\n      return;\n    }\n\n    pop(contextStackCursor, fiber);\n    pop(contextFiberStackCursor, fiber);\n  }\n\n  function resetHostContainer() {\n    contextStackCursor.current = null;\n    rootInstanceStackCursor.current = null;\n  }\n\n  return {\n    getHostContext,\n    getRootHostContainer,\n    popHostContainer,\n    popHostContext,\n    pushHostContainer,\n    pushHostContext,\n    resetHostContainer,\n  };\n};\n"]}]