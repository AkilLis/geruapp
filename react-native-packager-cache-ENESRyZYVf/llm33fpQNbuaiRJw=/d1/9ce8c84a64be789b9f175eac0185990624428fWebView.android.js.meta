["718f320c015c79ab197a139d083e5c39ddc4552e","25d1548c9a6a1f57a03ad82d5548e46e3cc92658",["EdgeInsetsPropType","ActivityIndicator","React","ReactNative","StyleSheet","UIManager","View","ViewPropTypes","deprecatedPropType","fbjs/lib/keyMirror","requireNativeComponent","resolveAssetSource"],[49,104,146,182,223,262,295,333,385,432,492,552],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native/Libraries/Components/WebView/WebView.android.js"],"names":["EdgeInsetsPropType","require","ActivityIndicator","React","ReactNative","StyleSheet","UIManager","View","ViewPropTypes","deprecatedPropType","keyMirror","requireNativeComponent","resolveAssetSource","PropTypes","RCT_WEBVIEW_REF","WebViewState","IDLE","LOADING","ERROR","defaultRenderLoading","styles","loadingView","loadingProgressBar","WebView","state","viewState","lastErrorEvent","startInLoadingState","goForward","dispatchViewManagerCommand","getWebViewHandle","RCTWebView","Commands","goBack","reload","stopLoading","postMessage","data","String","injectJavaScript","updateNavigationState","event","props","onNavigationStateChange","nativeEvent","findNodeHandle","refs","onLoadingStart","onLoadStart","onLoadingError","persist","onError","onLoadEnd","console","warn","setState","onLoadingFinish","onLoad","onMessage","otherView","renderLoading","errorEvent","renderError","domain","code","description","error","loading","webViewStyles","container","style","push","hidden","source","html","url","uri","method","headers","body","webView","scalesPageToFit","injectedJavaScript","userAgent","javaScriptEnabled","domStorageEnabled","contentInset","automaticallyAdjustContentInsets","onContentSizeChange","testID","mediaPlaybackRequiresUserAction","allowUniversalAccessFromFileURLs","mixedContentMode","Component","propTypes","func","bool","string","oneOfType","shape","oneOf","object","baseUrl","number","defaultProps","nativeOnly","messagingEnabled","create","flex","height","justifyContent","alignItems","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule WebView\n */\n'use strict';\n\nvar EdgeInsetsPropType = require('EdgeInsetsPropType');\nvar ActivityIndicator = require('ActivityIndicator');\nvar React = require('React');\nvar ReactNative = require('ReactNative');\nvar StyleSheet = require('StyleSheet');\nvar UIManager = require('UIManager');\nvar View = require('View');\n\nconst ViewPropTypes = require('ViewPropTypes');\n\nvar deprecatedPropType = require('deprecatedPropType');\nvar keyMirror = require('fbjs/lib/keyMirror');\nvar requireNativeComponent = require('requireNativeComponent');\nvar resolveAssetSource = require('resolveAssetSource');\n\nvar PropTypes = React.PropTypes;\n\nvar RCT_WEBVIEW_REF = 'webview';\n\nvar WebViewState = keyMirror({\n  IDLE: null,\n  LOADING: null,\n  ERROR: null,\n});\n\nvar defaultRenderLoading = () => (\n  <View style={styles.loadingView}>\n    <ActivityIndicator\n      style={styles.loadingProgressBar}\n    />\n  </View>\n);\n\n/**\n * Renders a native WebView.\n */\nclass WebView extends React.Component {\n  static propTypes = {\n    ...ViewPropTypes,\n    renderError: PropTypes.func,\n    renderLoading: PropTypes.func,\n    onLoad: PropTypes.func,\n    onLoadEnd: PropTypes.func,\n    onLoadStart: PropTypes.func,\n    onError: PropTypes.func,\n    automaticallyAdjustContentInsets: PropTypes.bool,\n    contentInset: EdgeInsetsPropType,\n    onNavigationStateChange: PropTypes.func,\n    onMessage: PropTypes.func,\n    onContentSizeChange: PropTypes.func,\n    startInLoadingState: PropTypes.bool, // force WebView to show loadingView on first load\n    style: ViewPropTypes.style,\n\n    html: deprecatedPropType(\n      PropTypes.string,\n      'Use the `source` prop instead.'\n    ),\n\n    url: deprecatedPropType(\n      PropTypes.string,\n      'Use the `source` prop instead.'\n    ),\n\n    /**\n     * Loads static html or a uri (with optional headers) in the WebView.\n     */\n    source: PropTypes.oneOfType([\n      PropTypes.shape({\n        /*\n         * The URI to load in the WebView. Can be a local or remote file.\n         */\n        uri: PropTypes.string,\n        /*\n         * The HTTP Method to use. Defaults to GET if not specified.\n         * NOTE: On Android, only GET and POST are supported.\n         */\n        method: PropTypes.oneOf(['GET', 'POST']),\n        /*\n         * Additional HTTP headers to send with the request.\n         * NOTE: On Android, this can only be used with GET requests.\n         */\n        headers: PropTypes.object,\n        /*\n         * The HTTP body to send with the request. This must be a valid\n         * UTF-8 string, and will be sent exactly as specified, with no\n         * additional encoding (e.g. URL-escaping or base64) applied.\n         * NOTE: On Android, this can only be used with POST requests.\n         */\n        body: PropTypes.string,\n      }),\n      PropTypes.shape({\n        /*\n         * A static HTML page to display in the WebView.\n         */\n        html: PropTypes.string,\n        /*\n         * The base URL to be used for any relative links in the HTML.\n         */\n        baseUrl: PropTypes.string,\n      }),\n      /*\n       * Used internally by packager.\n       */\n      PropTypes.number,\n    ]),\n\n    /**\n     * Used on Android only, JS is enabled by default for WebView on iOS\n     * @platform android\n     */\n    javaScriptEnabled: PropTypes.bool,\n\n    /**\n     * Used on Android only, controls whether DOM Storage is enabled or not\n     * @platform android\n     */\n    domStorageEnabled: PropTypes.bool,\n\n    /**\n     * Sets the JS to be injected when the webpage loads.\n     */\n    injectedJavaScript: PropTypes.string,\n\n    /**\n     * Sets whether the webpage scales to fit the view and the user can change the scale.\n     */\n    scalesPageToFit: PropTypes.bool,\n\n    /**\n     * Sets the user-agent for this WebView. The user-agent can also be set in native using\n     * WebViewConfig. This prop will overwrite that config.\n     */\n    userAgent: PropTypes.string,\n\n    /**\n     * Used to locate this view in end-to-end tests.\n     */\n    testID: PropTypes.string,\n\n    /**\n     * Determines whether HTML5 audio & videos require the user to tap before they can\n     * start playing. The default value is `false`.\n     */\n    mediaPlaybackRequiresUserAction: PropTypes.bool,\n\n    /**\n     * Boolean that sets whether JavaScript running in the context of a file\n     * scheme URL should be allowed to access content from any origin.\n     * Including accessing content from other file scheme URLs\n     * @platform android\n     */\n    allowUniversalAccessFromFileURLs: PropTypes.bool,\n\n    /**\n     * Function that accepts a string that will be passed to the WebView and\n     * executed immediately as JavaScript.\n     */\n    injectJavaScript: PropTypes.func,\n\n    /**\n     * Specifies the mixed content mode. i.e WebView will allow a secure origin to load content from any other origin.\n     *\n     * Possible values for `mixedContentMode` are:\n     *\n     * - `'never'` (default) - WebView will not allow a secure origin to load content from an insecure origin.\n     * - `'always'` - WebView will allow a secure origin to load content from any other origin, even if that origin is insecure.\n     * - `'compatibility'` -  WebView will attempt to be compatible with the approach of a modern web browser with regard to mixed content.\n     * @platform android\n     */\n    mixedContentMode: PropTypes.oneOf([\n      'never',\n      'always',\n      'compatibility'\n    ]),\n  };\n\n  static defaultProps = {\n    javaScriptEnabled : true,\n    scalesPageToFit: true,\n  };\n\n  state = {\n    viewState: WebViewState.IDLE,\n    lastErrorEvent: null,\n    startInLoadingState: true,\n  };\n\n  componentWillMount() {\n    if (this.props.startInLoadingState) {\n      this.setState({viewState: WebViewState.LOADING});\n    }\n  }\n\n  render() {\n    var otherView = null;\n\n   if (this.state.viewState === WebViewState.LOADING) {\n      otherView = (this.props.renderLoading || defaultRenderLoading)();\n    } else if (this.state.viewState === WebViewState.ERROR) {\n      var errorEvent = this.state.lastErrorEvent;\n      otherView = this.props.renderError && this.props.renderError(\n        errorEvent.domain,\n        errorEvent.code,\n        errorEvent.description);\n    } else if (this.state.viewState !== WebViewState.IDLE) {\n      console.error('RCTWebView invalid state encountered: ' + this.state.loading);\n    }\n\n    var webViewStyles = [styles.container, this.props.style];\n    if (this.state.viewState === WebViewState.LOADING ||\n      this.state.viewState === WebViewState.ERROR) {\n      // if we're in either LOADING or ERROR states, don't show the webView\n      webViewStyles.push(styles.hidden);\n    }\n\n    var source = this.props.source || {};\n    if (this.props.html) {\n      source.html = this.props.html;\n    } else if (this.props.url) {\n      source.uri = this.props.url;\n    }\n\n    if (source.method === 'POST' && source.headers) {\n      console.warn('WebView: `source.headers` is not supported when using POST.');\n    } else if (source.method === 'GET' && source.body) {\n      console.warn('WebView: `source.body` is not supported when using GET.');\n    }\n\n    var webView =\n      <RCTWebView\n        ref={RCT_WEBVIEW_REF}\n        key=\"webViewKey\"\n        style={webViewStyles}\n        source={resolveAssetSource(source)}\n        scalesPageToFit={this.props.scalesPageToFit}\n        injectedJavaScript={this.props.injectedJavaScript}\n        userAgent={this.props.userAgent}\n        javaScriptEnabled={this.props.javaScriptEnabled}\n        domStorageEnabled={this.props.domStorageEnabled}\n        messagingEnabled={typeof this.props.onMessage === 'function'}\n        onMessage={this.onMessage}\n        contentInset={this.props.contentInset}\n        automaticallyAdjustContentInsets={this.props.automaticallyAdjustContentInsets}\n        onContentSizeChange={this.props.onContentSizeChange}\n        onLoadingStart={this.onLoadingStart}\n        onLoadingFinish={this.onLoadingFinish}\n        onLoadingError={this.onLoadingError}\n        testID={this.props.testID}\n        mediaPlaybackRequiresUserAction={this.props.mediaPlaybackRequiresUserAction}\n        allowUniversalAccessFromFileURLs={this.props.allowUniversalAccessFromFileURLs}\n        mixedContentMode={this.props.mixedContentMode}\n      />;\n\n    return (\n      <View style={styles.container}>\n        {webView}\n        {otherView}\n      </View>\n    );\n  }\n\n  goForward = () => {\n    UIManager.dispatchViewManagerCommand(\n      this.getWebViewHandle(),\n      UIManager.RCTWebView.Commands.goForward,\n      null\n    );\n  };\n\n  goBack = () => {\n    UIManager.dispatchViewManagerCommand(\n      this.getWebViewHandle(),\n      UIManager.RCTWebView.Commands.goBack,\n      null\n    );\n  };\n\n  reload = () => {\n    UIManager.dispatchViewManagerCommand(\n      this.getWebViewHandle(),\n      UIManager.RCTWebView.Commands.reload,\n      null\n    );\n  };\n\n  stopLoading = () => {\n    UIManager.dispatchViewManagerCommand(\n      this.getWebViewHandle(),\n      UIManager.RCTWebView.Commands.stopLoading,\n      null\n    );\n  };\n\n  postMessage = (data) => {\n    UIManager.dispatchViewManagerCommand(\n      this.getWebViewHandle(),\n      UIManager.RCTWebView.Commands.postMessage,\n      [String(data)]\n    );\n  };\n\n  /**\n  * Injects a javascript string into the referenced WebView. Deliberately does not\n  * return a response because using eval() to return a response breaks this method\n  * on pages with a Content Security Policy that disallows eval(). If you need that\n  * functionality, look into postMessage/onMessage.\n  */\n  injectJavaScript = (data) => {\n    UIManager.dispatchViewManagerCommand(\n      this.getWebViewHandle(),\n      UIManager.RCTWebView.Commands.injectJavaScript,\n      [data]\n    );\n  };\n\n  /**\n   * We return an event with a bunch of fields including:\n   *  url, title, loading, canGoBack, canGoForward\n   */\n  updateNavigationState = (event) => {\n    if (this.props.onNavigationStateChange) {\n      this.props.onNavigationStateChange(event.nativeEvent);\n    }\n  };\n\n  getWebViewHandle = () => {\n    return ReactNative.findNodeHandle(this.refs[RCT_WEBVIEW_REF]);\n  };\n\n  onLoadingStart = (event) => {\n    var onLoadStart = this.props.onLoadStart;\n    onLoadStart && onLoadStart(event);\n    this.updateNavigationState(event);\n  };\n\n  onLoadingError = (event) => {\n    event.persist(); // persist this event because we need to store it\n    var {onError, onLoadEnd} = this.props;\n    onError && onError(event);\n    onLoadEnd && onLoadEnd(event);\n    console.warn('Encountered an error loading page', event.nativeEvent);\n\n    this.setState({\n      lastErrorEvent: event.nativeEvent,\n      viewState: WebViewState.ERROR\n    });\n  };\n\n  onLoadingFinish = (event) => {\n    var {onLoad, onLoadEnd} = this.props;\n    onLoad && onLoad(event);\n    onLoadEnd && onLoadEnd(event);\n    this.setState({\n      viewState: WebViewState.IDLE,\n    });\n    this.updateNavigationState(event);\n  };\n\n  onMessage = (event: Event) => {\n    var {onMessage} = this.props;\n    onMessage && onMessage(event);\n  }\n}\n\nvar RCTWebView = requireNativeComponent('RCTWebView', WebView, {\n  nativeOnly: {\n    messagingEnabled: PropTypes.bool,\n  },\n});\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  hidden: {\n    height: 0,\n    flex: 0, // disable 'flex:1' when hiding a View\n  },\n  loadingView: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  loadingProgressBar: {\n    height: 20,\n  },\n});\n\nmodule.exports = WebView;\n"]}]