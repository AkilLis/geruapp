["2d85ac7849d190bd65b6c9911b1a354ecd14e6b6","2c93b13f6c5a15dce0356ba8cb77598ffb60b566",["react-native-simple-store","../env"],[177,320],{"version":3,"sources":["/var/www/geruapp/src/auth/AppAuthToken.js"],"names":["AppAuthToken","SESSION_TOKEN_KEY","sessionToken","save","then","get","delete","appAuthToken"],"mappings":";AAOA;;;;;;;AAMA;;;;AACA;;;;IAEaA,Y,WAAAA,Y;AAMX,0BAAe;AAAA;;AACb,SAAKC,iBAAL,GAAyB,cAAOA,iBAAhC;AACD;;;;sCAMkBC,Y,EAAc;AAC/B,aAAO,iCAAMC,IAAN,CAAW,KAAKF,iBAAhB,EAAmC;AACxCC,sBAAcA;AAD0B,OAAnC,CAAP;AAGD;;;oCASgBA,Y,EAAc;AAAA;;AAC7B,UAAIA,YAAJ,EAAkB;AAChB,eAAO,iCAAMC,IAAN,CAAW,KAAKF,iBAAhB,EAAmC;AACxCC,wBAAcA;AAD0B,SAAnC,EAEJE,IAFI,CAEC,YAAM;AACZ,iBAAO,iCAAMC,GAAN,CAAU,MAAKJ,iBAAf,CAAP;AACD,SAJM,CAAP;AAKD;AACD,aAAO,iCAAMI,GAAN,CAAU,KAAKJ,iBAAf,CAAP;AACD;;;yCAKqB;AACpB,aAAO,iCAAMK,MAAN,CAAa,KAAKL,iBAAlB,CAAP;AACD;;;;;AAGI,IAAIM,sCAAe,IAAIP,YAAJ,EAAnB","sourcesContent":["/**\n * # AppAuthToken.js\n *\n * A thin wrapper over the react-native-simple-store\n *\n * Singleton module see https://k94n.com/es6-modules-single-instance-pattern\n */\n'use strict'\n/**\n * ## Imports\n *\n * Redux  & the config file\n */\nimport store from 'react-native-simple-store'\nimport CONFIG from '../env'\n\nexport class AppAuthToken {\n  /**\n   * ## AppAuthToken\n   *\n   * set the key from the config\n   */\n  constructor () {\n    this.SESSION_TOKEN_KEY = CONFIG.SESSION_TOKEN_KEY\n  }\n\n  /**\n   * ### storeSessionToken\n   * Store the session key\n   */\n  storeSessionToken (sessionToken) {\n    return store.save(this.SESSION_TOKEN_KEY, {\n      sessionToken: sessionToken\n    })\n  }\n  /**\n   * ### getSessionToken\n   * @param {Object} sessionToken the currentUser object\n   *\n   * When Hot Loading, the sessionToken  will be passed in, and if so,\n   * it needs to be stored on the device.  Remember, the store is a\n   * promise so, have to be careful.\n   */\n  getSessionToken (sessionToken) {\n    if (sessionToken) {\n      return store.save(this.SESSION_TOKEN_KEY, {\n        sessionToken: sessionToken\n      }).then(() => {\n        return store.get(this.SESSION_TOKEN_KEY)\n      })\n    }\n    return store.get(this.SESSION_TOKEN_KEY)\n  }\n  /**\n   * ### deleteSessionToken\n   * Deleted during log out\n   */\n  deleteSessionToken () {\n    return store.delete(this.SESSION_TOKEN_KEY)\n  }\n}\n// The singleton variable\nexport let appAuthToken = new AppAuthToken()"]}]