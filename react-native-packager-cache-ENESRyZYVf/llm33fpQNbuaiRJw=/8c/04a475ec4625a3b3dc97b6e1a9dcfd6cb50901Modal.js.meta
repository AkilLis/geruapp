["e0fe65885b68a264a178f2c89aa12d6338e1fdc4","38536a0954cb428fe6986063e95427971fb2893f",["AppContainer","I18nManager","Platform","React","StyleSheet","View","deprecatedPropType","requireNativeComponent"],[60,103,142,175,210,244,287,347],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native/Libraries/Modal/Modal.js"],"names":["AppContainer","require","I18nManager","Platform","React","StyleSheet","View","deprecatedPropType","requireNativeComponent","RCTModalHostView","PropTypes","Modal","props","visible","containerStyles","backgroundColor","transparent","animationType","animated","innerChildren","__DEV__","context","rootTag","children","hardwareAccelerated","onRequestClose","onShow","styles","modal","_shouldSetResponder","supportedOrientations","onOrientationChange","container","Component","propTypes","oneOf","bool","OS","func","isRequired","arrayOf","defaultProps","contextTypes","number","side","isRTL","create","position","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Modal\n * @flow\n */\n'use strict';\n\nconst AppContainer = require('AppContainer');\nconst I18nManager = require('I18nManager');\nconst Platform = require('Platform');\nconst React = require('React');\nconst StyleSheet = require('StyleSheet');\nconst View = require('View');\n\nconst deprecatedPropType = require('deprecatedPropType');\nconst requireNativeComponent = require('requireNativeComponent');\nconst RCTModalHostView = requireNativeComponent('RCTModalHostView', null);\n\nconst PropTypes = React.PropTypes;\n\n/**\n * The Modal component is a simple way to present content above an enclosing view.\n *\n * _Note: If you need more control over how to present modals over the rest of your app,\n * then consider using a top-level Navigator._\n *\n * ```javascript\n * import React, { Component } from 'react';\n * import { Modal, Text, TouchableHighlight, View } from 'react-native';\n *\n * class ModalExample extends Component {\n *\n *   state = {\n *     modalVisible: false,\n *   }\n *\n *   setModalVisible(visible) {\n *     this.setState({modalVisible: visible});\n *   }\n *\n *   render() {\n *     return (\n *       <View style={{marginTop: 22}}>\n *         <Modal\n *           animationType={\"slide\"}\n *           transparent={false}\n *           visible={this.state.modalVisible}\n *           onRequestClose={() => {alert(\"Modal has been closed.\")}}\n *           >\n *          <View style={{marginTop: 22}}>\n *           <View>\n *             <Text>Hello World!</Text>\n *\n *             <TouchableHighlight onPress={() => {\n *               this.setModalVisible(!this.state.modalVisible)\n *             }}>\n *               <Text>Hide Modal</Text>\n *             </TouchableHighlight>\n *\n *           </View>\n *          </View>\n *         </Modal>\n *\n *         <TouchableHighlight onPress={() => {\n *           this.setModalVisible(true)\n *         }}>\n *           <Text>Show Modal</Text>\n *         </TouchableHighlight>\n *\n *       </View>\n *     );\n *   }\n * }\n * ```\n */\nclass Modal extends React.Component {\n  static propTypes = {\n    /**\n     * The `animationType` prop controls how the modal animates.\n     *\n     * - `slide` slides in from the bottom\n     * - `fade` fades into view\n     * - `none` appears without an animation\n     *\n     * Default is set to `none`.\n     */\n    animationType: PropTypes.oneOf(['none', 'slide', 'fade']),\n    /**\n     * The `transparent` prop determines whether your modal will fill the entire view. Setting this to `true` will render the modal over a transparent background.\n     */\n    transparent: PropTypes.bool,\n    /**\n     * The `hardwareAccelerated` prop controls whether to force hardware acceleration for the underlying window.\n     * @platform android\n     */\n    hardwareAccelerated: PropTypes.bool,\n    /**\n     * The `visible` prop determines whether your modal is visible.\n     */\n    visible: PropTypes.bool,\n    /**\n     * The `onRequestClose` callback is called when the user taps the hardware back button.\n     * @platform android\n     */\n    onRequestClose: Platform.OS === 'android' ? PropTypes.func.isRequired : PropTypes.func,\n    /**\n     * The `onShow` prop allows passing a function that will be called once the modal has been shown.\n     */\n    onShow: PropTypes.func,\n    animated: deprecatedPropType(\n      PropTypes.bool,\n      'Use the `animationType` prop instead.'\n    ),\n    /**\n     * The `supportedOrientations` prop allows the modal to be rotated to any of the specified orientations.\n     * On iOS, the modal is still restricted by what's specified in your app's Info.plist's UISupportedInterfaceOrientations field.\n     * @platform ios\n     */\n    supportedOrientations: PropTypes.arrayOf(PropTypes.oneOf(['portrait', 'portrait-upside-down', 'landscape', 'landscape-left', 'landscape-right'])),\n    /**\n     * The `onOrientationChange` callback is called when the orientation changes while the modal is being displayed.\n     * The orientation provided is only 'portrait' or 'landscape'. This callback is also called on initial render, regardless of the current orientation.\n     * @platform ios\n     */\n    onOrientationChange: PropTypes.func,\n  };\n\n  static defaultProps = {\n    visible: true,\n    hardwareAccelerated: false,\n  };\n\n  static contextTypes = {\n    rootTag: React.PropTypes.number,\n  };\n\n  render(): ?React.Element<any> {\n    if (this.props.visible === false) {\n      return null;\n    }\n\n    const containerStyles = {\n      backgroundColor: this.props.transparent ? 'transparent' : 'white',\n    };\n\n    let animationType = this.props.animationType;\n    if (!animationType) {\n      // manually setting default prop here to keep support for the deprecated 'animated' prop\n      animationType = 'none';\n      if (this.props.animated) {\n        animationType = 'slide';\n      }\n    }\n\n    const innerChildren = __DEV__ ?\n      ( <AppContainer rootTag={this.context.rootTag}>\n          {this.props.children}\n        </AppContainer>) :\n      this.props.children;\n\n    return (\n      <RCTModalHostView\n        animationType={animationType}\n        transparent={this.props.transparent}\n        hardwareAccelerated={this.props.hardwareAccelerated}\n        onRequestClose={this.props.onRequestClose}\n        onShow={this.props.onShow}\n        style={styles.modal}\n        onStartShouldSetResponder={this._shouldSetResponder}\n        supportedOrientations={this.props.supportedOrientations}\n        onOrientationChange={this.props.onOrientationChange}\n        >\n        <View style={[styles.container, containerStyles]}>\n          {innerChildren}\n        </View>\n      </RCTModalHostView>\n    );\n  }\n\n  // We don't want any responder events bubbling out of the modal.\n  _shouldSetResponder(): boolean {\n    return true;\n  }\n}\n\nconst side = I18nManager.isRTL ? 'right' : 'left';\nconst styles = StyleSheet.create({\n  modal: {\n    position: 'absolute',\n  },\n  container: {\n    position: 'absolute',\n    [side] : 0,\n    top: 0,\n  }\n});\n\nmodule.exports = Modal;\n"]}]