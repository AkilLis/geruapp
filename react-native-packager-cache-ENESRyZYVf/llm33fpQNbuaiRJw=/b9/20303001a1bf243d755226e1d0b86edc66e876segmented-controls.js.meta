["08cb15b91c304d83cc4565eecdfcc0e6ff0a66db","43f9634894d948cf780c36ede9f25bf9a298e956",["react","react-native","./"],[102,199,304],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native-radio-buttons/lib/segmented-controls.js"],"names":["Text","TouchableWithoutFeedback","View","Platform","SegmentedControls","config","getConfig","props","renderOption","bind","renderContainer","tint","DEFAULTS","backTint","colors","selectedTint","backgroundColor","selectedBackgroundColor","containerBorderTint","separatorTint","options","baseContainerStyle","flexDirection","direction","borderColor","borderWidth","containerBorderWidth","overflow","borderRadius","containerBorderRadius","containerStyle","option","selected","onSelect","index","disabled","enabled","baseTextStyle","textAlign","normalTextStyle","optionStyle","color","selectedTextStyle","baseColor","opacity","baseOptionContainerStyle","flex","paddingTop","paddingBottom","borderStyles","borderLeftWidth","separatorWidth","borderLeftColor","borderTopWidth","borderTopColor","separatorStyle","borderRadiusStyle","OS","adjustedBorderRadius","length","borderTopLeftRadius","borderBottomLeftRadius","borderTopRightRadius","borderBottomRightRadius","textStyle","label","extractText","scaleFont","allowFontScaling","optionContainerStyle","call","Component","IOS_BLUE","IOS_WHITE"],"mappings":"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","sourcesContent":["'use strict';\nimport React from 'react';\nimport ReactNative from 'react-native';\nimport RadioButtons from './';\n\nconst {\n  Text,\n  TouchableWithoutFeedback,\n  View,\n  Platform\n} = ReactNative;\n\nclass SegmentedControls extends React.Component {\n\n  render(){\n    const config = this.getConfig();\n\n    return (\n      <RadioButtons {...this.props}\n        renderOption={ this.renderOption.bind(this, config) }\n        renderContainer={ this.renderContainer.bind(this, config) }\n      />\n    );\n  }\n\n  getConfig(){\n    const tint = this.props.tint || DEFAULTS.tint;\n    const backTint = this.props.backTint || DEFAULTS.backTint;\n    const colors = {\n      tint: tint,\n      selectedTint: backTint,\n      backgroundColor: backTint,\n      selectedBackgroundColor: tint,\n      containerBorderTint: tint,\n      separatorTint: tint,\n    };\n\n    return {\n      ...DEFAULTS,\n      ...colors,\n      ...this.props,\n    };\n  }\n\n  renderContainer(config, options){\n    var baseContainerStyle = {\n      flexDirection: config.direction,\n      backgroundColor: config.backgroundColor,\n      borderColor: config.containerBorderTint,\n      borderWidth: config.containerBorderWidth,\n      overflow: 'hidden'\n    };\n\n    baseContainerStyle.borderRadius = config.containerBorderRadius;\n\n    const containerStyle = [baseContainerStyle, this.props.containerStyle];\n\n    return <View style={ containerStyle }>{options}</View>;\n  }\n\n  renderOption(config, option, selected, onSelect, index){\n\n    const disabled = this.props.enabled === false;\n\n    const baseTextStyle = {\n      textAlign: config.textAlign\n    };\n\n    const normalTextStyle = [baseTextStyle, this.props.optionStyle, {\n      color: config.tint\n    }];\n\n    const selectedTextStyle = [baseTextStyle, this.props.optionStyle, {\n      color: config.selectedTint\n    }];\n\n    const baseColor = selected? config.selectedBackgroundColor: config.backgroundColor;\n    const opacity = disabled ? 0.5 : 1.0;\n    const baseOptionContainerStyle = {\n      flex: 1,\n      paddingTop: config.paddingTop,\n      paddingBottom: config.paddingBottom,\n      backgroundColor: baseColor,\n      opacity: opacity\n    };\n\n    const borderStyles = config.direction === 'row' ?\n      {\n        borderLeftWidth: config.separatorWidth,\n        borderLeftColor: config.separatorTint,\n      } : {\n        borderTopWidth: config.separatorWidth,\n        borderTopColor: config.separatorTint,\n      };\n\n    const separatorStyle = [baseOptionContainerStyle, borderStyles];\n\n    const {containerBorderRadius, containerBorderWidth} = config;\n    let borderRadiusStyle;\n\n    // Workaround to get containerBorderRadius working on Android\n    if (Platform.OS === \"android\" && containerBorderRadius) {\n      const adjustedBorderRadius = containerBorderRadius - containerBorderWidth;\n      if (this.props.options.length > 1) {\n        if (index === 0) {\n          borderRadiusStyle = {borderTopLeftRadius: adjustedBorderRadius,\n                               borderBottomLeftRadius: adjustedBorderRadius};\n        } else if (index === this.props.options.length - 1) {\n          borderRadiusStyle = {borderTopRightRadius: adjustedBorderRadius,\n                               borderBottomRightRadius: adjustedBorderRadius};\n        }\n      } else {\n        borderRadiusStyle = {borderRadius: adjustedBorderRadius};\n      }\n    }\n\n    const textStyle = selected ? selectedTextStyle : normalTextStyle;\n\n    const label = this.props.extractText ? this.props.extractText(option) : option;\n\n    // Default to true for undefined - like RN currently does\n    const scaleFont = (this.props.allowFontScaling === false) ? false : true;\n\n    return (\n      <TouchableWithoutFeedback onPress={onSelect} key={index} disabled={disabled}>\n        <View style={[index > 0 ? separatorStyle : baseOptionContainerStyle, this.props.optionContainerStyle, borderRadiusStyle]}>\n          {typeof this.props.renderOption === 'function' ? this.props.renderOption.call(this, option, selected) : (\n            <Text allowFontScaling={scaleFont} style={textStyle}>{label}</Text>\n          )}\n        </View>\n      </TouchableWithoutFeedback>\n    );\n  }\n}\n\nconst IOS_BLUE = '#007AFF';\nconst IOS_WHITE = '#ffffff';\n\nconst DEFAULTS = {\n  direction: 'row',\n\n  tint: IOS_BLUE,\n  backTint: IOS_WHITE,\n\n  paddingTop: 5,\n  paddingBottom: 5,\n  textAlign: 'center',\n\n  selectedTint: IOS_WHITE,\n  selectedBackgroundColor: IOS_WHITE,\n\n  separatorTint: IOS_BLUE,\n  separatorWidth: 1,\n\n  containerBorderTint: IOS_BLUE,\n  containerBorderWidth: 1,\n  containerBorderRadius: 5,\n\n};\nexport default SegmentedControls;\n"]}]