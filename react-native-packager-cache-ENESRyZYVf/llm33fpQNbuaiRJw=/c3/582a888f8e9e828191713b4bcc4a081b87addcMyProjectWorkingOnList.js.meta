["041ab54d1721204abeb4a17ec098f025aca6f51c","c2708989010b65176d4e2c2d00958a80f88dc737",["react","react-native","react-native-gifted-listview","react-native-gifted-spinner","./card/ProjectCardWorking"],[87,184,243,416,580],{"version":3,"sources":["/var/www/geruapp/src/project/components/MyProjectWorkingOnList.js"],"names":["MyProjectWorkingOnList","props","_renderRowView","bind","data","rowData","styles","separator","refreshCallback","defaultView","defaultViewTitle","paginateCallback","paginationView","actionsLabel","fontSize","onFetchMyProjectsWorking","_renderPaginationFetchigView","_renderPaginationWaitingView","_renderPaginationAllLoadedView","_renderEmptyView","_renderSeparatorView","propTypes","projects","array","defaultProps","create","container","flex","height","backgroundColor"],"mappings":";;;;AAAA;;;;AACA;;AAOA;;;;AACA;;;;AACA;;;;IAEqBA,sB;;;AAEjB,kCAAYC,KAAZ,EAAmB;AAAA;;AAAA,4JACXA,KADW;;AAEjB,UAAKC,cAAL,GAAsB,MAAKA,cAAL,CAAoBC,IAApB,OAAtB;AAFiB;AAGlB;;;;6BAEQC,I,EAAM,CAEd;;;mCAEcC,O,EAAS;AACpB,aACG,8DAAoB,SAASA;AAA7B,QADH;AAIH;;;2CAEsB;AACnB,aACE,mDAAM,OAAOC,OAAOC,SAApB,GADF;AAGH;;;qCAEgBC,e,EAAiB;AAC9B,aACE;AAAA;AAAA,UAAM,OAAOF,OAAOG,WAApB;AACE;AAAA;AAAA,YAAM,OAAOH,OAAOI,gBAApB;AAAA;AAAA,SADF;AAKE;AAAA;AAAA;AACE,2BAAc,SADhB;AAEE,qBAASF;AAFX;AAIE;AAAA;AAAA;AAAA;AAAA;AAJF;AALF,OADF;AAgBH;;;iDAE4BG,gB,EAAkB;AAC3C,aACE;AAAA;AAAA;AACE,yBAAc,SADhB;AAEE,mBAASA,gBAFX;AAGE,iBAAOL,OAAOM;AAHhB;AAKE;AAAA;AAAA,YAAM,OAAO,CAACN,OAAOO,YAAR,EAAsB,EAAEC,UAAU,EAAZ,EAAtB,CAAb;AAAA;AAAA;AALF,OADF;AAWH;;;mDAE8B;AAC3B,aACE;AAAA;AAAA,UAAM,OAAOR,OAAOM,cAApB;AACE;AADF,OADF;AAKH;;;qDAEgC;AAC7B,aACE,sDADF;AAKH;;;6BAES;AACT,aACI;AACO,iBAAS,KAAKV,cADrB;AAEO,iBAAS,KAAKD,KAAL,CAAWc,wBAF3B;AAGO,yBAAiB,CAHxB;AAIO,qBAAa,IAJpB;AAKO,oBAAY,IALnB;AAMO,+BAAuB,KAAKC,4BANnC;AAOO,+BAAuB,KAAKC,4BAPnC;AAQO,iCAAyB,KAAKC,8BARrC;AASO,qBAAa,IATpB;AAUO,+BAAuB,EAV9B;AAWO,6BAAqB,EAX5B;AAYO,mBAAW,KAAKC,gBAZvB;AAaO,yBAAiB,KAAKC,oBAb7B;AAcO,8BAAqB;AAd5B,QADJ;AAkBA;;;;;kBA5FgBpB,sB;;;AA+FrBA,uBAAuBqB,SAAvB,GAAmC;AAClCC,YAAU,iBAAUC;AADc,CAAnC;;AAIAvB,uBAAuBwB,YAAvB,GAAsC;AACrCF,YAAU;AAD2B,CAAtC;;AAIA,IAAIhB,SAAS,wBAAWmB,MAAX,CAAkB;AAC3BC,aAAW;AACPC,UAAM;AADC,GADgB;;AAM3BpB,aAAW;AACPqB,YAAQ,EADD;AAEPC,qBAAiB;AAFV;AANgB,CAAlB,CAAb","sourcesContent":["import React, { PropTypes, Component } from 'react'\nimport { \n\tStyleSheet,\n\tView, \n\tText,\n\tTouchableHighlight\n} from 'react-native'\n\nimport GiftedListView from 'react-native-gifted-listview'\nimport GiftedSpinner from 'react-native-gifted-spinner'\nimport ProjectCardWorking from './card/ProjectCardWorking'\n\nexport default class MyProjectWorkingOnList extends Component {\n  \n    constructor(props) {\n      super(props)\n      this._renderRowView = this._renderRowView.bind(this)\n    }\n\n    _onPress(data) {\n        \n    }\n\n    _renderRowView(rowData) {\n        return (\n           <ProjectCardWorking project={rowData}\n           />\n        )\n    }\n\n    _renderSeparatorView() {\n        return (\n          <View style={styles.separator} />\n        )\n    }\n\n    _renderEmptyView(refreshCallback) {\n        return (\n          <View style={styles.defaultView}>\n            <Text style={styles.defaultViewTitle}>\n                Танд одоогоор дуусгасан ажил алга байна. Аливааг эхлэх хамгийн хэцүү байдаг.  \n            </Text>\n\n            <TouchableHighlight\n              underlayColor='#c8c7cc'\n              onPress={refreshCallback}\n            >\n              <Text>\n                ↻\n              </Text>\n            </TouchableHighlight>\n          </View>\n        )\n    }\n\n    _renderPaginationWaitingView(paginateCallback) {\n        return (\n          <TouchableHighlight\n            underlayColor='#c8c7cc'\n            onPress={paginateCallback}\n            style={styles.paginationView}\n          >\n            <Text style={[styles.actionsLabel, { fontSize: 13 }]}>\n              ЦААШ\n            </Text>\n          </TouchableHighlight>\n        )\n    }\n\n    _renderPaginationFetchigView() {\n        return (\n          <View style={styles.paginationView}>\n            <GiftedSpinner />\n          </View>\n        )\n    }\n\n    _renderPaginationAllLoadedView() {\n        return (\n          <View>\n            \n          </View>\n        )\n    }\n\n    render () {\n\t    return (\n\t        <GiftedListView\n                rowView={this._renderRowView}\n                onFetch={this.props.onFetchMyProjectsWorking}\n                initialListSize={8}\n                firstLoader={true}\n                pagination={true}\n                paginationFetchigView={this._renderPaginationFetchigView}\n                paginationWaitingView={this._renderPaginationWaitingView}\n                paginationAllLoadedView={this._renderPaginationAllLoadedView}\n                refreshable={true} \n                refreshableViewHeight={50} \n                refreshableDistance={40} \n                emptyView={this._renderEmptyView}\n                renderSeparator={this._renderSeparatorView}\n                refreshableTintColor=\"red\"\n            />\n\t    )\n    }\n}\n\nMyProjectWorkingOnList.propTypes = {\n\tprojects: PropTypes.array,\n}\n\nMyProjectWorkingOnList.defaultProps = {\n\tprojects: []\n}\n\nlet styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        //paddingHorizontal: 10,\n    },\n\n    separator: {\n        height: 30,\n        backgroundColor: 'transparent'\n    },\n})\n"]}]