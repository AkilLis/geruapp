["807b6e8c5668893bd37445d7351f2f806a2d6d28","9038fa377e49dba3b1c7840dd2078437b4702f95",["ReactNativeComponentTree","ReactNativeInjection","ReactNativeMount","ReactNativeStackInjection","ReactUpdates","findNodeHandle","takeSnapshot","ReactReconciler"],[55,119,175,236,293,341,387,1922],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native/Libraries/Renderer/src/renderers/native/ReactNativeStack.js"],"names":["ReactNativeComponentTree","require","ReactNativeInjection","ReactNativeMount","ReactNativeStackInjection","ReactUpdates","findNodeHandle","takeSnapshot","inject","render","element","mountInto","callback","renderComponent","ReactNative","hasReactNativeInitialized","componentOrHandle","nodeHandle","getHostNode","unmountComponentAtNode","unstable_batchedUpdates","batchedUpdates","unmountComponentAtNodeAndRemoveContainer","__REACT_DEVTOOLS_GLOBAL_HOOK__","ComponentTree","getClosestInstanceFromNode","node","getNodeFromInstance","inst","_renderedComponent","Mount","Reconciler","module","exports"],"mappings":";AAWA;;AAEA,IAAIA,2BAA2BC,QAAQ,0BAAR,CAA/B;AACA,IAAIC,uBAAuBD,QAAQ,sBAAR,CAA3B;AACA,IAAIE,mBAAmBF,QAAQ,kBAAR,CAAvB;AACA,IAAIG,4BAA4BH,QAAQ,2BAAR,CAAhC;AACA,IAAII,eAAeJ,QAAQ,cAAR,CAAnB;;AAEA,IAAIK,kBAAiBL,QAAQ,gBAAR,CAArB;AACA,IAAIM,eAAeN,QAAQ,cAAR,CAAnB;;AAEAC,qBAAqBM,MAArB;AACAJ,0BAA0BI,MAA1B;;AAEA,IAAIC,SAAS,SAATA,MAAS,CACXC,OADW,EAEXC,SAFW,EAGXC,QAHW,EAIqB;AAChC,SAAOT,iBAAiBU,eAAjB,CAAiCH,OAAjC,EAA0CC,SAA1C,EAAqDC,QAArD,CAAP;AACD,CAND;;AAQA,IAAIE,cAAc;AAChBC,6BAA2B,KADX;;AAMhBT,gBANgB,0BAMDU,iBANC,EAMgC;AAC9C,QAAMC,aAAaX,gBAAeU,iBAAf,CAAnB;AACA,QAAIC,cAAc,IAAd,IAAsB,OAAOA,UAAP,KAAsB,QAAhD,EAA0D;AACxD,aAAOA,UAAP;AACD;AACD,WAAOA,WAAWC,WAAX,EAAP;AACD,GAZe;;;AAchBT,UAAQA,MAdQ;;AAgBhBF,4BAhBgB;;AAkBhBY,0BAAwBhB,iBAAiBgB,sBAlBzB;;AAqBhBC,2BAAyBf,aAAagB,cArBtB;;;AAwBhBC,4CAA0CnB,iBAAiBmB;AAxB3C,CAAlB;;AA8BA,IACE,OAAOC,8BAAP,KAA0C,WAA1C,IACA,OAAOA,+BAA+Bf,MAAtC,KAAiD,UAFnD,EAGE;AACAe,iCAA+Bf,MAA/B,CAAsC;AACpCgB,mBAAe;AACbC,kCAA4B,oCAASC,IAAT,EAAe;AACzC,eAAO1B,yBAAyByB,0BAAzB,CAAoDC,IAApD,CAAP;AACD,OAHY;AAIbC,2BAAqB,6BAASC,IAAT,EAAe;AAElC,eAAOA,KAAKC,kBAAZ,EAAgC;AAC9BD,iBAAOA,KAAKC,kBAAZ;AACD;AACD,YAAID,IAAJ,EAAU;AACR,iBAAO5B,yBAAyB2B,mBAAzB,CAA6CC,IAA7C,CAAP;AACD,SAFD,MAEO;AACL,iBAAO,IAAP;AACD;AACF;AAdY,KADqB;AAiBpCE,WAAO3B,gBAjB6B;AAkBpC4B,gBAAY9B,QAAQ,iBAAR;AAlBwB,GAAtC;AAoBD;;AAED+B,OAAOC,OAAP,GAAiBnB,WAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactNativeStack\n * @flow\n */\n'use strict';\n\nvar ReactNativeComponentTree = require('ReactNativeComponentTree');\nvar ReactNativeInjection = require('ReactNativeInjection');\nvar ReactNativeMount = require('ReactNativeMount');\nvar ReactNativeStackInjection = require('ReactNativeStackInjection');\nvar ReactUpdates = require('ReactUpdates');\n\nvar findNodeHandle = require('findNodeHandle');\nvar takeSnapshot = require('takeSnapshot');\n\nReactNativeInjection.inject();\nReactNativeStackInjection.inject();\n\nvar render = function(\n  element: ReactElement<any>,\n  mountInto: number,\n  callback?: ?() => void,\n): ?ReactComponent<any, any, any> {\n  return ReactNativeMount.renderComponent(element, mountInto, callback);\n};\n\nvar ReactNative = {\n  hasReactNativeInitialized: false,\n\n  // External users of findNodeHandle() expect the host tag number return type.\n  // The injected findNodeHandle() strategy returns the instance wrapper though.\n  // See NativeMethodsMixin#setNativeProps for more info on why this is done.\n  findNodeHandle(componentOrHandle: any): ?number {\n    const nodeHandle = findNodeHandle(componentOrHandle);\n    if (nodeHandle == null || typeof nodeHandle === 'number') {\n      return nodeHandle;\n    }\n    return nodeHandle.getHostNode();\n  },\n\n  render: render,\n\n  takeSnapshot,\n\n  unmountComponentAtNode: ReactNativeMount.unmountComponentAtNode,\n\n  /* eslint-disable camelcase */\n  unstable_batchedUpdates: ReactUpdates.batchedUpdates,\n  /* eslint-enable camelcase */\n\n  unmountComponentAtNodeAndRemoveContainer: ReactNativeMount.unmountComponentAtNodeAndRemoveContainer,\n};\n\n// Inject the runtime into a devtools global hook regardless of browser.\n// Allows for debugging when the hook is injected on the page.\n/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__ */\nif (\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function'\n) {\n  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({\n    ComponentTree: {\n      getClosestInstanceFromNode: function(node) {\n        return ReactNativeComponentTree.getClosestInstanceFromNode(node);\n      },\n      getNodeFromInstance: function(inst) {\n        // inst is an internal instance (but could be a composite)\n        while (inst._renderedComponent) {\n          inst = inst._renderedComponent;\n        }\n        if (inst) {\n          return ReactNativeComponentTree.getNodeFromInstance(inst);\n        } else {\n          return null;\n        }\n      },\n    },\n    Mount: ReactNativeMount,\n    Reconciler: require('ReactReconciler'),\n  });\n}\n\nmodule.exports = ReactNative;\n"]}]