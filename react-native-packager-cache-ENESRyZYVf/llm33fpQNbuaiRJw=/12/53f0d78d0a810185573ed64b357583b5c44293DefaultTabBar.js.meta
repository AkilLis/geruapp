["9353d4e0a07012d1f8ca2f1cf416296e994a1d44","1dab41314e68b903e2f75ae347ee9ea0b7b7e3d3",["react","react-native","./Button"],[20,72,337],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native-scrollable-tab-view/DefaultTabBar.js"],"names":["React","require","ReactNative","ViewPropTypes","StyleSheet","Text","View","Animated","Button","DefaultTabBar","createClass","propTypes","goToPage","PropTypes","func","activeTab","number","tabs","array","backgroundColor","string","activeTextColor","inactiveTextColor","textStyle","style","tabStyle","renderTab","underlineStyle","getDefaultProps","renderTabOption","name","page","isTabActive","onPressHandler","props","textColor","fontWeight","flex","styles","tab","color","render","containerWidth","numberOfTabs","length","tabUnderlineStyle","position","width","height","bottom","translateX","scrollValue","interpolate","inputRange","outputRange","map","transform","create","alignItems","justifyContent","paddingBottom","flexDirection","borderWidth","borderTopWidth","borderLeftWidth","borderRightWidth","borderColor","module","exports"],"mappings":"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","sourcesContent":["const React = require('react');\nconst { ViewPropTypes } = ReactNative = require('react-native');\nconst {\n  StyleSheet,\n  Text,\n  View,\n  Animated,\n} = ReactNative;\nconst Button = require('./Button');\n\nconst DefaultTabBar = React.createClass({\n  propTypes: {\n    goToPage: React.PropTypes.func,\n    activeTab: React.PropTypes.number,\n    tabs: React.PropTypes.array,\n    backgroundColor: React.PropTypes.string,\n    activeTextColor: React.PropTypes.string,\n    inactiveTextColor: React.PropTypes.string,\n    textStyle: Text.propTypes.style,\n    tabStyle: ViewPropTypes.style,\n    renderTab: React.PropTypes.func,\n    underlineStyle: ViewPropTypes.style,\n  },\n\n  getDefaultProps() {\n    return {\n      activeTextColor: 'navy',\n      inactiveTextColor: 'black',\n      backgroundColor: null,\n    };\n  },\n\n  renderTabOption(name, page) {\n  },\n\n  renderTab(name, page, isTabActive, onPressHandler) {\n    const { activeTextColor, inactiveTextColor, textStyle, } = this.props;\n    const textColor = isTabActive ? activeTextColor : inactiveTextColor;\n    const fontWeight = isTabActive ? 'bold' : 'normal';\n\n    return <Button\n      style={{flex: 1, }}\n      key={name}\n      accessible={true}\n      accessibilityLabel={name}\n      accessibilityTraits='button'\n      onPress={() => onPressHandler(page)}\n    >\n      <View style={[styles.tab, this.props.tabStyle, ]}>\n        <Text style={[{color: textColor, fontWeight, }, textStyle, ]}>\n          {name}\n        </Text>\n      </View>\n    </Button>;\n  },\n\n  render() {\n    const containerWidth = this.props.containerWidth;\n    const numberOfTabs = this.props.tabs.length;\n    const tabUnderlineStyle = {\n      position: 'absolute',\n      width: containerWidth / numberOfTabs,\n      height: 4,\n      backgroundColor: 'navy',\n      bottom: 0,\n    };\n\n    const translateX = this.props.scrollValue.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0,  containerWidth / numberOfTabs],\n    });\n    return (\n      <View style={[styles.tabs, {backgroundColor: this.props.backgroundColor, }, this.props.style, ]}>\n        {this.props.tabs.map((name, page) => {\n          const isTabActive = this.props.activeTab === page;\n          const renderTab = this.props.renderTab || this.renderTab;\n          return renderTab(name, page, isTabActive, this.props.goToPage);\n        })}\n        <Animated.View\n          style={[\n            tabUnderlineStyle,\n            {\n              transform: [\n                { translateX },\n              ]\n            },\n            this.props.underlineStyle,\n          ]}\n        />\n      </View>\n    );\n  },\n});\n\nconst styles = StyleSheet.create({\n  tab: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingBottom: 10,\n  },\n  tabs: {\n    height: 50,\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    borderWidth: 1,\n    borderTopWidth: 0,\n    borderLeftWidth: 0,\n    borderRightWidth: 0,\n    borderColor: '#ccc',\n  },\n});\n\nmodule.exports = DefaultTabBar;\n"]}]