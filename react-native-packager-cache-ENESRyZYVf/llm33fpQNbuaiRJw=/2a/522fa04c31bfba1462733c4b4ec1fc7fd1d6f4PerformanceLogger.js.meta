["dee07857e1d5dce32aeb69f03259f08350cfe544","0c48235b17ef1361a8c3ec1a9cd792d6f422d453",["BatchedBridge","Systrace","fbjs/lib/performanceNow"],[44,85,159],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native/Libraries/Utilities/PerformanceLogger.js"],"names":["BatchedBridge","require","Systrace","performanceNow","global","nativePerformanceNow","timespans","extras","cookies","PRINT_TO_CONSOLE","PerformanceLogger","addTimespan","key","lengthInMs","description","__DEV__","console","log","totalTime","startTimespan","startTime","beginAsyncEvent","stopTimespan","timespan","endTime","endAsyncEvent","clear","clearCompleted","clearExceptTimespans","keys","Object","reduce","previous","indexOf","currentTimestamp","getTimespans","hasTimespan","logTimespans","addTimespans","newTimespans","labels","i","l","length","label","setExtra","value","getExtras","registerCallableModule","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule PerformanceLogger\n * @flow\n */\n'use strict';\n\nconst BatchedBridge = require('BatchedBridge');\nconst Systrace = require('Systrace');\n\nconst performanceNow = global.nativePerformanceNow || require('fbjs/lib/performanceNow');\n\ntype Timespan = {\n  description?: string,\n  totalTime?: number,\n  startTime?: number,\n  endTime?: number,\n};\n\nlet timespans: {[key:string]: Timespan} = {};\nlet extras: {[key:string]: any} = {};\nconst cookies: {[key:string]: number} = {};\n\nconst PRINT_TO_CONSOLE = false;\n\n/**\n * This is meant to collect and log performance data in production, which means\n * it needs to have minimal overhead.\n */\nconst PerformanceLogger = {\n  addTimespan(key: string, lengthInMs: number, description?: string) {\n    if (timespans[key]) {\n      if (__DEV__) {\n        console.log(\n          'PerformanceLogger: Attempting to add a timespan that already exists ',\n          key\n        );\n      }\n      return;\n    }\n\n    timespans[key] = {\n      description: description,\n      totalTime: lengthInMs,\n    };\n  },\n\n  startTimespan(key: string, description?: string) {\n    if (timespans[key]) {\n      if (__DEV__) {\n        console.log(\n          'PerformanceLogger: Attempting to start a timespan that already exists ',\n          key,\n        );\n      }\n      return;\n    }\n\n    timespans[key] = {\n      description: description,\n      startTime: performanceNow(),\n    };\n    cookies[key] = Systrace.beginAsyncEvent(key);\n    if (__DEV__ && PRINT_TO_CONSOLE) {\n      console.log('PerformanceLogger.js', 'start: ' + key);\n    }\n  },\n\n  stopTimespan(key: string) {\n    const timespan = timespans[key];\n    if (!timespan || !timespan.startTime) {\n      if (__DEV__) {\n        console.log(\n          'PerformanceLogger: Attempting to end a timespan that has not started ',\n          key,\n        );\n      }\n      return;\n    }\n    if (timespan.endTime) {\n      if (__DEV__) {\n        console.log(\n          'PerformanceLogger: Attempting to end a timespan that has already ended ',\n          key\n        );\n      }\n      return;\n    }\n\n    timespan.endTime = performanceNow();\n    timespan.totalTime = timespan.endTime - (timespan.startTime || 0);\n    if (__DEV__ && PRINT_TO_CONSOLE) {\n      console.log('PerformanceLogger.js', 'end: ' + key);\n    }\n\n    Systrace.endAsyncEvent(key, cookies[key]);\n    delete cookies[key];\n  },\n\n  clear() {\n    timespans = {};\n    extras = {};\n  },\n\n  clearCompleted() {\n    for (const key in timespans) {\n      if (timespans[key].totalTime) {\n        delete timespans[key];\n      }\n    }\n    extras = {};\n  },\n\n  clearExceptTimespans(keys: Array<string>) {\n    timespans = Object.keys(timespans).reduce(function(previous, key) {\n      if (keys.indexOf(key) !== -1) {\n        previous[key] = timespans[key];\n      }\n      return previous;\n    }, {});\n    extras = {};\n  },\n\n  currentTimestamp() {\n    return performanceNow();\n  },\n\n  getTimespans() {\n    return timespans;\n  },\n\n  hasTimespan(key: string) {\n    return !!timespans[key];\n  },\n\n  logTimespans() {\n    for (const key in timespans) {\n      if (timespans[key].totalTime) {\n        console.log(key + ': ' + timespans[key].totalTime + 'ms');\n      }\n    }\n  },\n\n  addTimespans(newTimespans: Array<number>, labels: Array<string>) {\n    for (let i = 0, l = newTimespans.length; i < l; i += 2) {\n      const label = labels[i / 2];\n      PerformanceLogger.addTimespan(\n        label,\n        (newTimespans[i + 1] - newTimespans[i]),\n        label\n      );\n    }\n  },\n\n  setExtra(key: string, value: any) {\n    if (extras[key]) {\n      if (__DEV__) {\n        console.log(\n          'PerformanceLogger: Attempting to set an extra that already exists ',\n          key\n        );\n      }\n      return;\n    }\n    extras[key] = value;\n  },\n\n  getExtras() {\n    return extras;\n  }\n};\n\nBatchedBridge.registerCallableModule(\n  'PerformanceLogger',\n  PerformanceLogger\n);\n\nmodule.exports = PerformanceLogger;\n"]}]