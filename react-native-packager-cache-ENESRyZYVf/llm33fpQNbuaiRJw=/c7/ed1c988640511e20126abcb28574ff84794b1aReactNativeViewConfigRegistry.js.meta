["53da3b4cbc5dccbf3b021572c7bb95ab35b1a252","5f62da22097fb812e87326b6a719f0aab15dc3dc",["fbjs/lib/invariant"],[41],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native/Libraries/Renderer/src/renderers/native/ReactNativeViewConfigRegistry.js"],"names":["invariant","require","viewConfigs","Map","prefix","ReactNativeViewConfigRegistry","register","viewConfig","name","uiViewClassName","has","secretName","set","get","config","module","exports"],"mappings":";;AAYA;;AAEA,IAAMA,YAAYC,QAAQ,oBAAR,CAAlB;;AAQA,IAAMC,cAAc,IAAIC,GAAJ,EAApB;;AAEA,IAAMC,SAAS,YAAf;;AAEA,IAAMC,gCAAgC;AACpCC,UADoC,oBAC3BC,UAD2B,EACqB;AACvD,QAAMC,OAAOD,WAAWE,eAAxB;AACAT,cACE,CAACE,YAAYQ,GAAZ,CAAgBF,IAAhB,CADH,EAEE,mDAFF,EAGEA,IAHF;AAKA,QAAMG,aAAaP,SAASI,IAA5B;AACAN,gBAAYU,GAAZ,CAAgBD,UAAhB,EAA4BJ,UAA5B;AACA,WAAOI,UAAP;AACD,GAXmC;AAYpCE,KAZoC,eAYhCF,UAZgC,EAYZ;AACtB,QAAMG,SAASZ,YAAYW,GAAZ,CAAgBF,UAAhB,CAAf;AACAX,cAAUc,MAAV,EAAkB,mCAAlB,EAAuDH,UAAvD;AACA,WAAOG,MAAP;AACD;AAhBmC,CAAtC;;AAmBAC,OAAOC,OAAP,GAAiBX,6BAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactNativeViewConfigRegistry\n * @flow\n */\n\n'use strict';\n\nconst invariant = require('fbjs/lib/invariant');\n\nexport type ReactNativeBaseComponentViewConfig = {\n  validAttributes: Object,\n  uiViewClassName: string,\n  propTypes?: Object,\n};\n\nconst viewConfigs = new Map();\n\nconst prefix = 'topsecret-';\n\nconst ReactNativeViewConfigRegistry = {\n  register(viewConfig: ReactNativeBaseComponentViewConfig) {\n    const name = viewConfig.uiViewClassName;\n    invariant(\n      !viewConfigs.has(name),\n      'Tried to register two views with the same name %s',\n      name,\n    );\n    const secretName = prefix + name;\n    viewConfigs.set(secretName, viewConfig);\n    return secretName;\n  },\n  get(secretName: string) {\n    const config = viewConfigs.get(secretName);\n    invariant(config, 'View config not found for name %s', secretName);\n    return config;\n  },\n};\n\nmodule.exports = ReactNativeViewConfigRegistry;\n"]}]