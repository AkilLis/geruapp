["40396408e02eb91734f4b69e564023ec402cd841","ea59f5e04716876564b145c336898d99d86b9f89",["react","../authConstants","tcomb-form-native"],[37,136,174],{"version":3,"sources":["/var/www/geruapp/src/auth/components/LoginForm.js"],"names":["t","require","Form","form","LoginForm","createClass","propTypes","formType","string","object","value","onChange","func","render","props","options","fields","username","label","maxLength","editable","isFetching","hasError","usernameHasError","error","usernameErrorMsg","email","keyboardType","emailHasError","emailErrorMsg","secureTextEntry","showPassword","password","passwordHasError","passwordErrorMsg","passwordAgain","passwordAgainHasError","passwordAgainErrorMsg","loginForm","struct","String","placeholder","autoCapitalize","module","exports"],"mappings":"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","sourcesContent":["/**\n * # LoginForm.js\n *\n * This class utilizes the ```tcomb-form-native``` library and just\n * sets up the options required for the 3 states of Login, namely\n * Login, Register or Reset Password\n *\n */\n'use strict'\n/**\n * ## Import\n *\n * React\n */\nimport React, {PropTypes} from 'react'\n\n/**\n * States of login display\n */\nimport {\n  REGISTER,\n  LOGIN,\n  FORGOT_PASSWORD\n} from '../authConstants'\n\n/**\n *  The fantastic little form library\n */\nconst t = require('tcomb-form-native')\nlet Form = t.form.Form\n\nvar LoginForm = React.createClass({\n  /**\n   * ## LoginForm class\n   *\n   * * form: the properties to set into the UI form\n   * * value: the values to set in the input fields\n   * * onChange: function to call when user enters text\n   */\n  propTypes: {\n    formType: PropTypes.string,\n    form: PropTypes.object,\n    value: PropTypes.object,\n    onChange: PropTypes.func\n  },\n\n  /**\n   * ## render\n   *\n   * setup all the fields using the props and default messages\n   *\n   */\n  render () {\n    let formType = this.props.formType\n\n    let options = {\n      fields: {\n      }\n    }\n\n    let username = {\n      label: 'Хэрэглэгчийн нэр',\n      maxLength: 12,\n      editable: !this.props.form.isFetching,\n      hasError: this.props.form.fields.usernameHasError,\n      error: this.props.form.fields.usernameErrorMsg\n    }\n\n    let email = {\n      label: 'Имэйл',\n      keyboardType: 'email-address',\n      editable: !this.props.form.isFetching,\n      hasError: this.props.form.fields.emailHasError,\n      error: this.props.form.fields.emailErrorMsg\n    }\n\n    let secureTextEntry = !this.props.form.fields.showPassword\n\n    let password = {\n      label: 'Нууц үг',\n      maxLength: 12,\n      secureTextEntry: secureTextEntry,\n      editable: !this.props.form.isFetching,\n      hasError: this.props.form.fields.passwordHasError,\n      error: this.props.form.fields.passwordErrorMsg\n    }\n\n    let passwordAgain = {\n      label: 'Нууц үгээ давтан оруулах',\n      secureTextEntry: secureTextEntry,\n      maxLength: 12,\n      editable: !this.props.form.isFetching,\n      hasError: this.props.form.fields.passwordAgainHasError,\n      error: this.props.form.fields.passwordAgainErrorMsg\n    }\n\n    let loginForm\n    switch (formType) {\n      /**\n       * ### Registration\n       * The registration form has 4 fields\n       */\n      case (REGISTER):\n        loginForm = t.struct({\n          username: t.String,\n          email: t.String,\n          password: t.String,\n          passwordAgain: t.String\n        })\n        options.fields['username'] = username\n        options.fields['username'].placeholder = 'Хэрэглэгчийн нэр'\n        options.fields['username'].autoCapitalize = 'none'\n        options.fields['email'] = email\n        options.fields['email'].placeholder = 'Имэйл'\n        options.fields['email'].autoCapitalize = 'none'\n        options.fields['password'] = password\n        options.fields['password'].placeholder = 'Нууц үг'\n        options.fields['passwordAgain'] = passwordAgain\n        options.fields['passwordAgain'].placeholder = 'Нууц үгээ давтан оруулах'\n        break\n\n      /**\n       * ### Login\n       * The login form has only 2 fields\n       */\n      case (LOGIN):\n        loginForm = t.struct({\n          username: t.String,\n          password: t.String\n        })\n        options.fields['username'] = username\n        options.fields['username'].placeholder = 'Хэрэглэгчийн нэр'\n        options.fields['username'].autoCapitalize = 'none'\n        options.fields['password'] = password\n        options.fields['password'].placeholder = 'Нууц үг'\n        break\n\n      /**\n       * ### Reset password\n       * The password reset form has only 1 field\n       */\n      case (FORGOT_PASSWORD):\n        loginForm = t.struct({\n          email: t.String\n        })\n        options.fields['email'] = email\n        options.fields['email'].autoCapitalize = 'none'\n        options.fields['email'].placeholder = 'Имэйл'\n        break\n    } // switch\n\n    /**\n     * ### Return\n     * returns the Form component with the correct structures\n     */\n    return (\n      <Form ref='form'\n        type={loginForm}\n        options={options}\n        value={this.props.value}\n        onChange={this.props.onChange}\n      />\n\n    )\n  }\n})\n\nmodule.exports = LoginForm\n"]}]