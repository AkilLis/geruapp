["4f75fb78d83a615f20e00beb988da184132fb2d5","2b3dee2a654fc3e612d7bf7885fbce5c13a9203d",["ExceptionsManager"],[49],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native/Libraries/Renderer/src/renderers/native/ReactNativeFiberErrorDialog.js"],"names":["ExceptionsManager","require","ReactNativeFiberErrorDialog","capturedError","componentStack","error","errorMessage","errorStack","errorType","message","name","summary","stack","constructor","Error","newError","handleException","module","exports","showDialog"],"mappings":";;AAYA;;AAEA,IAAMA,oBAAoBC,QAAQ,mBAAR,CAA1B;;AAQA,SAASC,2BAAT,CAAqCC,aAArC,EAA4E;AAAA,MACnEC,cADmE,GAC1CD,aAD0C,CACnEC,cADmE;AAAA,MACnDC,KADmD,GAC1CF,aAD0C,CACnDE,KADmD;;;AAG1E,MAAIC,qBAAJ;AACA,MAAIC,mBAAJ;AACA,MAAIC,kBAAJ;;AAGA,MAAIH,SAAS,OAAOA,KAAP,KAAiB,QAA9B,EAAwC;AAAA,QAC/BI,OAD+B,GACdJ,KADc,CAC/BI,OAD+B;AAAA,QACtBC,IADsB,GACdL,KADc,CACtBK,IADsB;;;AAGtC,QAAMC,UAAUF,UAAaC,IAAb,UAAsBD,OAAtB,GAAkCC,IAAlD;;AAEAJ,mBAAkBK,OAAlB,qCAAyDP,cAAzD;AACAG,iBAAaF,MAAMO,KAAnB;AACAJ,gBAAYH,MAAMQ,WAAlB;AACD,GARD,MAQO;AACLP,6CAAuCF,cAAvC;AACAG,iBAAa,EAAb;AACAC,gBAAYM,KAAZ;AACD;;AAED,MAAMC,WAAW,IAAIP,SAAJ,CAAcF,YAAd,CAAjB;AACAS,WAASH,KAAT,GAAiBL,UAAjB;;AAEAP,oBAAkBgB,eAAlB,CAAkCD,QAAlC,EAA4C,KAA5C;;AAMA,SAAO,KAAP;AACD;;AAEDE,OAAOC,OAAP,CAAeC,UAAf,GAA4BjB,2BAA5B","sourcesContent":["/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactNativeFiberErrorDialog\n * @flow\n */\n\n'use strict';\n\nconst ExceptionsManager = require('ExceptionsManager');\n\nimport type {CapturedError} from 'ReactFiberScheduler';\n\n/**\n * Intercept lifecycle errors and ensure they are shown with the correct stack\n * trace within the native redbox component.\n */\nfunction ReactNativeFiberErrorDialog(capturedError: CapturedError): boolean {\n  const {componentStack, error} = capturedError;\n\n  let errorMessage: string;\n  let errorStack: string;\n  let errorType: Class<Error>;\n\n  // Typically Errors are thrown but eg strings or null can be thrown as well.\n  if (error && typeof error === 'object') {\n    const {message, name} = error;\n\n    const summary = message ? `${name}: ${message}` : name;\n\n    errorMessage = `${summary}\\n\\nThis error is located at:${componentStack}`;\n    errorStack = error.stack;\n    errorType = error.constructor;\n  } else {\n    errorMessage = `Unspecified error at:${componentStack}`;\n    errorStack = '';\n    errorType = Error;\n  }\n\n  const newError = new errorType(errorMessage);\n  newError.stack = errorStack;\n\n  ExceptionsManager.handleException(newError, false);\n\n  // Return false here to prevent ReactFiberErrorLogger default behavior of\n  // logging error details to console.error. Calls to console.error are\n  // automatically routed to the native redbox controller, which we've already\n  // done above by calling ExceptionsManager.\n  return false;\n}\n\nmodule.exports.showDialog = ReactNativeFiberErrorDialog;\n"]}]