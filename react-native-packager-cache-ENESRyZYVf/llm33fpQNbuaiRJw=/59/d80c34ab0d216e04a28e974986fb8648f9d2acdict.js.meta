["f3e0896c5a6d499cb82ff56af609f7c2586e7309","74d460bb2a91d62fc90342b9235171bb8e15832d",["./assert","./isTypeName","./isFunction","./getTypeName","./isIdentity","./isObject","./create","./is"],[21,59,101,144,187,227,263,293],{"version":3,"sources":["/var/www/geruapp/node_modules/tcomb/lib/dict.js"],"names":["assert","require","isTypeName","isFunction","getTypeName","isIdentity","isObject","create","is","getDefaultName","domain","codomain","dict","name","process","env","NODE_ENV","stringify","displayName","domainNameCache","codomainNameCache","identity","Dict","value","path","join","idempotent","ret","k","hasOwnProperty","concat","actual","instance","Object","freeze","meta","kind","x","update","patch","module","exports"],"mappings":"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","sourcesContent":["var assert = require('./assert');\nvar isTypeName = require('./isTypeName');\nvar isFunction = require('./isFunction');\nvar getTypeName = require('./getTypeName');\nvar isIdentity = require('./isIdentity');\nvar isObject = require('./isObject');\nvar create = require('./create');\nvar is = require('./is');\n\nfunction getDefaultName(domain, codomain) {\n  return '{[key: ' + getTypeName(domain) + ']: ' + getTypeName(codomain) + '}';\n}\n\nfunction dict(domain, codomain, name) {\n\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isFunction(domain), function () { return 'Invalid argument domain ' + assert.stringify(domain) + ' supplied to dict(domain, codomain, [name]) combinator (expected a type)'; });\n    assert(isFunction(codomain), function () { return 'Invalid argument codomain ' + assert.stringify(codomain) + ' supplied to dict(domain, codomain, [name]) combinator (expected a type)'; });\n    assert(isTypeName(name), function () { return 'Invalid argument name ' + assert.stringify(name) + ' supplied to dict(domain, codomain, [name]) combinator (expected a string)'; });\n  }\n\n  var displayName = name || getDefaultName(domain, codomain);\n  var domainNameCache = getTypeName(domain);\n  var codomainNameCache = getTypeName(codomain);\n  var identity = isIdentity(domain) && isIdentity(codomain);\n\n  function Dict(value, path) {\n\n    if (process.env.NODE_ENV === 'production') {\n      if (identity) {\n        return value; // just trust the input if elements must not be hydrated\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      path = path || [displayName];\n      assert(isObject(value), function () { return 'Invalid value ' + assert.stringify(value) + ' supplied to ' + path.join('/'); });\n    }\n\n    var idempotent = true; // will remain true if I can reutilise the input\n    var ret = {}; // make a temporary copy, will be discarded if idempotent remains true\n    for (var k in value) {\n      if (value.hasOwnProperty(k)) {\n        k = create(domain, k, ( process.env.NODE_ENV !== 'production' ? path.concat(domainNameCache) : null ));\n        var actual = value[k];\n        var instance = create(codomain, actual, ( process.env.NODE_ENV !== 'production' ? path.concat(k + ': ' + codomainNameCache) : null ));\n        idempotent = idempotent && ( actual === instance );\n        ret[k] = instance;\n      }\n    }\n\n    if (idempotent) { // implements idempotency\n      ret = value;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      Object.freeze(ret);\n    }\n\n    return ret;\n  }\n\n  Dict.meta = {\n    kind: 'dict',\n    domain: domain,\n    codomain: codomain,\n    name: name,\n    identity: identity\n  };\n\n  Dict.displayName = displayName;\n\n  Dict.is = function (x) {\n    if (!isObject(x)) {\n      return false;\n    }\n    for (var k in x) {\n      if (x.hasOwnProperty(k)) {\n        if (!is(k, domain) || !is(x[k], codomain)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n\n  Dict.update = function (instance, patch) {\n    return Dict(assert.update(instance, patch));\n  };\n\n  return Dict;\n}\n\ndict.getDefaultName = getDefaultName;\nmodule.exports = dict;\n"]}]