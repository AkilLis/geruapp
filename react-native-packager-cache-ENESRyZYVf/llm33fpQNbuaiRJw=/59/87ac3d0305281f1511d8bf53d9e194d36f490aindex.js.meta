["508e64972dc600ea3ee2fb3bf8b313f496d9dda5","b011f614d79579ecf01e20233cb41f4c133083a4",["react","react-native","prop-types","./NavbarButton","./styles"],[87,184,227,338,453],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native-navbar/index.js"],"names":["ButtonShape","title","string","isRequired","style","propTypes","handler","func","disabled","bool","TitleShape","tintColor","StatusBarShape","oneOf","hidden","hideAnimation","showAnimation","getButtonElement","data","navBarButtonContainer","props","accessible","accessibilityLabel","getTitleElement","customTitle","colorStyle","color","navBarTitleContainer","navBarTitleText","NavigationBar","customizeStatusBar","statusBar","OS","setBarStyle","animation","showHideTransition","containerStyle","leftButton","rightButton","customTintColor","backgroundColor","customStatusBarTintColor","navBarContainer","navBar","marginLeft","marginRight","shape","oneOfType","element","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {\n  StatusBar,\n  Text,\n  View,\n  Platform,\n} from 'react-native';\nimport PropTypes from 'prop-types'\n\nimport NavbarButton from './NavbarButton';\nimport styles from './styles';\n\nconst ButtonShape = {\n  title: PropTypes.string.isRequired,\n  style: View.propTypes.style,\n  handler: PropTypes.func,\n  disabled: PropTypes.bool,\n};\n\nconst TitleShape = {\n  title: PropTypes.string.isRequired,\n  tintColor: PropTypes.string,\n};\n\nconst StatusBarShape = {\n  style: PropTypes.oneOf(['light-content', 'default']),\n  hidden: PropTypes.bool,\n  tintColor: PropTypes.string,\n  hideAnimation: PropTypes.oneOf(['fade', 'slide', 'none']),\n  showAnimation: PropTypes.oneOf(['fade', 'slide', 'none']),\n};\n\nfunction getButtonElement(data, style) {\n  return (\n    <View style={styles.navBarButtonContainer}>\n      {(!data || data.props) ? data : (\n        <NavbarButton\n          title={data.title}\n          style={[data.style, style]}\n          tintColor={data.tintColor}\n          handler={data.handler}\n          accessible={data.accessible}\n          accessibilityLabel={data.accessibilityLabel}\n        />\n      )}\n    </View>\n  );\n}\n\nfunction getTitleElement(data) {\n  if (!data || data.props) {\n    return <View style={styles.customTitle}>{data}</View>;\n  }\n\n  const colorStyle = data.tintColor ? { color: data.tintColor } : null;\n\n  return (\n    <View style={styles.navBarTitleContainer}>\n      <Text style={[styles.navBarTitleText, data.style, colorStyle]}>\n        {data.title}\n      </Text>\n    </View>\n  );\n}\n\nexport default class NavigationBar extends Component {\n  static propTypes = {\n    style: View.propTypes.style,\n    tintColor: PropTypes.string,\n    statusBar: PropTypes.shape(StatusBarShape),\n    leftButton: PropTypes.oneOfType([\n      PropTypes.shape(ButtonShape),\n      PropTypes.element,\n      PropTypes.oneOf([null]),\n    ]),\n    rightButton: PropTypes.oneOfType([\n      PropTypes.shape(ButtonShape),\n      PropTypes.element,\n      PropTypes.oneOf([null]),\n    ]),\n    title: PropTypes.oneOfType([\n      PropTypes.shape(TitleShape),\n      PropTypes.element,\n      PropTypes.oneOf([null]),\n    ]),\n    containerStyle: View.propTypes.style,\n  };\n\n  static defaultProps = {\n    style: {},\n    tintColor: '',\n    leftButton: null,\n    rightButton: null,\n    title: null,\n    statusBar: {\n      style: 'default',\n      hidden: false,\n      hideAnimation: 'slide',\n      showAnimation: 'slide',\n    },\n    containerStyle: {},\n  };\n\n  componentDidMount() {\n    this.customizeStatusBar();\n  }\n\n  componentWillReceiveProps() {\n    this.customizeStatusBar();\n  }\n\n  customizeStatusBar() {\n    const { statusBar } = this.props;\n    if (Platform.OS === 'ios') {\n      if (statusBar.style) {\n        StatusBar.setBarStyle(statusBar.style);\n      }\n\n      const animation = statusBar.hidden ?\n        statusBar.hideAnimation : statusBar.showAnimation;\n\n      StatusBar.showHideTransition = animation;\n      StatusBar.hidden = statusBar.hidden;\n    }\n  }\n\n  render() {\n    const {\n      containerStyle,\n      tintColor,\n      title,\n      leftButton,\n      rightButton,\n      style,\n    } = this.props;\n    const customTintColor = tintColor ? { backgroundColor: tintColor } : null;\n\n    const customStatusBarTintColor = this.props.statusBar.tintColor ?\n      { backgroundColor: this.props.statusBar.tintColor } : null;\n\n    let statusBar = null;\n\n    if (Platform.OS === 'ios') {\n      statusBar = !this.props.statusBar.hidden ?\n        <View style={[styles.statusBar, customStatusBarTintColor]} /> : null;\n    }\n\n    return (\n      <View style={[styles.navBarContainer, containerStyle, customTintColor]}>\n        {statusBar}\n        <View style={[styles.navBar, style]}>\n          {getTitleElement(title)}\n          {getButtonElement(leftButton, { marginLeft: 8 })}\n          {getButtonElement(rightButton, { marginRight: 8 })}\n        </View>\n      </View>\n    );\n  }\n}\n"]}]