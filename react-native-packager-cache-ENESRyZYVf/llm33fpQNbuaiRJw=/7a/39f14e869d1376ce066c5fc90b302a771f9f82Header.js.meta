["a6afb9551a2d80c8a779464ef3fdf7538977a876","b347681f2cb2360e266f093021e41ead1fcade8c",["react","react-native","../styles/variables","react-native-vector-icons","../brand/selection.json"],[37,134,177,307,363],{"version":3,"sources":["/var/www/geruapp/src/components/Header.js"],"names":["IconSet","styles","create","container","flexDirection","flex","marginTop","header","justifyContent","alignItems","backgroundColor","paddingVertical","mark","height","width","Header","createClass","getInitialState","text","isDisabled","propTypes","isFetching","bool","showState","currentState","object","onGetState","func","onSetState","_onPressMark","props","_onChangeText","setState","_updateStateButtonPress","state","render","displayText","JSON","stringify","transform","rotate","translateY","translateX","BRAND_COLOR","I18n","t","borderColor","borderWidth","module","exports"],"mappings":";AAkBA;;AAOA;;;;AACA;;AAWA;;;;AACA;;AACA;;;;AACA,IAAMA,UAAU,0EAAhB;;AAEA,IAAIC,SAAS,wBAAWC,MAAX,CAAkB;AAC7BC,aAAW;AACTC,mBAAe,QADN;AAETC,UAAM,CAFG;AAGTC,eAAW;AAHF,GADkB;AAM7BC,UAAQ;AACND,eAAW,EADL;AAENE,oBAAgB,QAFV;AAGNC,gBAAY,QAHN;AAINC,qBAAiB,aAJX;AAKNC,qBAAiB;AALX,GANqB;AAa7BC,QAAM;AACJC,YAAQ,GADJ;AAEJC,WAAO;AAFH;;AAbuB,CAAlB,CAAb;;AAoBA,IAAIC,SAAS,gBAAMC,WAAN,CAAkB;AAAA;AAK7BC,iBAL6B,6BAKV;AACjB,WAAO;AACLC,YAAM,EADD;AAELC,kBAAY;AAFP,KAAP;AAID,GAV4B;;AAmB7BC,aAAW;AACTC,gBAAY,iBAAUC,IADb;AAETC,eAAW,iBAAUD,IAFZ;AAGTE,kBAAc,iBAAUC,MAHf;AAITC,gBAAY,iBAAUC,IAJb;AAKTC,gBAAY,iBAAUD;AALb,GAnBkB;AA8B7BE,cA9B6B,0BA8Bb;AACd,SAAKC,KAAL,CAAWJ,UAAX,CAAsB,CAAC,KAAKI,KAAL,CAAWP,SAAlC;AACD,GAhC4B;AAqC7BQ,eArC6B,yBAqCdb,IArCc,EAqCR;AACnB,SAAKc,QAAL,CAAc;AACZd,gBADY;AAEZC,kBAAY;AAFA,KAAd;AAID,GA1C4B;AA+C7Bc,yBA/C6B,qCA+CF;AACzB,SAAKH,KAAL,CAAWF,UAAX,CAAsB,KAAKM,KAAL,CAAWhB,IAAjC;AACD,GAjD4B;AAgE7BiB,QAhE6B,oBAgEnB;AAAA;;AACR,QAAIC,oBAAJ;AACA,QAAI,KAAKN,KAAL,CAAWP,SAAf,EAA0B;AACxBa,oBAAcC,KAAKC,SAAL,CAAe,KAAKR,KAAL,CAAWN,YAA1B,CAAd;AACD;;AAED,WACE;AAAA;AAAA;AACE;AAAA;AAAA,UAAM,OAAOvB,OAAOM,MAApB;AACE,sCAAC,OAAD,IAAS,OAAM,wBAAf;AACW,gBAAM,GADjB;AAEW,gBAAK,WAFhB;AAGW,iBAAO;AACNgC,uBAAW,CAAC;AACVC,sBAAQ;AADE,aAAD,EAER;AACDC,0BAAY,CAAC;AADZ,aAFQ,EAIR;AACDC,0BAAY;AADX,aAJQ;AADL;AAHlB,UADF;AAcE;AAAA;AAAA;AACE,wCAAC,OAAD,IAAS,OAAO,oBAAUC,WAA1B;AACS,kBAAM,GADf;AAES,kBAAK;AAFd;AADF,SAdF;AAoBG,aAAKb,KAAL,CAAWT,UAAX,GACE,gEAAmB,eAAnB,EAA6B,MAAK,OAAlC,GADF,GAEE;AAtBL,OADF;AA2BG,WAAKS,KAAL,CAAWP,SAAX,GACE;AAAA;AAAA,UAAM,OAAOtB,OAAOE,SAApB;AACA;AAAA;AAAA;AAAOyC,eAAKC,CAAL,CAAO,sBAAP,CAAP;AAAA;AAAyCD,eAAKC,CAAL,CAAO,oBAAP,CAAzC;AAAA;AAAA,SADA;AAEA,gEAAW,OAAO,EAAChC,QAAQ,GAAT,EAAciC,aAAa,MAA3B,EAAmCC,aAAa,CAAhD,EAAlB;AACE,iBAAOX,WADT;AAEE,wBAFF;AAGE,yBAHF;AAIE,wBAAc,sBAAClB,IAAD;AAAA,mBAAU,MAAKa,aAAL,CAAmBb,IAAnB,CAAV;AAAA,WAJhB;AAKE,yBAAe,EALjB,GAFA;AAQA,2DAAM,OAAO;AACXZ,uBAAW;AADA,WAAb;AARA,OADF,GAeE;AA1CL,KADF;AA8CD;AApH4B,CAAlB,CAAb;;AAuHA0C,OAAOC,OAAP,GAAiBlC,MAAjB","sourcesContent":["/**\n * # Header.js\n *\n * This component initially displays a image. But when clicked, things\n * get interesting.\n *\n * On the initial display after being clicked, the\n * textinput will display the current ```state``` of the application.\n *\n * The button will be enabled and if clicked, whatever state is now\n * contained in the textinput will be processed and the application\n * will be restored to that state.\n *\n * By pasting in a previous state, the application will reset to that\n * state\n *\n * When the mark image is clicked, it is just toggled to display or hide.\n*/\n'use strict'\n\n/**\n * ## Imports\n *\n * React\n*/\nimport React, {PropTypes} from 'react'\nimport\n{\n  ActivityIndicator,\n  Image,\n  StyleSheet,\n  Text,\n  TextInput,\n  TouchableHighlight,\n  View\n} from 'react-native'\n\nimport variables, { layout, font } from '../styles/variables' \nimport { createIconSetFromIcoMoon } from 'react-native-vector-icons'\nimport brandLocationConfig from '../brand/selection.json'\nconst IconSet = createIconSetFromIcoMoon(brandLocationConfig)\n\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'column',\n    flex: 1,\n    marginTop: 10\n  },\n  header: {\n    marginTop: 20,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'transparent',\n    paddingVertical: 50, \n  },\n  mark: {\n    height: 100,\n    width: 100\n  }\n\n})\n\nvar Header = React.createClass({\n  /**\n   * ## Header.class\n   * set the initial state of having the button be disabled.\n   */\n  getInitialState () {\n    return {\n      text: '',\n      isDisabled: true\n    }\n  },\n  /**\n   * ### propTypes\n   * * isFetching: display the spinner if true\n   * * showState: should the JSON state, currentState, be displayed\n   * * currentState: the JSON state\n   * * onGetState: the action to call to get the current state\n   * * onSetState: the action to call to set the state\n   */\n  propTypes: {\n    isFetching: PropTypes.bool,\n    showState: PropTypes.bool,\n    currentState: PropTypes.object,\n    onGetState: PropTypes.func,\n    onSetState: PropTypes.func\n  },\n  /**\n   * ### _onPressMark\n   * Call the onGetState action passing the state prop\n   */\n  _onPressMark () {\n    this.props.onGetState(!this.props.showState)\n  },\n  /**\n   * ### _onChangeText\n   * when the textinput value changes, set the state for that component\n   */\n  _onChangeText (text) {\n    this.setState({\n      text,\n      isDisabled: false\n    })\n  },\n  /**\n   * ### _updateStateButtonPress\n   * When the button for the state is pressed, call ```onSetState```\n   */\n  _updateStateButtonPress () {\n    this.props.onSetState(this.state.text)\n  },\n\n  /**\n   * ### render\n   *\n   * if showState, stringify the currentState and display it to the\n   * browser for copying. Then display to the user.\n   *\n   * When the value of the input changes, call ```_onChangeText```\n   *\n   * When the 'Update State' button is pressed, we're off to the\n   * races with Hot Loading...just call the\n   * ```_updateStateButtonPress``` and away we go...\n   *\n   */\n  render () {\n    let displayText\n    if (this.props.showState) {\n      displayText = JSON.stringify(this.props.currentState)\n    }\n\n    return (\n      <View>\n        <View style={styles.header}>\n          <IconSet color=\"rgba(255,136,18, 0.40)\"\n                     size={300}\n                     name=\"brand_ger\"\n                     style={{ \n                      transform: [{ \n                        rotate: '45deg',\n                      }, {\n                        translateY: -130, \n                      }, {\n                        translateX: 100, \n                      }],\n                    }}\n          />\n          <View>\n            <IconSet color={variables.BRAND_COLOR}\n                     size={100}\n                     name=\"brand_ger\"\n            />\n          </View>\n          {this.props.isFetching\n           ? <ActivityIndicator animating size='large' />\n           : null\n          }\n\n        </View>\n        {this.props.showState\n         ? <View style={styles.container}>\n           <Text>{I18n.t('Header.current_state')} ({I18n.t('Header.see_console')})</Text>\n           <TextInput style={{height: 100, borderColor: 'gray', borderWidth: 1}}\n             value={displayText}\n             editable\n             multiline\n             onChangeText={(text) => this._onChangeText(text)}\n             numberOfLines={20} />\n           <View style={{\n             marginTop: 10\n           }}>\n             \n           </View>\n         </View>\n         : null}\n      </View>\n    )\n  }\n})\n\nmodule.exports = Header\n"]}]