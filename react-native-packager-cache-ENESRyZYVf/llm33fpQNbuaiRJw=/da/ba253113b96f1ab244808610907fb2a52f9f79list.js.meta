["f2e067d623fb240787a2d901eff71496a48b353d","1d2a0a3f48791ebb995bb556421e9691d94a4067",["react","react-native"],[20,54],{"version":3,"sources":["/var/www/geruapp/node_modules/tcomb-form-native/lib/templates/bootstrap/list.js"],"names":["React","require","View","Text","TouchableHighlight","renderRowWithoutButtons","item","key","input","renderRowButton","button","stylesheet","style","type","click","buttonText","label","renderButtonGroup","buttons","flexDirection","map","width","renderRow","flex","list","locals","hidden","fieldsetStyle","fieldset","controlLabelStyle","controlLabel","normal","hasError","error","errorBlock","rows","items","length","addButton","add","module","exports"],"mappings":"AAAA,IAAIA,QAAQC,QAAQ,OAAR,CAAZ;;eACyCA,QAAQ,cAAR,C;IAAnCC,I,YAAAA,I;IAAMC,I,YAAAA,I;IAAMC,kB,YAAAA,kB;;AAElB,SAASC,uBAAT,CAAiCC,IAAjC,EAAuC;AACrC,SAAO;AAAC,QAAD;AAAA,MAAM,KAAKA,KAAKC,GAAhB;AAAsBD,SAAKE;AAA3B,GAAP;AACD;;AAED,SAASC,eAAT,CAAyBC,MAAzB,EAAiCC,UAAjC,EAA6CC,KAA7C,EAAoD;AAClD,SACE;AAAC,sBAAD;AAAA,MAAoB,KAAKF,OAAOG,IAAhC,EAAsC,OAAO,CAACF,WAAWD,MAAZ,EAAoBE,KAApB,CAA7C,EAAyE,SAASF,OAAOI,KAAzF;AACE;AAAC,UAAD;AAAA,QAAM,OAAOH,WAAWI,UAAxB;AAAqCL,aAAOM;AAA5C;AADF,GADF;AAKD;;AAED,SAASC,iBAAT,CAA2BC,OAA3B,EAAoCP,UAApC,EAAgD;AAC9C,SACE;AAAC,QAAD;AAAA,MAAM,OAAO,EAACQ,eAAe,KAAhB,EAAb;AACGD,YAAQE,GAAR,CAAY;AAAA,aAAUX,gBAAgBC,MAAhB,EAAwBC,UAAxB,EAAoC,EAAEU,OAAO,EAAT,EAApC,CAAV;AAAA,KAAZ;AADH,GADF;AAKD;;AAED,SAASC,SAAT,CAAmBhB,IAAnB,EAAyBK,UAAzB,EAAqC;AACnC,SACE;AAAC,QAAD;AAAA,MAAM,KAAKL,KAAKC,GAAhB,EAAqB,OAAO,EAACY,eAAe,KAAhB,EAA5B;AACE;AAAC,UAAD;AAAA,QAAM,OAAO,EAACI,MAAM,CAAP,EAAb;AACGjB,WAAKE;AADR,KADF;AAIE;AAAC,UAAD;AAAA,QAAM,OAAO,EAACe,MAAM,CAAP,EAAb;AACGN,wBAAkBX,KAAKY,OAAvB,EAAgCP,UAAhC;AADH;AAJF,GADF;AAUD;;AAED,SAASa,IAAT,CAAcC,MAAd,EAAsB;AACpB,MAAIA,OAAOC,MAAX,EAAmB;AACjB,WAAO,IAAP;AACD;;AAED,MAAIf,aAAac,OAAOd,UAAxB;AACA,MAAIgB,gBAAgBhB,WAAWiB,QAA/B;AACA,MAAIC,oBAAoBlB,WAAWmB,YAAX,CAAwBC,MAAhD;;AAEA,MAAIN,OAAOO,QAAX,EAAqB;AACnBH,wBAAoBlB,WAAWmB,YAAX,CAAwBG,KAA5C;AACD;;AAED,MAAIjB,QAAQS,OAAOT,KAAP,GAAe;AAAC,QAAD;AAAA,MAAM,OAAOa,iBAAb;AAAiCJ,WAAOT;AAAxC,GAAf,GAAuE,IAAnF;AACA,MAAIiB,QAAQR,OAAOO,QAAP,IAAmBP,OAAOQ,KAA1B,GAAkC;AAAC,QAAD;AAAA,MAAM,yBAAwB,QAA9B,EAAuC,OAAOtB,WAAWuB,UAAzD;AAAsET,WAAOQ;AAA7E,GAAlC,GAA+H,IAA3I;;AAEA,MAAIE,OAAOV,OAAOW,KAAP,CAAahB,GAAb,CAAiB,UAAUd,IAAV,EAAgB;AAC1C,WAAOA,KAAKY,OAAL,CAAamB,MAAb,KAAwB,CAAxB,GACLhC,wBAAwBC,IAAxB,CADK,GAELgB,UAAUhB,IAAV,EAAgBK,UAAhB,CAFF;AAGD,GAJU,CAAX;;AAMA,MAAI2B,YAAYb,OAAOc,GAAP,GACd9B,gBAAgBgB,OAAOc,GAAvB,EAA4B5B,UAA5B,CADc,GAEd,IAFF;;AAIA,SACE;AAAC,QAAD;AAAA,MAAM,OAAOgB,aAAb;AACGX,SADH;AAEGiB,SAFH;AAGGE,QAHH;AAIGG;AAJH,GADF;AAQD;;AAEDE,OAAOC,OAAP,GAAiBjB,IAAjB","sourcesContent":["var React = require('react');\nvar { View, Text, TouchableHighlight } = require('react-native');\n\nfunction renderRowWithoutButtons(item) {\n  return <View key={item.key}>{item.input}</View>;\n}\n\nfunction renderRowButton(button, stylesheet, style) {\n  return (\n    <TouchableHighlight key={button.type} style={[stylesheet.button, style]} onPress={button.click}>\n      <Text style={stylesheet.buttonText}>{button.label}</Text>\n    </TouchableHighlight>\n  );\n}\n\nfunction renderButtonGroup(buttons, stylesheet) {\n  return (\n    <View style={{flexDirection: 'row'}}>\n      {buttons.map(button => renderRowButton(button, stylesheet, { width: 50 }))}\n    </View>\n  );\n}\n\nfunction renderRow(item, stylesheet) {\n  return (\n    <View key={item.key} style={{flexDirection: 'row'}}>\n      <View style={{flex: 1}}>\n        {item.input}\n      </View>\n      <View style={{flex: 1}}>\n        {renderButtonGroup(item.buttons, stylesheet)}\n      </View>\n    </View>\n  );\n}\n\nfunction list(locals) {\n  if (locals.hidden) {\n    return null;\n  }\n\n  var stylesheet = locals.stylesheet;\n  var fieldsetStyle = stylesheet.fieldset;\n  var controlLabelStyle = stylesheet.controlLabel.normal;\n\n  if (locals.hasError) {\n    controlLabelStyle = stylesheet.controlLabel.error;\n  }\n\n  var label = locals.label ? <Text style={controlLabelStyle}>{locals.label}</Text> : null;\n  var error = locals.hasError && locals.error ? <Text accessibilityLiveRegion=\"polite\" style={stylesheet.errorBlock}>{locals.error}</Text> : null;\n\n  var rows = locals.items.map(function (item) {\n    return item.buttons.length === 0 ?\n      renderRowWithoutButtons(item) :\n      renderRow(item, stylesheet);\n  });\n\n  var addButton = locals.add ?\n    renderRowButton(locals.add, stylesheet) :\n    null;\n\n  return (\n    <View style={fieldsetStyle}>\n      {label}\n      {error}\n      {rows}\n      {addButton}\n    </View>\n  );\n}\n\nmodule.exports = list;\n"]}]