["b3ed93baa4cb866437ad5fd6bbf2f9cd14410084","ae4f0357238ded309c04b721976eb02fdf29800d",["redux","react-redux","../../auth/authActions","../../global/globalActions","react","react-native","../../components/Header","react-timer-mixin","react-mixin"],[103,140,184,311,438,535,575,696,1451],{"version":3,"sources":["/var/www/geruapp/src/navigation/views/ScreenView.js"],"names":["authActions","globalActions","mapStateToProps","state","auth","form","isFetching","global","currentState","showState","mapDispatchToProps","dispatch","actions","styles","create","container","borderTopWidth","borderBottomWidth","marginTop","padding","summary","fontSize","fontWeight","reactMixin","require","ScreenView","createClass","componentDidMount","setTimeout","props","getSessionToken","render","getState","setState","prototype"],"mappings":";AAQA;;;;;;AAMA;;AACA;;AAKA;;IAAYA,W;;AACZ;;IAAYC,a;;AAKZ;;;;AACA;;AAWA;;;;AA6CA;;;;AAxCA,SAASC,eAAT,CAA0BC,KAA1B,EAAiC;AAC/B,SAAO;AACLC,UAAM;AACJC,YAAM;AACJC,oBAAYH,MAAMC,IAAN,CAAWC,IAAX,CAAgBC;AADxB;AADF,KADD;AAMLC,YAAQ;AACNC,oBAAcL,MAAMI,MAAN,CAAaC,YADrB;AAENC,iBAAWN,MAAMI,MAAN,CAAaE;AAFlB;AANH,GAAP;AAWD;;AAKD,SAASC,kBAAT,CAA6BC,QAA7B,EAAuC;AACrC,SAAO;AACLC,aAAS,wDAAwBZ,WAAxB,EAAwCC,aAAxC,GAAyDU,QAAzD;AADJ,GAAP;AAGD;;AAED,IAAIE,SAAS,wBAAWC,MAAX,CAAkB;AAC7BC,aAAW;AACTC,oBAAgB,CADP;AAETC,uBAAmB,CAFV;AAGTC,eAAW,EAHF;AAITC,aAAS;AAJA,GADkB;AAO7BC,WAAS;AACPC,cAAU,EADH;AAEPC,gBAAY;AAFL;AAPoB,CAAlB,CAAb;;AAgBA,IAAIC,aAAaC,QAAQ,aAAR,CAAjB;;;AAGA,IAAIC,aAAa,gBAAMC,WAAN,CAAkB;AAAA;AAKjCC,mBALiC,+BAKZ;AAAA;;AAEnB,SAAKC,UAAL,CACQ,YAAM;AACJ,YAAKC,KAAL,CAAWjB,OAAX,CAAmBkB,eAAnB;AACD,KAHT,EAIQ,IAJR;AAMD,GAbgC;AAejCC,QAfiC,oBAevB;AACR,WACE;AAAA;AAAA,QAAM,OAAOlB,OAAOE,SAApB;AACE,wDAAQ,YAAY,KAAKc,KAAL,CAAWzB,IAAX,CAAgBC,IAAhB,CAAqBC,UAAzC;AACE,mBAAW,KAAKuB,KAAL,CAAWtB,MAAX,CAAkBE,SAD/B;AAEE,sBAAc,KAAKoB,KAAL,CAAWtB,MAAX,CAAkBC,YAFlC;AAGE,oBAAY,KAAKqB,KAAL,CAAWjB,OAAX,CAAmBoB,QAHjC;AAIE,oBAAY,KAAKH,KAAL,CAAWjB,OAAX,CAAmBqB,QAJjC,GADF;AAOE;AAAA;AAAA,UAAM,OAAOpB,OAAOO,OAApB;AAAA;AAAA;AAPF,KADF;AAWD;AA3BgC,CAAlB,CAAjB;;AA8BAG,WAAWE,WAAWS,SAAtB;kBAIe,yBAAQhC,eAAR,EAAyBQ,kBAAzB,EAA6Ce,UAA7C,C","sourcesContent":["/**\n * # app.js\n *  Display startup screen and\n *  getSessionTokenAtStartup which will navigate upon completion\n *\n *\n *\n */\n'use strict'\n/*\n * ## Imports\n *\n * Imports from redux\n */\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\n\n/**\n * Project actions\n */\nimport * as authActions from '../../auth/authActions'\nimport * as globalActions from '../../global/globalActions'\n\n/**\n * The components we need from ReactNative\n */\nimport React from 'react'\nimport\n{\n    StyleSheet,\n    View,\n    Text\n}\nfrom 'react-native'\n\n/**\n * The Header will display a Image and support Hot Loading\n */\nimport Header from '../../components/Header'\n\n/**\n *  Save that state\n */\nfunction mapStateToProps (state) {\n  return {\n    auth: {\n      form: {\n        isFetching: state.auth.form.isFetching\n      }\n    },\n    global: {\n      currentState: state.global.currentState,\n      showState: state.global.showState\n    }\n  }\n}\n\n/**\n * Bind all the actions from authActions, deviceActions and globalActions\n */\nfunction mapDispatchToProps (dispatch) {\n  return {\n    actions: bindActionCreators({ ...authActions, ...globalActions }, dispatch)\n  }\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    borderTopWidth: 2,\n    borderBottomWidth: 2,\n    marginTop: 80,\n    padding: 10\n  },\n  summary: {\n    fontSize: 18,\n    fontWeight: 'bold'\n  }\n})\n\n/**\n * ## App class\n */\nvar reactMixin = require('react-mixin')\nimport TimerMixin from 'react-timer-mixin'\n\nlet ScreenView = React.createClass({\n    /**\n     * See if there's a sessionToken from a previous login\n     *\n     */\n  componentDidMount () {\n        // Use a timer so App screen is displayed\n    this.setTimeout(\n            () => {\n              this.props.actions.getSessionToken()\n            },\n            1000\n        )\n  },\n\n  render () {\n    return (\n      <View style={styles.container}>\n        <Header isFetching={this.props.auth.form.isFetching}\n          showState={this.props.global.showState}\n          currentState={this.props.global.currentState}\n          onGetState={this.props.actions.getState}\n          onSetState={this.props.actions.setState} />\n\n        <Text style={styles.summary}>Welcome to Geru App</Text>\n      </View>\n    )\n  }\n})\n// Since we're using ES6 classes, have to define the TimerMixin\nreactMixin(ScreenView.prototype, TimerMixin)\n/**\n * Connect the properties\n */\nexport default connect(mapStateToProps, mapDispatchToProps)(ScreenView)"]}]