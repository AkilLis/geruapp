["6af0a775b4257fcfdae0799b5c3ecc7877dc1b71","90424f574d658fe29f58cc269eb986e84e045017",["react","ReactInstrumentation","ReactNativeContainerInfo","ReactNativeTagHandles","ReactReconciler","ReactUpdateQueue","ReactUpdates","UIManager","fbjs/lib/emptyObject","instantiateReactComponent","shouldUpdateReactComponent","findNodeHandle"],[36,81,145,210,266,317,365,406,447,512,583,1669],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native/Libraries/Renderer/src/renderers/native/ReactNativeMount.js"],"names":["React","require","ReactInstrumentation","ReactNativeContainerInfo","ReactNativeTagHandles","ReactReconciler","ReactUpdateQueue","ReactUpdates","UIManager","emptyObject","instantiateReactComponent","shouldUpdateReactComponent","TopLevelWrapper","prototype","isReactComponent","__DEV__","displayName","render","props","child","isReactTopLevelWrapper","mountComponentIntoNode","componentInstance","containerTag","transaction","markup","mountComponent","_renderedComponent","_topLevelWrapper","ReactNativeMount","_mountImageIntoNode","batchedMountComponentIntoNode","ReactReconcileTransaction","getPooled","perform","release","_instancesByContainerID","findNodeHandle","renderComponent","nextElement","callback","nextWrappedElement","createElement","topRootNodeID","prevComponent","prevWrappedElement","_currentElement","prevElement","enqueueElementInternal","enqueueCallbackInternal","unmountComponentAtNode","reactTagIsNativeTopRootID","console","error","assertRootTag","instance","nonNullCallback","_pendingCallbacks","call","getPublicInstance","batchedUpdates","component","mountImage","containerID","childTag","setChildren","unmountComponentAtNodeAndRemoveContainer","removeRootView","debugTool","onBeginFlush","unmountComponentFromNode","onEndFlush","unmountComponent","removeSubviewsFromContainerWithID","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactNativeMount\n * @flow\n */\n'use strict';\n\nvar React = require('react');\nvar ReactInstrumentation = require('ReactInstrumentation');\nvar ReactNativeContainerInfo = require('ReactNativeContainerInfo');\nvar ReactNativeTagHandles = require('ReactNativeTagHandles');\nvar ReactReconciler = require('ReactReconciler');\nvar ReactUpdateQueue = require('ReactUpdateQueue');\nvar ReactUpdates = require('ReactUpdates');\nvar UIManager = require('UIManager');\n\nvar emptyObject = require('fbjs/lib/emptyObject');\nvar instantiateReactComponent = require('instantiateReactComponent');\nvar shouldUpdateReactComponent = require('shouldUpdateReactComponent');\n\n/**\n * Temporary (?) hack so that we can store all top-level pending updates on\n * composites instead of having to worry about different types of components\n * here.\n */\nvar TopLevelWrapper = function() {};\nTopLevelWrapper.prototype.isReactComponent = {};\nif (__DEV__) {\n  TopLevelWrapper.displayName = 'TopLevelWrapper';\n}\nTopLevelWrapper.prototype.render = function() {\n  return this.props.child;\n};\nTopLevelWrapper.isReactTopLevelWrapper = true;\n\n/**\n * Mounts this component and inserts it into the DOM.\n *\n * @param {ReactComponent} componentInstance The instance to mount.\n * @param {number} rootID ID of the root node.\n * @param {number} containerTag container element to mount into.\n * @param {ReactReconcileTransaction} transaction\n */\nfunction mountComponentIntoNode(componentInstance, containerTag, transaction) {\n  var markup = ReactReconciler.mountComponent(\n    componentInstance,\n    transaction,\n    null,\n    ReactNativeContainerInfo(containerTag),\n    emptyObject,\n    0 /* parentDebugID */,\n  );\n  componentInstance._renderedComponent._topLevelWrapper = componentInstance;\n  ReactNativeMount._mountImageIntoNode(markup, containerTag);\n}\n\n/**\n * Batched mount.\n *\n * @param {ReactComponent} componentInstance The instance to mount.\n * @param {number} rootID ID of the root node.\n * @param {number} containerTag container element to mount into.\n */\nfunction batchedMountComponentIntoNode(componentInstance, containerTag) {\n  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();\n  transaction.perform(\n    mountComponentIntoNode,\n    null,\n    componentInstance,\n    containerTag,\n    transaction,\n  );\n  ReactUpdates.ReactReconcileTransaction.release(transaction);\n}\n\n/**\n * As soon as `ReactMount` is refactored to not rely on the DOM, we can share\n * code between the two. For now, we'll hard code the ID logic.\n */\nvar ReactNativeMount = {\n  _instancesByContainerID: {},\n\n  // these two functions are needed by React Devtools\n  findNodeHandle: require('findNodeHandle'),\n\n  /**\n   * @param {ReactComponent} instance Instance to render.\n   * @param {containerTag} containerView Handle to native view tag\n   */\n  renderComponent: function(\n    nextElement: ReactElement<*>,\n    containerTag: number,\n    callback?: ?() => void,\n  ): ?ReactComponent<any, any, any> {\n    var nextWrappedElement = React.createElement(TopLevelWrapper, {\n      child: nextElement,\n    });\n\n    var topRootNodeID = containerTag;\n    var prevComponent = ReactNativeMount._instancesByContainerID[topRootNodeID];\n    if (prevComponent) {\n      var prevWrappedElement = prevComponent._currentElement;\n      var prevElement = prevWrappedElement.props.child;\n      if (shouldUpdateReactComponent(prevElement, nextElement)) {\n        ReactUpdateQueue.enqueueElementInternal(\n          prevComponent,\n          nextWrappedElement,\n          emptyObject,\n        );\n        if (callback) {\n          ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);\n        }\n        return prevComponent;\n      } else {\n        ReactNativeMount.unmountComponentAtNode(containerTag);\n      }\n    }\n\n    if (!ReactNativeTagHandles.reactTagIsNativeTopRootID(containerTag)) {\n      console.error('You cannot render into anything but a top root');\n      return null;\n    }\n\n    ReactNativeTagHandles.assertRootTag(containerTag);\n\n    var instance = instantiateReactComponent(nextWrappedElement, false);\n    ReactNativeMount._instancesByContainerID[containerTag] = instance;\n\n    if (callback) {\n      var nonNullCallback = callback;\n      instance._pendingCallbacks = [\n        function() {\n          nonNullCallback.call(instance._renderedComponent.getPublicInstance());\n        },\n      ];\n    }\n\n    // The initial render is synchronous but any updates that happen during\n    // rendering, in componentWillMount or componentDidMount, will be batched\n    // according to the current batching strategy.\n\n    ReactUpdates.batchedUpdates(\n      batchedMountComponentIntoNode,\n      instance,\n      containerTag,\n    );\n    var component = instance._renderedComponent.getPublicInstance();\n    return component;\n  },\n\n  /**\n   * @param {View} view View tree image.\n   * @param {number} containerViewID View to insert sub-view into.\n   */\n  _mountImageIntoNode: function(mountImage: number, containerID: number) {\n    // Since we now know that the `mountImage` has been mounted, we can\n    // mark it as such.\n    var childTag = mountImage;\n    UIManager.setChildren(containerID, [childTag]);\n  },\n\n  /**\n   * Standard unmounting of the component that is rendered into `containerID`,\n   * but will also execute a command to remove the actual container view\n   * itself. This is useful when a client is cleaning up a React tree, and also\n   * knows that the container will no longer be needed. When executing\n   * asynchronously, it's easier to just have this method be the one that calls\n   * for removal of the view.\n   */\n  unmountComponentAtNodeAndRemoveContainer: function(containerTag: number) {\n    ReactNativeMount.unmountComponentAtNode(containerTag);\n    // call back into native to remove all of the subviews from this container\n    UIManager.removeRootView(containerTag);\n  },\n\n  /**\n   * Unmount component at container ID by iterating through each child component\n   * that has been rendered and unmounting it. There should just be one child\n   * component at this time.\n   */\n  unmountComponentAtNode: function(containerTag: number): boolean {\n    if (!ReactNativeTagHandles.reactTagIsNativeTopRootID(containerTag)) {\n      console.error('You cannot render into anything but a top root');\n      return false;\n    }\n\n    var instance = ReactNativeMount._instancesByContainerID[containerTag];\n    if (!instance) {\n      return false;\n    }\n    if (__DEV__) {\n      ReactInstrumentation.debugTool.onBeginFlush();\n    }\n    ReactNativeMount.unmountComponentFromNode(instance, containerTag);\n    delete ReactNativeMount._instancesByContainerID[containerTag];\n    if (__DEV__) {\n      ReactInstrumentation.debugTool.onEndFlush();\n    }\n    return true;\n  },\n\n  /**\n   * Unmounts a component and sends messages back to iOS to remove its subviews.\n   *\n   * @param {ReactComponent} instance React component instance.\n   * @param {string} containerID ID of container we're removing from.\n   * @final\n   * @internal\n   * @see {ReactNativeMount.unmountComponentAtNode}\n   */\n  unmountComponentFromNode: function(\n    instance: ReactComponent<any, any, any>,\n    containerID: number,\n  ) {\n    // Call back into native to remove all of the subviews from this container\n    ReactReconciler.unmountComponent(instance);\n    UIManager.removeSubviewsFromContainerWithID(containerID);\n  },\n};\n\nmodule.exports = ReactNativeMount;\n"]}]