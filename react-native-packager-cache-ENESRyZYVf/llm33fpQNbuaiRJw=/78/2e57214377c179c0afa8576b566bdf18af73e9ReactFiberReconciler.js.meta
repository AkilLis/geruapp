["9ff593b690fea0e2b48962e50e62836d48c5ba47","97b26403a5c1c6c0c9a0c4d382fb9aab4095dfd6",["ReactFiberUpdateQueue","ReactFiberContext","ReactFiberRoot","ReactFiberScheduler","fbjs/lib/warning","ReactFiberInstrumentation","ReactDebugCurrentFiber","getComponentName","ReactFiberTreeReflection","getContextForSubtree"],[40,143,371,474,538,601,670,730,778,902],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native/Libraries/Renderer/src/renderers/shared/fiber/ReactFiberReconciler.js"],"names":["require","addTopLevelUpdate","findCurrentUnmaskedContext","isContextProvider","processChildContext","createFiberRoot","ReactFiberScheduler","__DEV__","warning","ReactFiberInstrumentation","ReactDebugCurrentFiber","getComponentName","findCurrentHostFiber","getContextForSubtree","_injectFiber","fiber","parentContext","module","exports","config","scheduleUpdate","getPriorityContext","performWithPriority","batchedUpdates","unbatchedUpdates","syncUpdates","deferredUpdates","scheduleTopLevelUpdate","current","element","callback","phase","priorityLevel","nextState","undefined","createContainer","containerInfo","updateContainer","container","parentComponent","debugTool","alternate","onMountContainer","onUnmountContainer","onUpdateContainer","context","pendingContext","getPublicRootInstance","containerFiber","child","stateNode","findHostInstance","hostFiber"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactFiberReconciler\n * @flow\n */\n\n'use strict';\n\nimport type {Fiber} from 'ReactFiber';\nimport type {FiberRoot} from 'ReactFiberRoot';\nimport type {PriorityLevel} from 'ReactPriorityLevel';\nimport type {ReactNodeList} from 'ReactTypes';\n\nvar {\n  addTopLevelUpdate,\n} = require('ReactFiberUpdateQueue');\n\nvar {\n  findCurrentUnmaskedContext,\n  isContextProvider,\n  processChildContext,\n} = require('ReactFiberContext');\nvar {createFiberRoot} = require('ReactFiberRoot');\nvar ReactFiberScheduler = require('ReactFiberScheduler');\n\nif (__DEV__) {\n  var warning = require('fbjs/lib/warning');\n  var ReactFiberInstrumentation = require('ReactFiberInstrumentation');\n  var ReactDebugCurrentFiber = require('ReactDebugCurrentFiber');\n  var getComponentName = require('getComponentName');\n}\n\nvar {findCurrentHostFiber} = require('ReactFiberTreeReflection');\n\nvar getContextForSubtree = require('getContextForSubtree');\n\nexport type Deadline = {\n  timeRemaining: () => number,\n};\n\ntype OpaqueHandle = Fiber;\ntype OpaqueRoot = FiberRoot;\n\nexport type HostConfig<T, P, I, TI, PI, C, CX, PL> = {\n  getRootHostContext(rootContainerInstance: C): CX,\n  getChildHostContext(parentHostContext: CX, type: T): CX,\n  getPublicInstance(instance: I | TI): PI,\n\n  createInstance(\n    type: T,\n    props: P,\n    rootContainerInstance: C,\n    hostContext: CX,\n    internalInstanceHandle: OpaqueHandle,\n  ): I,\n  appendInitialChild(parentInstance: I, child: I | TI): void,\n  finalizeInitialChildren(\n    parentInstance: I,\n    type: T,\n    props: P,\n    rootContainerInstance: C,\n  ): boolean,\n\n  prepareUpdate(\n    instance: I,\n    type: T,\n    oldProps: P,\n    newProps: P,\n    rootContainerInstance: C,\n    hostContext: CX,\n  ): null | PL,\n  commitUpdate(\n    instance: I,\n    updatePayload: PL,\n    type: T,\n    oldProps: P,\n    newProps: P,\n    internalInstanceHandle: OpaqueHandle,\n  ): void,\n  commitMount(\n    instance: I,\n    type: T,\n    newProps: P,\n    internalInstanceHandle: OpaqueHandle,\n  ): void,\n\n  shouldSetTextContent(props: P): boolean,\n  resetTextContent(instance: I): void,\n  shouldDeprioritizeSubtree(type: T, props: P): boolean,\n\n  createTextInstance(\n    text: string,\n    rootContainerInstance: C,\n    hostContext: CX,\n    internalInstanceHandle: OpaqueHandle,\n  ): TI,\n  commitTextUpdate(textInstance: TI, oldText: string, newText: string): void,\n\n  appendChild(parentInstance: I | C, child: I | TI): void,\n  insertBefore(parentInstance: I | C, child: I | TI, beforeChild: I | TI): void,\n  removeChild(parentInstance: I | C, child: I | TI): void,\n\n  scheduleAnimationCallback(callback: () => void): number | void,\n  scheduleDeferredCallback(callback: (deadline: Deadline) => void):\n    | number\n    | void,\n\n  prepareForCommit(): void,\n  resetAfterCommit(): void,\n\n  useSyncScheduling?: boolean,\n};\n\nexport type Reconciler<C, I, TI> = {\n  createContainer(containerInfo: C): OpaqueRoot,\n  updateContainer(\n    element: ReactNodeList,\n    container: OpaqueRoot,\n    parentComponent: ?ReactComponent<any, any, any>,\n  ): void,\n  performWithPriority(priorityLevel: PriorityLevel, fn: Function): void,\n  batchedUpdates<A>(fn: () => A): A,\n  unbatchedUpdates<A>(fn: () => A): A,\n  syncUpdates<A>(fn: () => A): A,\n  deferredUpdates<A>(fn: () => A): A,\n\n  // Used to extract the return value from the initial render. Legacy API.\n  getPublicRootInstance(container: OpaqueRoot):\n    | ReactComponent<any, any, any>\n    | TI\n    | I\n    | null,\n\n  // Use for findDOMNode/findHostNode. Legacy API.\n  findHostInstance(component: Fiber): I | TI | null,\n};\n\ngetContextForSubtree._injectFiber(function(fiber: Fiber) {\n  const parentContext = findCurrentUnmaskedContext(fiber);\n  return isContextProvider(fiber)\n    ? processChildContext(fiber, parentContext, false)\n    : parentContext;\n});\n\nmodule.exports = function<T, P, I, TI, PI, C, CX, PL>(\n  config: HostConfig<T, P, I, TI, PI, C, CX, PL>,\n): Reconciler<C, I, TI> {\n  var {\n    scheduleUpdate,\n    getPriorityContext,\n    performWithPriority,\n    batchedUpdates,\n    unbatchedUpdates,\n    syncUpdates,\n    deferredUpdates,\n  } = ReactFiberScheduler(config);\n\n  function scheduleTopLevelUpdate(\n    current: Fiber,\n    element: ReactNodeList,\n    callback: ?Function,\n  ) {\n    if (__DEV__) {\n      if (\n        ReactDebugCurrentFiber.phase === 'render' &&\n        ReactDebugCurrentFiber.current !== null\n      ) {\n        warning(\n          false,\n          'Render methods should be a pure function of props and state; ' +\n            'triggering nested component updates from render is not allowed. ' +\n            'If necessary, trigger nested updates in componentDidUpdate.\\n\\n' +\n            'Check the render method of %s.',\n          getComponentName(ReactDebugCurrentFiber.current) || 'Unknown',\n        );\n      }\n    }\n\n    const priorityLevel = getPriorityContext();\n    const nextState = {element};\n    callback = callback === undefined ? null : callback;\n    if (__DEV__) {\n      warning(\n        callback === null || typeof callback === 'function',\n        'render(...): Expected the last optional `callback` argument to be a ' +\n          'function. Instead received: %s.',\n        callback,\n      );\n    }\n    addTopLevelUpdate(current, nextState, callback, priorityLevel);\n    scheduleUpdate(current, priorityLevel);\n  }\n\n  return {\n    createContainer(containerInfo: C): OpaqueRoot {\n      return createFiberRoot(containerInfo);\n    },\n\n    updateContainer(\n      element: ReactNodeList,\n      container: OpaqueRoot,\n      parentComponent: ?ReactComponent<any, any, any>,\n      callback: ?Function,\n    ): void {\n      // TODO: If this is a nested container, this won't be the root.\n      const current = container.current;\n\n      if (__DEV__) {\n        if (ReactFiberInstrumentation.debugTool) {\n          if (current.alternate === null) {\n            ReactFiberInstrumentation.debugTool.onMountContainer(container);\n          } else if (element === null) {\n            ReactFiberInstrumentation.debugTool.onUnmountContainer(container);\n          } else {\n            ReactFiberInstrumentation.debugTool.onUpdateContainer(container);\n          }\n        }\n      }\n\n      const context = getContextForSubtree(parentComponent);\n      if (container.context === null) {\n        container.context = context;\n      } else {\n        container.pendingContext = context;\n      }\n\n      scheduleTopLevelUpdate(current, element, callback);\n    },\n\n    performWithPriority,\n\n    batchedUpdates,\n\n    unbatchedUpdates,\n\n    syncUpdates,\n\n    deferredUpdates,\n\n    getPublicRootInstance(\n      container: OpaqueRoot,\n    ): ReactComponent<any, any, any> | I | TI | null {\n      const containerFiber = container.current;\n      if (!containerFiber.child) {\n        return null;\n      }\n      return containerFiber.child.stateNode;\n    },\n\n    findHostInstance(fiber: Fiber): I | TI | null {\n      const hostFiber = findCurrentHostFiber(fiber);\n      if (hostFiber === null) {\n        return null;\n      }\n      return hostFiber.stateNode;\n    },\n  };\n};\n"]}]