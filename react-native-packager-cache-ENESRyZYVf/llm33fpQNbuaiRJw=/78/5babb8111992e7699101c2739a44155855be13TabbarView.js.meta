["f2e55104ce895b73f0fd7e7670340b9011325b72","a22907881352535c5a3ac66277ab0314245e2824",["react","lodash","react-native-router-flux","react-redux","react-native","react-native-vector-icons/Ionicons","react-native-tab-navigator","../navigation/actions/navigationActions","react-native-smart-badge","react-native-vector-icons","../brand/selection.json","../navigation/views/MessageView","../notification/containers/NotificationView","../profile/containers/ProfileView","../navigation/views/DashboardView","../showcase/containers/ShowcaseView","../styles/variables"],[102,194,304,360,404,446,590,750,832,991,1047,1170,1310,1467,1606,1748,1887],{"version":3,"sources":["/var/www/geruapp/src/containers/TabbarView.js"],"names":["IconSet","TabbarView","currentTab","ProjectTagsChooser","props","tabChanged","notificationCount","color","styles","badget","route","navigation","content","key","notificationRenderBadge","centerCenter","height","width","icon","iconSize","activeColor","changeTab","tabItems","forEach","routes","push","renderTabViewItem","tabHeight","flex","backgroundColor","BRAND_SUBCOLOR","paddingBottom","create","container","tabView","padding","modal","position","top","left","marginTop","borderColor","borderWidth","state","navigationState","dispatch","backAction"],"mappings":"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","sourcesContent":["\"use strict\"\n\nimport React, { Component } from \"react\"\nimport _ from 'lodash'\nimport { Actions } from 'react-native-router-flux'\n\nimport { connect } from 'react-redux'\nimport { \n  View,\n  Text, \n  StyleSheet,\n} from \"react-native\"\nimport Icon from 'react-native-vector-icons/Ionicons'\nimport TabNavigator from 'react-native-tab-navigator'\nimport { navigatePop, tabChanged } from '../navigation/actions/navigationActions'\nimport Badge from 'react-native-smart-badge'\n\nimport { createIconSetFromIcoMoon } from 'react-native-vector-icons'\nimport brandLocationConfig from '../brand/selection.json'\nconst IconSet = createIconSetFromIcoMoon(brandLocationConfig)\n\n//Views\nimport MessageView from '../navigation/views/MessageView'\nimport NotificationView from '../notification/containers/NotificationView'\nimport ProfileView from '../profile/containers/ProfileView'\nimport DashboardView from '../navigation/views/DashboardView'\nimport ShowcaseView from '../showcase/containers/ShowcaseView'\n\nimport variables, { font, layout } from '../styles/variables'\n\nclass TabbarView extends Component {\n\n  changeTab (currentTab) {\n    if(currentTab == \"newproject\") {\n      return Actions.ProjectTagsChooser()\n    }\n\n    this.props.tabChanged(currentTab)\n  }\n\n  notificationRenderBadge (notificationCount) {\n      return notificationCount != 0 ? (\n          <Badge minWidth={15} \n                 minHeight={15} \n                 extraPaddingHorizontal={4}\n                 textStyle={{color: '#fff',}} \n                 style={styles.badget}>\n              {notificationCount}\n          </Badge>) : null\n  }\n\n  renderTabViewItem (route) {\n      const { currentTab } = this.props.navigation\n      var content = {}\n\n      switch(route.key) {\n        case \"showcase\": \n          content = <ShowcaseView />\n          break\n        case \"message\":\n          content = <MessageView />\n          break\n        case \"notification\":\n          content = <NotificationView />\n          break\n        case \"project\":\n          content = <DashboardView />\n          break\n        case \"profile\":\n          content = <ProfileView />\n          break\n        default :\n          break\n      }\n\n      return <TabNavigator.Item \n                    key={route.key}\n                    selected={currentTab === route.key}\n                    renderBadge={() => this.notificationRenderBadge(route.notificationCount)}\n                    renderIcon={() => \n                        <View style={[layout.centerCenter, { height: 40, width: 40, }]}>\n                          <IconSet color={route.color} \n                                   name={route.icon} \n                                   size={route.iconSize}\n                          />\n                        </View>\n                    }\n            \n                    renderSelectedIcon={() => \n                        <View style={[layout.centerCenter, { height: 40, width: 40, }]}>\n                          <IconSet color={route.activeColor} \n                                   name={route.icon} \n                                   size={route.iconSize} \n                          />\n                        </View>\n                    }\n                    onPress={() => this.changeTab(route.key)}\n              >\n                  {content}\n              </TabNavigator.Item>\n  }\n\n  render() {\n      var tabItems = []\n      _.forEach(this.props.navigation.routes, (route) => {\n          tabItems.push(\n              this.renderTabViewItem(route)\n          )\n      })\n\n      let tabHeight = 60\n\n      return (\n          <View style={{flex: 1, }}>\n            <TabNavigator tabBarStyle={{backgroundColor: '#fff', height: tabHeight, }}\n                          tabBarShadowStyle={{backgroundColor: variables.BRAND_SUBCOLOR, height: 0}}\n                          sceneStyle={{ paddingBottom: tabHeight }}>\n                {tabItems}\n            </TabNavigator>\n          </View>\n      )\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n\n  tabView: {\n    flex: 1,\n    padding: 5,\n    backgroundColor: '#242424',\n    //backgroundColor: 'rgba(62,71,79,0.01)',\n  },\n\n  modal: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    height: 600,\n    width: 300,\n    backgroundColor: 'rgba(0,0,0,0.3)'\n  },\n\n  badget: {\n    backgroundColor: '#f66f6f', \n    marginTop: 8,\n    borderColor: '#fff', \n    borderWidth: 2,\n  }\n});\n\nexport default connect(\n  state => ({\n      navigation: state.navigationState\n  }),\n\n  dispatch => ({\n      tabChanged: (currentTab) => {\n        dispatch(tabChanged(currentTab))\n      },\n      backAction: () => {\n        dispatch(navigatePop())\n      }\n  })\n)(TabbarView)"]}]