["47677fe16c902905857da07b0cc4d8e419ce95d6","d54b44a140c1040d1f5ecb737f2f7d2249b62db5",["fbjs/lib/invariant"],[41],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native/Libraries/Renderer/src/renderers/native/ReactNativeComponentTree.js"],"names":["invariant","require","instanceCache","instanceProps","getRenderedHostOrTextFromComponent","component","rendered","_renderedComponent","precacheNode","inst","tag","nativeInst","precacheFiberNode","hostInst","uncacheNode","_rootNodeID","uncacheFiberNode","getInstanceFromTag","getTagFromInstance","stateNode","_nativeTag","getFiberCurrentPropsFromNode","updateFiberProps","props","ReactNativeComponentTree","getClosestInstanceFromNode","getInstanceFromNode","getNodeFromInstance","module","exports"],"mappings":";;AAWA;;AAEA,IAAIA,YAAYC,QAAQ,oBAAR,CAAhB;;AAEA,IAAIC,gBAAgB,EAApB;AACA,IAAIC,gBAAgB,EAApB;;AASA,SAASC,kCAAT,CAA4CC,SAA5C,EAAuD;AACrD,MAAIC,QAAJ;AACA,SAAQA,WAAWD,UAAUE,kBAA7B,EAAkD;AAChDF,gBAAYC,QAAZ;AACD;AACD,SAAOD,SAAP;AACD;;AAMD,SAASG,YAAT,CAAsBC,IAAtB,EAA4BC,GAA5B,EAAiC;AAC/B,MAAIC,aAAaP,mCAAmCK,IAAnC,CAAjB;AACAP,gBAAcQ,GAAd,IAAqBC,UAArB;AACD;;AAED,SAASC,iBAAT,CAA2BC,QAA3B,EAAqCH,GAArC,EAA0C;AACxCR,gBAAcQ,GAAd,IAAqBG,QAArB;AACD;;AAED,SAASC,WAAT,CAAqBL,IAArB,EAA2B;AACzB,MAAIC,MAAMD,KAAKM,WAAf;AACA,MAAIL,GAAJ,EAAS;AACP,WAAOR,cAAcQ,GAAd,CAAP;AACD;AACF;;AAED,SAASM,gBAAT,CAA0BN,GAA1B,EAA+B;AAC7B,SAAOR,cAAcQ,GAAd,CAAP;AACA,SAAOP,cAAcO,GAAd,CAAP;AACD;;AAED,SAASO,kBAAT,CAA4BP,GAA5B,EAAiC;AAC/B,SAAOR,cAAcQ,GAAd,KAAsB,IAA7B;AACD;;AAED,SAASQ,kBAAT,CAA4BT,IAA5B,EAAkC;AAEhC,MAAIC,MAAM,OAAOD,KAAKC,GAAZ,KAAoB,QAApB,GACND,KAAKM,WADC,GAENN,KAAKU,SAAL,CAAeC,UAFnB;AAGApB,YAAUU,GAAV,EAAe,yCAAf;AACA,SAAOA,GAAP;AACD;;AAED,SAASW,4BAAT,CAAsCF,SAAtC,EAAiD;AAC/C,SAAOhB,cAAcgB,UAAUC,UAAxB,KAAuC,IAA9C;AACD;;AAED,SAASE,gBAAT,CAA0BZ,GAA1B,EAA+Ba,KAA/B,EAAsC;AACpCpB,gBAAcO,GAAd,IAAqBa,KAArB;AACD;;AAED,IAAIC,2BAA2B;AAC7BC,8BAA4BR,kBADC;AAE7BS,uBAAqBT,kBAFQ;AAG7BU,uBAAqBT,kBAHQ;AAI7BN,sCAJ6B;AAK7BJ,4BAL6B;AAM7BQ,oCAN6B;AAO7BF,0BAP6B;AAQ7BO,4DAR6B;AAS7BC;AAT6B,CAA/B;;AAYAM,OAAOC,OAAP,GAAiBL,wBAAjB","sourcesContent":["/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactNativeComponentTree\n */\n\n'use strict';\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar instanceCache = {};\nvar instanceProps = {};\n\n/**\n * Drill down (through composites and empty components) until we get a host or\n * host text component.\n *\n * This is pretty polymorphic but unavoidable with the current structure we have\n * for `_renderedChildren`.\n */\nfunction getRenderedHostOrTextFromComponent(component) {\n  var rendered;\n  while ((rendered = component._renderedComponent)) {\n    component = rendered;\n  }\n  return component;\n}\n\n/**\n * Populate `_hostNode` on the rendered host/text component with the given\n * DOM node. The passed `inst` can be a composite.\n */\nfunction precacheNode(inst, tag) {\n  var nativeInst = getRenderedHostOrTextFromComponent(inst);\n  instanceCache[tag] = nativeInst;\n}\n\nfunction precacheFiberNode(hostInst, tag) {\n  instanceCache[tag] = hostInst;\n}\n\nfunction uncacheNode(inst) {\n  var tag = inst._rootNodeID;\n  if (tag) {\n    delete instanceCache[tag];\n  }\n}\n\nfunction uncacheFiberNode(tag) {\n  delete instanceCache[tag];\n  delete instanceProps[tag];\n}\n\nfunction getInstanceFromTag(tag) {\n  return instanceCache[tag] || null;\n}\n\nfunction getTagFromInstance(inst) {\n  // TODO (bvaughn) Clean up once Stack is deprecated\n  var tag = typeof inst.tag !== 'number'\n    ? inst._rootNodeID\n    : inst.stateNode._nativeTag;\n  invariant(tag, 'All native instances should have a tag.');\n  return tag;\n}\n\nfunction getFiberCurrentPropsFromNode(stateNode) {\n  return instanceProps[stateNode._nativeTag] || null;\n}\n\nfunction updateFiberProps(tag, props) {\n  instanceProps[tag] = props;\n}\n\nvar ReactNativeComponentTree = {\n  getClosestInstanceFromNode: getInstanceFromTag,\n  getInstanceFromNode: getInstanceFromTag,\n  getNodeFromInstance: getTagFromInstance,\n  precacheFiberNode,\n  precacheNode,\n  uncacheFiberNode,\n  uncacheNode,\n  getFiberCurrentPropsFromNode,\n  updateFiberProps,\n};\n\nmodule.exports = ReactNativeComponentTree;\n"]}]