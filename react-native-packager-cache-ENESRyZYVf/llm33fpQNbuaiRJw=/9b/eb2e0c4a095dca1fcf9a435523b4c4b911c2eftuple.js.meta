["53651882ef86359befa07e0234fed89de15319c4","f6b09b7b4b7cefc3803c061a93ed7b263f3bc643",["./assert","./isTypeName","./isFunction","./getTypeName","./isIdentity","./isArray","./create","./is"],[21,59,101,144,187,226,261,291],{"version":3,"sources":["/var/www/geruapp/node_modules/tcomb/lib/tuple.js"],"names":["assert","require","isTypeName","isFunction","getTypeName","isIdentity","isArray","create","is","getDefaultName","types","map","join","tuple","name","process","env","NODE_ENV","every","stringify","displayName","identity","Tuple","value","path","length","idempotent","ret","i","len","expected","actual","instance","concat","push","Object","freeze","meta","kind","x","type","update","patch","module","exports"],"mappings":"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","sourcesContent":["var assert = require('./assert');\nvar isTypeName = require('./isTypeName');\nvar isFunction = require('./isFunction');\nvar getTypeName = require('./getTypeName');\nvar isIdentity = require('./isIdentity');\nvar isArray = require('./isArray');\nvar create = require('./create');\nvar is = require('./is');\n\nfunction getDefaultName(types) {\n  return '[' + types.map(getTypeName).join(', ') + ']';\n}\n\nfunction tuple(types, name) {\n\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isArray(types) && types.every(isFunction), function () { return 'Invalid argument types ' + assert.stringify(types) + ' supplied to tuple(types, [name]) combinator (expected an array of types)'; });\n    assert(isTypeName(name), function () { return 'Invalid argument name ' + assert.stringify(name) + ' supplied to tuple(types, [name]) combinator (expected a string)'; });\n  }\n\n  var displayName = name || getDefaultName(types);\n  var identity = types.every(isIdentity);\n\n  function Tuple(value, path) {\n\n    if (process.env.NODE_ENV === 'production') {\n      if (identity) {\n        return value;\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      path = path || [displayName];\n      assert(isArray(value) && value.length === types.length, function () { return 'Invalid value ' + assert.stringify(value) + ' supplied to ' + path.join('/') + ' (expected an array of length ' + types.length + ')'; });\n    }\n\n    var idempotent = true;\n    var ret = [];\n    for (var i = 0, len = types.length; i < len; i++) {\n      var expected = types[i];\n      var actual = value[i];\n      var instance = create(expected, actual, ( process.env.NODE_ENV !== 'production' ? path.concat(i + ': ' + getTypeName(expected)) : null ));\n      idempotent = idempotent && ( actual === instance );\n      ret.push(instance);\n    }\n\n    if (idempotent) { // implements idempotency\n      ret = value;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      Object.freeze(ret);\n    }\n\n    return ret;\n  }\n\n  Tuple.meta = {\n    kind: 'tuple',\n    types: types,\n    name: name,\n    identity: identity\n  };\n\n  Tuple.displayName = displayName;\n\n  Tuple.is = function (x) {\n    return isArray(x) &&\n      x.length === types.length &&\n      types.every(function (type, i) {\n        return is(x[i], type);\n      });\n  };\n\n  Tuple.update = function (instance, patch) {\n    return Tuple(assert.update(instance, patch));\n  };\n\n  return Tuple;\n}\n\ntuple.getDefaultName = getDefaultName;\nmodule.exports = tuple;"]}]