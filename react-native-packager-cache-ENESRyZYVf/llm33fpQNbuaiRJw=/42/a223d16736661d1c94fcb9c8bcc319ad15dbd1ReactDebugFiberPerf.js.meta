["456a6a201d772c4d1a07dcb57d05f46f5468e50c","b658b99edfa98a8f6195068c61e22fb17bb06a36",["ReactTypeOfWork","getComponentName"],[74,370],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native/Libraries/Renderer/src/renderers/shared/fiber/ReactDebugFiberPerf.js"],"names":["ReactDebugFiberPerf","__DEV__","require","HostRoot","HostComponent","HostText","HostPortal","YieldComponent","Fragment","getComponentName","reactEmoji","warningEmoji","supportsUserTiming","performance","mark","clearMarks","measure","clearMeasures","currentFiber","currentPhase","currentPhaseFiber","isCommitting","hasScheduledUpdateInCurrentCommit","hasScheduledUpdateInCurrentPhase","commitCountInCurrentWorkLoop","effectCountInCurrentCommit","labelsInCurrentCommit","Set","formatMarkName","markName","formatLabel","label","warning","prefix","suffix","beginMark","clearMark","endMark","formattedMarkName","formattedLabel","err","getFiberMarkName","debugID","getFiberLabel","componentName","isMounted","phase","beginFiberMark","fiber","_debugID","alternate","has","add","clearFiberMark","endFiberMark","shouldIgnoreFiber","tag","clearPendingPhaseMeasurement","pauseTimers","_debugIsCurrentlyTiming","return","resumeTimersRecursively","resumeTimers","recordEffect","recordScheduleUpdate","startWorkTimer","cancelWorkTimer","stopWorkTimer","startPhaseTimer","stopPhaseTimer","startWorkLoopTimer","stopWorkLoopTimer","startCommitTimer","clear","stopCommitTimer","startCommitHostEffectsTimer","stopCommitHostEffectsTimer","count","startCommitLifeCyclesTimer","stopCommitLifeCyclesTimer","module","exports"],"mappings":";AAyBA,IAAIA,sBAAwB,IAA5B;;AAEA,IAAIC,OAAJ,EAAa;AAAA,iBAQPC,QAAQ,iBAAR,CARO;AAAA,MAETC,QAFS,YAETA,QAFS;AAAA,MAGTC,aAHS,YAGTA,aAHS;AAAA,MAITC,QAJS,YAITA,QAJS;AAAA,MAKTC,UALS,YAKTA,UALS;AAAA,MAMTC,cANS,YAMTA,cANS;AAAA,MAOTC,QAPS,YAOTA,QAPS;;AAUX,MAAMC,mBAAmBP,QAAQ,kBAAR,CAAzB;;AAIA,MAAMQ,aAAa,QAAnB;AACA,MAAMC,eAAe,QAArB;AACA,MAAMC,qBAAqB,OAAOC,WAAP,KAAuB,WAAvB,IACzB,OAAOA,YAAYC,IAAnB,KAA4B,UADH,IAEzB,OAAOD,YAAYE,UAAnB,KAAkC,UAFT,IAGzB,OAAOF,YAAYG,OAAnB,KAA+B,UAHN,IAIzB,OAAOH,YAAYI,aAAnB,KAAqC,UAJvC;;AAQA,MAAIC,eAA6B,IAAjC;;AAKA,MAAIC,eAAwC,IAA5C;AACA,MAAIC,oBAAkC,IAAtC;;AAIA,MAAIC,eAAwB,KAA5B;AACA,MAAIC,oCAA6C,KAAjD;AACA,MAAIC,mCAA4C,KAAhD;AACA,MAAIC,+BAAuC,CAA3C;AACA,MAAIC,6BAAqC,CAAzC;;AAGA,MAAMC,wBAAqC,IAAIC,GAAJ,EAA3C;;AAEA,MAAMC,iBAAiB,SAAjBA,cAAiB,CAACC,QAAD,EAAsB;AAC3C,WAAUnB,UAAV,SAAwBmB,QAAxB;AACD,GAFD;;AAIA,MAAMC,cAAc,SAAdA,WAAc,CAACC,KAAD,EAAgBC,OAAhB,EAA2C;AAC7D,QAAMC,SAASD,UAAarB,YAAb,SAAkCD,UAAlC,MAAf;AACA,QAAMwB,SAASF,yBAAuBA,OAAvB,GAAmC,EAAlD;AACA,gBAAUC,MAAV,GAAmBF,KAAnB,GAA2BG,MAA3B;AACD,GAJD;;AAMA,MAAMC,YAAY,SAAZA,SAAY,CAACN,QAAD,EAAsB;AACtChB,gBAAYC,IAAZ,CAAiBc,eAAeC,QAAf,CAAjB;AACD,GAFD;;AAIA,MAAMO,YAAY,SAAZA,SAAY,CAACP,QAAD,EAAsB;AACtChB,gBAAYE,UAAZ,CAAuBa,eAAeC,QAAf,CAAvB;AACD,GAFD;;AAIA,MAAMQ,UAAU,SAAVA,OAAU,CAACN,KAAD,EAAgBF,QAAhB,EAAkCG,OAAlC,EAA6D;AAC3E,QAAMM,oBAAoBV,eAAeC,QAAf,CAA1B;AACA,QAAMU,iBAAiBT,YAAYC,KAAZ,EAAmBC,OAAnB,CAAvB;AACA,QAAI;AACFnB,kBAAYG,OAAZ,CAAoBuB,cAApB,EAAoCD,iBAApC;AACD,KAFD,CAEE,OAAOE,GAAP,EAAY,CAIb;;AAED3B,gBAAYE,UAAZ,CAAuBuB,iBAAvB;AACAzB,gBAAYI,aAAZ,CAA0BsB,cAA1B;AACD,GAbD;;AAeA,MAAME,mBAAmB,SAAnBA,gBAAmB,CAACV,KAAD,EAAgBW,OAAhB,EAAoC;AAC3D,WAAUX,KAAV,WAAqBW,OAArB;AACD,GAFD;;AAIA,MAAMC,gBAAgB,SAAhBA,aAAgB,CACpBC,aADoB,EAEpBC,SAFoB,EAGpBC,KAHoB,EAIjB;AACH,QAAIA,UAAU,IAAd,EAAoB;AAElB,aAAUF,aAAV,WAA4BC,YAAY,QAAZ,GAAuB,OAAnD;AACD,KAHD,MAGO;AAEL,aAAUD,aAAV,SAA2BE,KAA3B;AACD;AACF,GAZD;;AAcA,MAAMC,iBAAiB,SAAjBA,cAAiB,CACrBC,KADqB,EAErBF,KAFqB,EAGT;AACZ,QAAMF,gBAAgBnC,iBAAiBuC,KAAjB,KAA2B,SAAjD;AACA,QAAMN,UAAYM,MAAMC,QAAxB;AACA,QAAMJ,YAAYG,MAAME,SAAN,KAAoB,IAAtC;AACA,QAAMnB,QAAQY,cAAcC,aAAd,EAA6BC,SAA7B,EAAwCC,KAAxC,CAAd;;AAEA,QAAIzB,gBAAgBK,sBAAsByB,GAAtB,CAA0BpB,KAA1B,CAApB,EAAsD;AAIpD,aAAO,KAAP;AACD;AACDL,0BAAsB0B,GAAtB,CAA0BrB,KAA1B;;AAEA,QAAMF,WAAWY,iBAAiBV,KAAjB,EAAwBW,OAAxB,CAAjB;AACAP,cAAUN,QAAV;AACA,WAAO,IAAP;AACD,GApBD;;AAsBA,MAAMwB,iBAAiB,SAAjBA,cAAiB,CAACL,KAAD,EAAeF,KAAf,EAAkD;AACvE,QAAMF,gBAAgBnC,iBAAiBuC,KAAjB,KAA2B,SAAjD;AACA,QAAMN,UAAYM,MAAMC,QAAxB;AACA,QAAMJ,YAAYG,MAAME,SAAN,KAAoB,IAAtC;AACA,QAAMnB,QAAQY,cAAcC,aAAd,EAA6BC,SAA7B,EAAwCC,KAAxC,CAAd;AACA,QAAMjB,WAAWY,iBAAiBV,KAAjB,EAAwBW,OAAxB,CAAjB;AACAN,cAAUP,QAAV;AACD,GAPD;;AASA,MAAMyB,eAAe,SAAfA,YAAe,CACnBN,KADmB,EAEnBF,KAFmB,EAGnBd,OAHmB,EAIhB;AACH,QAAMY,gBAAgBnC,iBAAiBuC,KAAjB,KAA2B,SAAjD;AACA,QAAMN,UAAYM,MAAMC,QAAxB;AACA,QAAMJ,YAAYG,MAAME,SAAN,KAAoB,IAAtC;AACA,QAAMnB,QAAQY,cAAcC,aAAd,EAA6BC,SAA7B,EAAwCC,KAAxC,CAAd;AACA,QAAMjB,WAAWY,iBAAiBV,KAAjB,EAAwBW,OAAxB,CAAjB;AACAL,YAAQN,KAAR,EAAeF,QAAf,EAAyBG,OAAzB;AACD,GAXD;;AAaA,MAAMuB,oBAAoB,SAApBA,iBAAoB,CAACP,KAAD,EAA2B;AAGnD,YAAQA,MAAMQ,GAAd;AACE,WAAKrD,QAAL;AACA,WAAKC,aAAL;AACA,WAAKC,QAAL;AACA,WAAKC,UAAL;AACA,WAAKC,cAAL;AACA,WAAKC,QAAL;AACE,eAAO,IAAP;AACF;AACE,eAAO,KAAP;AATJ;AAWD,GAdD;;AAgBA,MAAMiD,+BAA+B,SAA/BA,4BAA+B,GAAM;AACzC,QAAItC,iBAAiB,IAAjB,IAAyBC,sBAAsB,IAAnD,EAAyD;AACvDiC,qBAAejC,iBAAf,EAAkCD,YAAlC;AACD;AACDC,wBAAoB,IAApB;AACAD,mBAAe,IAAf;AACAI,uCAAmC,KAAnC;AACD,GAPD;;AASA,MAAMmC,cAAc,SAAdA,WAAc,GAAM;AAGxB,QAAIV,QAAQ9B,YAAZ;AACA,WAAO8B,KAAP,EAAc;AACZ,UAAIA,MAAMW,uBAAV,EAAmC;AACjCL,qBAAaN,KAAb,EAAoB,IAApB,EAA0B,IAA1B;AACD;AACDA,cAAQA,MAAMY,MAAd;AACD;AACF,GAVD;;AAYA,MAAMC,0BAA0B,SAA1BA,uBAA0B,CAACb,KAAD,EAAkB;AAChD,QAAIA,MAAMY,MAAN,KAAiB,IAArB,EAA2B;AACzBC,8BAAwBb,MAAMY,MAA9B;AACD;AACD,QAAIZ,MAAMW,uBAAV,EAAmC;AACjCZ,qBAAeC,KAAf,EAAsB,IAAtB;AACD;AACF,GAPD;;AASA,MAAMc,eAAe,SAAfA,YAAe,GAAM;AAEzB,QAAI5C,iBAAiB,IAArB,EAA2B;AACzB2C,8BAAwB3C,YAAxB;AACD;AACF,GALD;;AAOAlB,wBAAsB;AACpB+D,gBADoB,0BACC;AACnBtC;AACD,KAHmB;AAKpBuC,wBALoB,kCAKS;AAC3B,UAAI3C,YAAJ,EAAkB;AAChBC,4CAAoC,IAApC;AACD;AACD,UACEH,iBAAiB,IAAjB,IACAA,iBAAiB,oBADjB,IAEAA,iBAAiB,2BAHnB,EAIE;AACAI,2CAAmC,IAAnC;AACD;AACF,KAhBmB;AAkBpB0C,kBAlBoB,0BAkBLjB,KAlBK,EAkBe;AACjC,UAAI,CAACpC,kBAAD,IAAuB2C,kBAAkBP,KAAlB,CAA3B,EAAqD;AACnD;AACD;;AAED9B,qBAAe8B,KAAf;AACA,UAAI,CAACD,eAAeC,KAAf,EAAsB,IAAtB,CAAL,EAAkC;AAChC;AACD;AACDA,YAAMW,uBAAN,GAAgC,IAAhC;AACD,KA5BmB;AA8BpBO,mBA9BoB,2BA8BJlB,KA9BI,EA8BgB;AAClC,UAAI,CAACpC,kBAAD,IAAuB2C,kBAAkBP,KAAlB,CAA3B,EAAqD;AACnD;AACD;;AAGDA,YAAMW,uBAAN,GAAgC,KAAhC;AACAN,qBAAeL,KAAf,EAAsB,IAAtB;AACD,KAtCmB;AAwCpBmB,iBAxCoB,yBAwCNnB,KAxCM,EAwCc;AAChC,UAAI,CAACpC,kBAAD,IAAuB2C,kBAAkBP,KAAlB,CAA3B,EAAqD;AACnD;AACD;;AAED9B,qBAAe8B,MAAMY,MAArB;AACA,UAAI,CAACZ,MAAMW,uBAAX,EAAoC;AAClC;AACD;AACDX,YAAMW,uBAAN,GAAgC,KAAhC;AACAL,mBAAaN,KAAb,EAAoB,IAApB,EAA0B,IAA1B;AACD,KAnDmB;AAqDpBoB,mBArDoB,2BAqDJpB,KArDI,EAqDUF,KArDV,EAqDyC;AAC3D,UAAI,CAAClC,kBAAL,EAAyB;AACvB;AACD;AACD6C;AACA,UAAI,CAACV,eAAeC,KAAf,EAAsBF,KAAtB,CAAL,EAAmC;AACjC;AACD;AACD1B,0BAAoB4B,KAApB;AACA7B,qBAAe2B,KAAf;AACD,KA/DmB;AAiEpBuB,kBAjEoB,4BAiEG;AACrB,UAAI,CAACzD,kBAAL,EAAyB;AACvB;AACD;AACD,UAAIO,iBAAiB,IAAjB,IAAyBC,sBAAsB,IAAnD,EAAyD;AACvD,YAAMY,UAAUT,mCACZ,8BADY,GAEZ,IAFJ;AAGA+B,qBAAalC,iBAAb,EAAgCD,YAAhC,EAA8Ca,OAA9C;AACD;AACDb,qBAAe,IAAf;AACAC,0BAAoB,IAApB;AACD,KA7EmB;AA+EpBkD,sBA/EoB,gCA+EO;AACzB,UAAI,CAAC1D,kBAAL,EAAyB;AACvB;AACD;AACDY,qCAA+B,CAA/B;;AAGAW,gBAAU,6BAAV;;AAEA2B;AACD,KAzFmB;AA2FpBS,qBA3FoB,+BA2FM;AACxB,UAAI,CAAC3D,kBAAL,EAAyB;AACvB;AACD;AACD,UAAMoB,UAAUR,+BAA+B,CAA/B,GACZ,8BADY,GAEZ,IAFJ;AAGAA,qCAA+B,CAA/B;;AAEAkC;AACArB,cACE,6BADF,EAEE,6BAFF,EAGEL,OAHF;AAKD,KA1GmB;AA4GpBwC,oBA5GoB,8BA4GK;AACvB,UAAI,CAAC5D,kBAAL,EAAyB;AACvB;AACD;AACDS,qBAAe,IAAf;AACAC,0CAAoC,KAApC;AACAI,4BAAsB+C,KAAtB;AACAtC,gBAAU,sBAAV;AACD,KApHmB;AAsHpBuC,mBAtHoB,6BAsHI;AACtB,UAAI,CAAC9D,kBAAL,EAAyB;AACvB;AACD;;AAED,UAAIoB,UAAU,IAAd;AACA,UAAIV,iCAAJ,EAAuC;AACrCU,kBAAU,6CAAV;AACD,OAFD,MAEO,IAAIR,+BAA+B,CAAnC,EAAsC;AAC3CQ,kBAAU,gDAAV;AACD;AACDV,0CAAoC,KAApC;AACAE;AACAH,qBAAe,KAAf;AACAK,4BAAsB+C,KAAtB;;AAEApC,cAAQ,sBAAR,EAAgC,sBAAhC,EAAwDL,OAAxD;AACD,KAvImB;AAyIpB2C,+BAzIoB,yCAyIgB;AAClC,UAAI,CAAC/D,kBAAL,EAAyB;AACvB;AACD;AACDa,mCAA6B,CAA7B;AACAU,gBAAU,2BAAV;AACD,KA/ImB;AAiJpByC,8BAjJoB,wCAiJe;AACjC,UAAI,CAAChE,kBAAL,EAAyB;AACvB;AACD;AACD,UAAMiE,QAAQpD,0BAAd;AACAA,mCAA6B,CAA7B;AACAY,6CAC+BwC,KAD/B,cAEE,2BAFF,EAGE,IAHF;AAKD,KA5JmB;AA8JpBC,8BA9JoB,wCA8Je;AACjC,UAAI,CAAClE,kBAAL,EAAyB;AACvB;AACD;AACDa,mCAA6B,CAA7B;AACAU,gBAAU,6BAAV;AACD,KApKmB;AAsKpB4C,6BAtKoB,uCAsKc;AAChC,UAAI,CAACnE,kBAAL,EAAyB;AACvB;AACD;AACD,UAAMiE,QAAQpD,0BAAd;AACAA,mCAA6B,CAA7B;AACAY,+CACiCwC,KADjC,cAEE,6BAFF,EAGE,IAHF;AAKD;AAjLmB,GAAtB;AAmLD;;AAEDG,OAAOC,OAAP,GAAiBjF,mBAAjB","sourcesContent":["/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDebugFiberPerf\n * @flow\n */\n\nimport type {Fiber} from 'ReactFiber';\n\ntype MeasurementPhase =\n  | 'componentWillMount'\n  | 'componentWillUnmount'\n  | 'componentWillReceiveProps'\n  | 'shouldComponentUpdate'\n  | 'componentWillUpdate'\n  | 'componentDidUpdate'\n  | 'componentDidMount'\n  | 'getChildContext';\n\n// Trust the developer to only use this with a __DEV__ check\nlet ReactDebugFiberPerf = ((null: any): typeof ReactDebugFiberPerf);\n\nif (__DEV__) {\n  const {\n    HostRoot,\n    HostComponent,\n    HostText,\n    HostPortal,\n    YieldComponent,\n    Fragment,\n  } = require('ReactTypeOfWork');\n\n  const getComponentName = require('getComponentName');\n\n  // Prefix measurements so that it's possible to filter them.\n  // Longer prefixes are hard to read in DevTools.\n  const reactEmoji = '\\u269B';\n  const warningEmoji = '\\u26D4';\n  const supportsUserTiming = typeof performance !== 'undefined' &&\n    typeof performance.mark === 'function' &&\n    typeof performance.clearMarks === 'function' &&\n    typeof performance.measure === 'function' &&\n    typeof performance.clearMeasures === 'function';\n\n  // Keep track of current fiber so that we know the path to unwind on pause.\n  // TODO: this looks the same as nextUnitOfWork in scheduler. Can we unify them?\n  let currentFiber: Fiber | null = null;\n  // If we're in the middle of user code, which fiber and method is it?\n  // Reusing `currentFiber` would be confusing for this because user code fiber\n  // can change during commit phase too, but we don't need to unwind it (since\n  // lifecycles in the commit phase don't resemble a tree).\n  let currentPhase: MeasurementPhase | null = null;\n  let currentPhaseFiber: Fiber | null = null;\n  // Did lifecycle hook schedule an update? This is often a performance problem,\n  // so we will keep track of it, and include it in the report.\n  // Track commits caused by cascading updates.\n  let isCommitting: boolean = false;\n  let hasScheduledUpdateInCurrentCommit: boolean = false;\n  let hasScheduledUpdateInCurrentPhase: boolean = false;\n  let commitCountInCurrentWorkLoop: number = 0;\n  let effectCountInCurrentCommit: number = 0;\n  // During commits, we only show a measurement once per method name\n  // to avoid stretch the commit phase with measurement overhead.\n  const labelsInCurrentCommit: Set<string> = new Set();\n\n  const formatMarkName = (markName: string) => {\n    return `${reactEmoji} ${markName}`;\n  };\n\n  const formatLabel = (label: string, warning: string | null) => {\n    const prefix = warning ? `${warningEmoji} ` : `${reactEmoji} `;\n    const suffix = warning ? ` Warning: ${warning}` : '';\n    return `${prefix}${label}${suffix}`;\n  };\n\n  const beginMark = (markName: string) => {\n    performance.mark(formatMarkName(markName));\n  };\n\n  const clearMark = (markName: string) => {\n    performance.clearMarks(formatMarkName(markName));\n  };\n\n  const endMark = (label: string, markName: string, warning: string | null) => {\n    const formattedMarkName = formatMarkName(markName);\n    const formattedLabel = formatLabel(label, warning);\n    try {\n      performance.measure(formattedLabel, formattedMarkName);\n    } catch (err) {\n      // If previous mark was missing for some reason, this will throw.\n      // This could only happen if React crashed in an unexpected place earlier.\n      // Don't pile on with more errors.\n    }\n    // Clear marks immediately to avoid growing buffer.\n    performance.clearMarks(formattedMarkName);\n    performance.clearMeasures(formattedLabel);\n  };\n\n  const getFiberMarkName = (label: string, debugID: number) => {\n    return `${label} (#${debugID})`;\n  };\n\n  const getFiberLabel = (\n    componentName: string,\n    isMounted: boolean,\n    phase: MeasurementPhase | null,\n  ) => {\n    if (phase === null) {\n      // These are composite component total time measurements.\n      return `${componentName} [${isMounted ? 'update' : 'mount'}]`;\n    } else {\n      // Composite component methods.\n      return `${componentName}.${phase}`;\n    }\n  };\n\n  const beginFiberMark = (\n    fiber: Fiber,\n    phase: MeasurementPhase | null,\n  ): boolean => {\n    const componentName = getComponentName(fiber) || 'Unknown';\n    const debugID = ((fiber._debugID: any): number);\n    const isMounted = fiber.alternate !== null;\n    const label = getFiberLabel(componentName, isMounted, phase);\n\n    if (isCommitting && labelsInCurrentCommit.has(label)) {\n      // During the commit phase, we don't show duplicate labels because\n      // there is a fixed overhead for every measurement, and we don't\n      // want to stretch the commit phase beyond necessary.\n      return false;\n    }\n    labelsInCurrentCommit.add(label);\n\n    const markName = getFiberMarkName(label, debugID);\n    beginMark(markName);\n    return true;\n  };\n\n  const clearFiberMark = (fiber: Fiber, phase: MeasurementPhase | null) => {\n    const componentName = getComponentName(fiber) || 'Unknown';\n    const debugID = ((fiber._debugID: any): number);\n    const isMounted = fiber.alternate !== null;\n    const label = getFiberLabel(componentName, isMounted, phase);\n    const markName = getFiberMarkName(label, debugID);\n    clearMark(markName);\n  };\n\n  const endFiberMark = (\n    fiber: Fiber,\n    phase: MeasurementPhase | null,\n    warning: string | null,\n  ) => {\n    const componentName = getComponentName(fiber) || 'Unknown';\n    const debugID = ((fiber._debugID: any): number);\n    const isMounted = fiber.alternate !== null;\n    const label = getFiberLabel(componentName, isMounted, phase);\n    const markName = getFiberMarkName(label, debugID);\n    endMark(label, markName, warning);\n  };\n\n  const shouldIgnoreFiber = (fiber: Fiber): boolean => {\n    // Host components should be skipped in the timeline.\n    // We could check typeof fiber.type, but does this work with RN?\n    switch (fiber.tag) {\n      case HostRoot:\n      case HostComponent:\n      case HostText:\n      case HostPortal:\n      case YieldComponent:\n      case Fragment:\n        return true;\n      default:\n        return false;\n    }\n  };\n\n  const clearPendingPhaseMeasurement = () => {\n    if (currentPhase !== null && currentPhaseFiber !== null) {\n      clearFiberMark(currentPhaseFiber, currentPhase);\n    }\n    currentPhaseFiber = null;\n    currentPhase = null;\n    hasScheduledUpdateInCurrentPhase = false;\n  };\n\n  const pauseTimers = () => {\n    // Stops all currently active measurements so that they can be resumed\n    // if we continue in a later deferred loop from the same unit of work.\n    let fiber = currentFiber;\n    while (fiber) {\n      if (fiber._debugIsCurrentlyTiming) {\n        endFiberMark(fiber, null, null);\n      }\n      fiber = fiber.return;\n    }\n  };\n\n  const resumeTimersRecursively = (fiber: Fiber) => {\n    if (fiber.return !== null) {\n      resumeTimersRecursively(fiber.return);\n    }\n    if (fiber._debugIsCurrentlyTiming) {\n      beginFiberMark(fiber, null);\n    }\n  };\n\n  const resumeTimers = () => {\n    // Resumes all measurements that were active during the last deferred loop.\n    if (currentFiber !== null) {\n      resumeTimersRecursively(currentFiber);\n    }\n  };\n\n  ReactDebugFiberPerf = {\n    recordEffect(): void {\n      effectCountInCurrentCommit++;\n    },\n\n    recordScheduleUpdate(): void {\n      if (isCommitting) {\n        hasScheduledUpdateInCurrentCommit = true;\n      }\n      if (\n        currentPhase !== null &&\n        currentPhase !== 'componentWillMount' &&\n        currentPhase !== 'componentWillReceiveProps'\n      ) {\n        hasScheduledUpdateInCurrentPhase = true;\n      }\n    },\n\n    startWorkTimer(fiber: Fiber): void {\n      if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {\n        return;\n      }\n      // If we pause, this is the fiber to unwind from.\n      currentFiber = fiber;\n      if (!beginFiberMark(fiber, null)) {\n        return;\n      }\n      fiber._debugIsCurrentlyTiming = true;\n    },\n\n    cancelWorkTimer(fiber: Fiber): void {\n      if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {\n        return;\n      }\n      // Remember we shouldn't complete measurement for this fiber.\n      // Otherwise flamechart will be deep even for small updates.\n      fiber._debugIsCurrentlyTiming = false;\n      clearFiberMark(fiber, null);\n    },\n\n    stopWorkTimer(fiber: Fiber): void {\n      if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {\n        return;\n      }\n      // If we pause, its parent is the fiber to unwind from.\n      currentFiber = fiber.return;\n      if (!fiber._debugIsCurrentlyTiming) {\n        return;\n      }\n      fiber._debugIsCurrentlyTiming = false;\n      endFiberMark(fiber, null, null);\n    },\n\n    startPhaseTimer(fiber: Fiber, phase: MeasurementPhase): void {\n      if (!supportsUserTiming) {\n        return;\n      }\n      clearPendingPhaseMeasurement();\n      if (!beginFiberMark(fiber, phase)) {\n        return;\n      }\n      currentPhaseFiber = fiber;\n      currentPhase = phase;\n    },\n\n    stopPhaseTimer(): void {\n      if (!supportsUserTiming) {\n        return;\n      }\n      if (currentPhase !== null && currentPhaseFiber !== null) {\n        const warning = hasScheduledUpdateInCurrentPhase\n          ? 'Scheduled a cascading update'\n          : null;\n        endFiberMark(currentPhaseFiber, currentPhase, warning);\n      }\n      currentPhase = null;\n      currentPhaseFiber = null;\n    },\n\n    startWorkLoopTimer(): void {\n      if (!supportsUserTiming) {\n        return;\n      }\n      commitCountInCurrentWorkLoop = 0;\n      // This is top level call.\n      // Any other measurements are performed within.\n      beginMark('(React Tree Reconciliation)');\n      // Resume any measurements that were in progress during the last loop.\n      resumeTimers();\n    },\n\n    stopWorkLoopTimer(): void {\n      if (!supportsUserTiming) {\n        return;\n      }\n      const warning = commitCountInCurrentWorkLoop > 1\n        ? 'There were cascading updates'\n        : null;\n      commitCountInCurrentWorkLoop = 0;\n      // Pause any measurements until the next loop.\n      pauseTimers();\n      endMark(\n        '(React Tree Reconciliation)',\n        '(React Tree Reconciliation)',\n        warning,\n      );\n    },\n\n    startCommitTimer(): void {\n      if (!supportsUserTiming) {\n        return;\n      }\n      isCommitting = true;\n      hasScheduledUpdateInCurrentCommit = false;\n      labelsInCurrentCommit.clear();\n      beginMark('(Committing Changes)');\n    },\n\n    stopCommitTimer(): void {\n      if (!supportsUserTiming) {\n        return;\n      }\n\n      let warning = null;\n      if (hasScheduledUpdateInCurrentCommit) {\n        warning = 'Lifecycle hook scheduled a cascading update';\n      } else if (commitCountInCurrentWorkLoop > 0) {\n        warning = 'Caused by a cascading update in earlier commit';\n      }\n      hasScheduledUpdateInCurrentCommit = false;\n      commitCountInCurrentWorkLoop++;\n      isCommitting = false;\n      labelsInCurrentCommit.clear();\n\n      endMark('(Committing Changes)', '(Committing Changes)', warning);\n    },\n\n    startCommitHostEffectsTimer(): void {\n      if (!supportsUserTiming) {\n        return;\n      }\n      effectCountInCurrentCommit = 0;\n      beginMark('(Committing Host Effects)');\n    },\n\n    stopCommitHostEffectsTimer(): void {\n      if (!supportsUserTiming) {\n        return;\n      }\n      const count = effectCountInCurrentCommit;\n      effectCountInCurrentCommit = 0;\n      endMark(\n        `(Committing Host Effects: ${count} Total)`,\n        '(Committing Host Effects)',\n        null,\n      );\n    },\n\n    startCommitLifeCyclesTimer(): void {\n      if (!supportsUserTiming) {\n        return;\n      }\n      effectCountInCurrentCommit = 0;\n      beginMark('(Calling Lifecycle Methods)');\n    },\n\n    stopCommitLifeCyclesTimer(): void {\n      if (!supportsUserTiming) {\n        return;\n      }\n      const count = effectCountInCurrentCommit;\n      effectCountInCurrentCommit = 0;\n      endMark(\n        `(Calling Lifecycle Methods: ${count} Total)`,\n        '(Calling Lifecycle Methods)',\n        null,\n      );\n    },\n  };\n}\n\nmodule.exports = ReactDebugFiberPerf;\n"]}]