["404f5151c29c801d98909bd83f8fe2f9862438d4","ae66d0ffa2d371998a4d1655603b55a5e5bfde23",["react-native","./NavigationAbstractPanResponder","./NavigationCardStackPanResponder","clamp"],[39,110,193,252],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native-experimental-navigation/NavigationPagerPanResponder.js"],"names":["Animated","require","NavigationAbstractPanResponder","NavigationCardStackPanResponder","clamp","ANIMATION_DURATION","DISTANCE_THRESHOLD","POSITION_THRESHOLD","RESPOND_THRESHOLD","Directions","Actions","JUMP_BACK","type","JUMP_FORWARD","NavigationPagerPanResponder","direction","props","_isResponding","_isVertical","VERTICAL","_props","_startValue","event","gesture","navigationState","index","scene","layout","isVertical","axis","distance","height","__getValue","width","Math","abs","position","stopAnimation","value","scenes","prevIndex","max","nextIndex","min","length","setValue","onNavigate","_reset","timing","toValue","duration","start","createPanHandlers","responder","panHandlers","forHorizontal","HORIZONTAL","module","exports"],"mappings":";AAYA;;AAEA,IAAMA,WAAWC,QAAQ,cAAR,EAAwBD,QAAzC;AACA,IAAME,iCAAiCD,QAAQ,kCAAR,CAAvC;AACA,IAAME,kCAAkCF,QAAQ,mCAAR,CAAxC;;AAEA,IAAMG,QAAQH,QAAQ,OAAR,CAAd;;IAiBEI,kB,GAKEF,+B,CALFE,kB;IACAC,kB,GAIEH,+B,CAJFG,kB;IACAC,kB,GAGEJ,+B,CAHFI,kB;IACAC,iB,GAEEL,+B,CAFFK,iB;IACAC,U,GACEN,+B,CADFM,U;;AAMF,IAAMC,UAAU;AACdC,aAAW,EAACC,MAAM,WAAP,EADG;AAEdC,gBAAc,EAACD,MAAM,cAAP;AAFA,CAAhB;;IAmBME,2B;;;AAOJ,uCACEC,SADF,EAEEC,KAFF,EAGE;AAAA;;AAAA;;AAEA,UAAKC,aAAL,GAAqB,KAArB;AACA,UAAKC,WAAL,GAAmBH,cAAcN,WAAWU,QAA5C;AACA,UAAKC,MAAL,GAAcJ,KAAd;AACA,UAAKK,WAAL,GAAmB,CAAnB;AALA;AAMD;;;;gDAE2BC,K,EAAYC,O,EAAuB;AAC7D,UAAMP,QAAQ,KAAKI,MAAnB;;AAEA,UAAIJ,MAAMQ,eAAN,CAAsBC,KAAtB,KAAgCT,MAAMU,KAAN,CAAYD,KAAhD,EAAuD;AACrD,eAAO,KAAP;AACD;;AAED,UAAME,SAASX,MAAMW,MAArB;AACA,UAAMC,aAAa,KAAKV,WAAxB;AACA,UAAMW,OAAOD,aAAa,IAAb,GAAoB,IAAjC;AACA,UAAMH,QAAQT,MAAMQ,eAAN,CAAsBC,KAApC;AACA,UAAMK,WAAWF,aACfD,OAAOI,MAAP,CAAcC,UAAd,EADe,GAEfL,OAAOM,KAAP,CAAaD,UAAb,EAFF;;AAIA,aACEE,KAAKC,GAAL,CAASZ,QAAQM,IAAR,CAAT,IAA0BrB,iBAA1B,IACAsB,WAAW,CADX,IAEAL,QAAQ,CAHV;AAKD;;;0CAE2B;AAAA;;AAC1B,WAAKR,aAAL,GAAqB,KAArB;AACA,WAAKG,MAAL,CAAYgB,QAAZ,CAAqBC,aAArB,CAAmC,UAACC,KAAD,EAAmB;AACpD,eAAKrB,aAAL,GAAqB,IAArB;AACA,eAAKI,WAAL,GAAmBiB,KAAnB;AACD,OAHD;AAID;;;uCAEkBhB,K,EAAYC,O,EAAoB;AACjD,UAAI,CAAC,KAAKN,aAAV,EAAyB;AACvB;AACD;;AAHgD,mBAU7C,KAAKG,MAVwC;AAAA,UAM/CO,MAN+C,UAM/CA,MAN+C;AAAA,UAO/CH,eAP+C,UAO/CA,eAP+C;AAAA,UAQ/CY,QAR+C,UAQ/CA,QAR+C;AAAA,UAS/CG,MAT+C,UAS/CA,MAT+C;;;AAYjD,UAAMX,aAAa,KAAKV,WAAxB;AACA,UAAMW,OAAOD,aAAa,IAAb,GAAoB,IAAjC;AACA,UAAMH,QAAQD,gBAAgBC,KAA9B;AACA,UAAMK,WAAWF,aACfD,OAAOI,MAAP,CAAcC,UAAd,EADe,GAEfL,OAAOM,KAAP,CAAaD,UAAb,EAFF;;AAIA,UAAMQ,YAAYN,KAAKO,GAAL,CAChB,CADgB,EAEhBhB,QAAQ,CAFQ,CAAlB;;AAKA,UAAMiB,YAAYR,KAAKS,GAAL,CAChBlB,QAAQ,CADQ,EAEhBc,OAAOK,MAAP,GAAgB,CAFA,CAAlB;;AAKA,UAAMN,QAAQlC,MACZoC,SADY,EAEZ,KAAKnB,WAAL,GAAoBE,QAAQM,IAAR,IAAgBC,QAFxB,EAGZY,SAHY,CAAd;;AAMAN,eAASS,QAAT,CAAkBP,KAAlB;AACD;;;0CAEqBhB,K,EAAYC,O,EAAoB;AAAA;;AACpD,UAAI,CAAC,KAAKN,aAAV,EAAyB;AACvB;AACD;;AAED,WAAKA,aAAL,GAAqB,KAArB;;AALoD,oBAWhD,KAAKG,MAX2C;AAAA,UAQlDI,eARkD,WAQlDA,eARkD;AAAA,UASlDsB,UATkD,WASlDA,UATkD;AAAA,UAUlDV,QAVkD,WAUlDA,QAVkD;;;AAapD,UAAMR,aAAa,KAAKV,WAAxB;AACA,UAAMW,OAAOD,aAAa,IAAb,GAAoB,IAAjC;AACA,UAAMH,QAAQD,gBAAgBC,KAA9B;AACA,UAAMK,WAAWP,QAAQM,IAAR,CAAjB;;AAEAO,eAASC,aAAT,CAAuB,UAACC,KAAD,EAAmB;AACxC,eAAKS,MAAL;AACA,YACEjB,WAAWxB,kBAAX,IACAgC,SAASb,QAAQlB,kBAFnB,EAGE;AACAuC,qBAAWpC,QAAQC,SAAnB;AACA;AACD;;AAED,YACEmB,WAAW,CAACxB,kBAAZ,IACAgC,SAASb,QAASlB,kBAFpB,EAGE;AACAuC,qBAAWpC,QAAQG,YAAnB;AACD;AACF,OAhBD;AAiBD;;;8CAE+B;AAC9B,WAAKI,aAAL,GAAqB,KAArB;AACA,WAAK8B,MAAL;AACD;;;6BAEc;AACb,UAAM/B,QAAQ,KAAKI,MAAnB;AACApB,eAASgD,MAAT,CACEhC,MAAMoB,QADR,EAEE;AACEa,iBAASjC,MAAMQ,eAAN,CAAsBC,KADjC;AAEEyB,kBAAU7C;AAFZ,OAFF,EAME8C,KANF;AAOD;;;EAzIuCjD,8B;;AA4I1C,SAASkD,iBAAT,CACErC,SADF,EAEEC,KAFF,EAG4B;AAC1B,MAAMqC,YAAY,IAAIvC,2BAAJ,CAAgCC,SAAhC,EAA2CC,KAA3C,CAAlB;AACA,SAAOqC,UAAUC,WAAjB;AACD;;AAED,SAASC,aAAT,CACEvC,KADF,EAE4B;AAC1B,SAAOoC,kBAAkB3C,WAAW+C,UAA7B,EAAyCxC,KAAzC,CAAP;AACD;;AAEDyC,OAAOC,OAAP,GAAiB;AACfhD,kBADe;AAEf6C;AAFe,CAAjB","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule NavigationPagerPanResponder\n * @flow\n * @typechecks\n */\n'use strict';\n\nconst Animated = require('react-native').Animated;\nconst NavigationAbstractPanResponder = require('./NavigationAbstractPanResponder');\nconst NavigationCardStackPanResponder = require('./NavigationCardStackPanResponder');\n\nconst clamp = require('clamp');\n\nimport type {\n  NavigationPanPanHandlers,\n  NavigationSceneRendererProps,\n} from 'NavigationTypeDefinition';\n\nimport type {\n  NavigationGestureDirection,\n} from 'NavigationCardStackPanResponder';\n\n\n\n/**\n * Primitive gesture directions.\n */\nconst {\n  ANIMATION_DURATION,\n  DISTANCE_THRESHOLD,\n  POSITION_THRESHOLD,\n  RESPOND_THRESHOLD,\n  Directions,\n} = NavigationCardStackPanResponder;\n\n/**\n * Primitive gesture actions.\n */\nconst Actions = {\n  JUMP_BACK: {type: 'jump_back'},\n  JUMP_FORWARD: {type: 'jump_forward'},\n};\n\n/**\n * Pan responder that handles gesture for a card in the cards list.\n *\n * +-------------+-------------+-------------+\n * |             |             |             |\n * |             |             |             |\n * |             |             |             |\n * |    Next     |   Focused   |  Previous   |\n * |    Card     |    Card     |    Card     |\n * |             |             |             |\n * |             |             |             |\n * |             |             |             |\n * +-------------+-------------+-------------+\n */\nclass NavigationPagerPanResponder extends NavigationAbstractPanResponder {\n\n  _isResponding: boolean;\n  _isVertical: boolean;\n  _props: NavigationSceneRendererProps;\n  _startValue: number;\n\n  constructor(\n    direction: NavigationGestureDirection,\n    props: NavigationSceneRendererProps,\n  ) {\n    super();\n    this._isResponding = false;\n    this._isVertical = direction === Directions.VERTICAL;\n    this._props = props;\n    this._startValue = 0;\n  }\n\n  onMoveShouldSetPanResponder(event: any, gesture: any): boolean {\n    const props = this._props;\n\n    if (props.navigationState.index !== props.scene.index) {\n      return false;\n    }\n\n    const layout = props.layout;\n    const isVertical = this._isVertical;\n    const axis = isVertical ? 'dy' : 'dx';\n    const index = props.navigationState.index;\n    const distance = isVertical ?\n      layout.height.__getValue() :\n      layout.width.__getValue();\n\n    return (\n      Math.abs(gesture[axis]) > RESPOND_THRESHOLD &&\n      distance > 0 &&\n      index > 0\n    );\n  }\n\n  onPanResponderGrant(): void {\n    this._isResponding = false;\n    this._props.position.stopAnimation((value: number) => {\n      this._isResponding = true;\n      this._startValue = value;\n    });\n  }\n\n  onPanResponderMove(event: any, gesture: any): void {\n    if (!this._isResponding) {\n      return;\n    }\n\n    const {\n      layout,\n      navigationState,\n      position,\n      scenes,\n    } = this._props;\n\n    const isVertical = this._isVertical;\n    const axis = isVertical ? 'dy' : 'dx';\n    const index = navigationState.index;\n    const distance = isVertical ?\n      layout.height.__getValue() :\n      layout.width.__getValue();\n\n    const prevIndex = Math.max(\n      0,\n      index - 1,\n    );\n\n    const nextIndex = Math.min(\n      index + 1,\n      scenes.length - 1,\n    );\n\n    const value = clamp(\n      prevIndex,\n      this._startValue - (gesture[axis] / distance),\n      nextIndex,\n    );\n\n    position.setValue(value);\n  }\n\n  onPanResponderRelease(event: any, gesture: any): void {\n    if (!this._isResponding) {\n      return;\n    }\n\n    this._isResponding = false;\n\n    const {\n      navigationState,\n      onNavigate,\n      position,\n    } = this._props;\n\n    const isVertical = this._isVertical;\n    const axis = isVertical ? 'dy' : 'dx';\n    const index = navigationState.index;\n    const distance = gesture[axis];\n\n    position.stopAnimation((value: number) => {\n      this._reset();\n      if (\n        distance > DISTANCE_THRESHOLD  ||\n        value <= index - POSITION_THRESHOLD\n      ) {\n        onNavigate(Actions.JUMP_BACK);\n        return;\n      }\n\n      if (\n        distance < -DISTANCE_THRESHOLD ||\n        value >= index  + POSITION_THRESHOLD\n      ) {\n        onNavigate(Actions.JUMP_FORWARD);\n      }\n    });\n  }\n\n  onPanResponderTerminate(): void {\n    this._isResponding = false;\n    this._reset();\n  }\n\n  _reset(): void {\n    const props = this._props;\n    Animated.timing(\n      props.position,\n      {\n        toValue: props.navigationState.index,\n        duration: ANIMATION_DURATION,\n      }\n    ).start();\n  }\n}\n\nfunction createPanHandlers(\n  direction: NavigationGestureDirection,\n  props: NavigationSceneRendererProps,\n): NavigationPanPanHandlers {\n  const responder = new NavigationPagerPanResponder(direction, props);\n  return responder.panHandlers;\n}\n\nfunction forHorizontal(\n  props: NavigationSceneRendererProps,\n): NavigationPanPanHandlers {\n  return createPanHandlers(Directions.HORIZONTAL, props);\n}\n\nmodule.exports = {\n  Actions,\n  forHorizontal,\n};\n"]}]