["9a30b0bb0759c82dc5a4715c4c47c66c85c52bff","e27e2b85f892a5bd951c3d38534b8abd1e86987d",["Keyboard","LayoutAnimation","Platform","React","react-timer-mixin","View","ViewPropTypes"],[39,82,125,158,193,234,272],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native/Libraries/Components/Keyboard/KeyboardAvoidingView.js"],"names":["Keyboard","require","LayoutAnimation","Platform","React","TimerMixin","View","ViewPropTypes","PropTypes","viewRef","KeyboardAvoidingView","createClass","mixins","propTypes","behavior","oneOf","contentContainerStyle","style","keyboardVerticalOffset","number","isRequired","getDefaultProps","getInitialState","bottom","subscriptions","frame","relativeKeyboardHeight","keyboardFrame","y1","Math","max","y","screenY","props","y2","min","height","onKeyboardChange","event","setState","duration","easing","endCoordinates","configureNext","update","type","Types","onLayout","nativeEvent","layout","componentWillUpdate","nextProps","nextState","nextContext","state","componentWillMount","OS","addListener","componentWillUnmount","forEach","sub","remove","render","children","heightStyle","flex","positionStyle","paddingStyle","paddingBottom","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule KeyboardAvoidingView\n * @flow\n */\n'use strict';\n\nconst Keyboard = require('Keyboard');\nconst LayoutAnimation = require('LayoutAnimation');\nconst Platform = require('Platform');\nconst React = require('React');\nconst TimerMixin = require('react-timer-mixin');\nconst View = require('View');\n\nconst ViewPropTypes = require('ViewPropTypes');\n\nconst PropTypes = React.PropTypes;\n\nimport type EmitterSubscription from 'EmitterSubscription';\n\ntype Rect = {\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n};\ntype ScreenRect = {\n  screenX: number,\n  screenY: number,\n  width: number,\n  height: number,\n};\ntype KeyboardChangeEvent = {\n  startCoordinates?: ScreenRect,\n  endCoordinates: ScreenRect,\n  duration?: number,\n  easing?: string,\n};\ntype LayoutEvent = {\n  nativeEvent: {\n    layout: Rect,\n  }\n};\n\nconst viewRef = 'VIEW';\n\n/**\n * It is a component to solve the common problem of views that need to move out of the way of the virtual keyboard.\n * It can automatically adjust either its position or bottom padding based on the position of the keyboard.\n */\n// $FlowFixMe(>=0.41.0)\nconst KeyboardAvoidingView = React.createClass({\n  mixins: [TimerMixin],\n\n  propTypes: {\n    ...ViewPropTypes,\n    behavior: PropTypes.oneOf(['height', 'position', 'padding']),\n\n    /**\n     * The style of the content container(View) when behavior is 'position'.\n     */\n    contentContainerStyle: ViewPropTypes.style,\n\n    /**\n     * This is the distance between the top of the user screen and the react native view,\n     * may be non-zero in some use cases.\n     */\n    keyboardVerticalOffset: PropTypes.number.isRequired,\n  },\n\n  getDefaultProps() {\n    return {\n      keyboardVerticalOffset: 0,\n    };\n  },\n\n  getInitialState() {\n    return {\n      bottom: 0,\n    };\n  },\n\n  subscriptions: ([]: Array<EmitterSubscription>),\n  frame: (null: ?Rect),\n\n  relativeKeyboardHeight(keyboardFrame: ScreenRect): number {\n    const frame = this.frame;\n    if (!frame || !keyboardFrame) {\n      return 0;\n    }\n\n    const y1 = Math.max(frame.y, keyboardFrame.screenY - this.props.keyboardVerticalOffset);\n    const y2 = Math.min(frame.y + frame.height, keyboardFrame.screenY + keyboardFrame.height - this.props.keyboardVerticalOffset);\n    if (frame.y > keyboardFrame.screenY) {\n      return frame.y + frame.height - keyboardFrame.screenY - this.props.keyboardVerticalOffset;\n    }\n    return Math.max(y2 - y1, 0);\n  },\n\n  onKeyboardChange(event: ?KeyboardChangeEvent) {\n    if (!event) {\n      this.setState({bottom: 0});\n      return;\n    }\n\n    const {duration, easing, endCoordinates} = event;\n    const height = this.relativeKeyboardHeight(endCoordinates);\n\n    if (duration && easing) {\n      LayoutAnimation.configureNext({\n        duration: duration,\n        update: {\n          duration: duration,\n          type: LayoutAnimation.Types[easing] || 'keyboard',\n        },\n      });\n    }\n    this.setState({bottom: height});\n  },\n\n  onLayout(event: LayoutEvent) {\n    this.frame = event.nativeEvent.layout;\n  },\n\n  componentWillUpdate(nextProps: Object, nextState: Object, nextContext?: Object): void {\n    if (nextState.bottom === this.state.bottom &&\n        this.props.behavior === 'height' &&\n        nextProps.behavior === 'height') {\n      // If the component rerenders without an internal state change, e.g.\n      // triggered by parent component re-rendering, no need for bottom to change.\n      nextState.bottom = 0;\n    }\n  },\n\n  componentWillMount() {\n    if (Platform.OS === 'ios') {\n      this.subscriptions = [\n        Keyboard.addListener('keyboardWillChangeFrame', this.onKeyboardChange),\n      ];\n    } else {\n      this.subscriptions = [\n        Keyboard.addListener('keyboardDidHide', this.onKeyboardChange),\n        Keyboard.addListener('keyboardDidShow', this.onKeyboardChange),\n      ];\n    }\n  },\n\n  componentWillUnmount() {\n    this.subscriptions.forEach((sub) => sub.remove());\n  },\n\n  render(): React.Element<any> {\n    // $FlowFixMe(>=0.41.0)\n    const {behavior, children, style, ...props} = this.props;\n\n    switch (behavior) {\n      case 'height':\n        let heightStyle;\n        if (this.frame) {\n          // Note that we only apply a height change when there is keyboard present,\n          // i.e. this.state.bottom is greater than 0. If we remove that condition,\n          // this.frame.height will never go back to its original value.\n          // When height changes, we need to disable flex.\n          heightStyle = {height: this.frame.height - this.state.bottom, flex: 0};\n        }\n        return (\n          <View ref={viewRef} style={[style, heightStyle]} onLayout={this.onLayout} {...props}>\n            {children}\n          </View>\n        );\n\n      case 'position':\n        const positionStyle = {bottom: this.state.bottom};\n        const { contentContainerStyle } = this.props;\n\n        return (\n          <View ref={viewRef} style={style} onLayout={this.onLayout} {...props}>\n            <View style={[contentContainerStyle, positionStyle]}>\n              {children}\n            </View>\n          </View>\n        );\n\n      case 'padding':\n        const paddingStyle = {paddingBottom: this.state.bottom};\n        return (\n          <View ref={viewRef} style={[style, paddingStyle]} onLayout={this.onLayout} {...props}>\n            {children}\n          </View>\n        );\n\n      default:\n        return (\n          <View ref={viewRef} onLayout={this.onLayout} style={style} {...props}>\n            {children}\n          </View>\n        );\n    }\n  },\n});\n\nmodule.exports = KeyboardAvoidingView;\n"]}]