["cbd0098815f231556ed9197914d56f78e7bdf394","87b91acd3f7e07015754dcc59577aea559c4535a",["fbjs/lib/invariant"],[41],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native/Libraries/Renderer/src/renderers/shared/utils/accumulateInto.js"],"names":["invariant","require","accumulateInto","current","next","Array","isArray","push","apply","concat","module","exports"],"mappings":";;AAYA;;AAEA,IAAIA,YAAYC,QAAQ,oBAAR,CAAhB;;AAeA,SAASC,cAAT,CACEC,OADF,EAEEC,IAFF,EAGgB;AACdJ,YACEI,QAAQ,IADV,EAEE,uEAFF;;AAKA,MAAID,WAAW,IAAf,EAAqB;AACnB,WAAOC,IAAP;AACD;;AAID,MAAIC,MAAMC,OAAN,CAAcH,OAAd,CAAJ,EAA4B;AAC1B,QAAIE,MAAMC,OAAN,CAAcF,IAAd,CAAJ,EAAyB;AACvBD,cAAQI,IAAR,CAAaC,KAAb,CAAmBL,OAAnB,EAA4BC,IAA5B;AACA,aAAOD,OAAP;AACD;AACDA,YAAQI,IAAR,CAAaH,IAAb;AACA,WAAOD,OAAP;AACD;;AAED,MAAIE,MAAMC,OAAN,CAAcF,IAAd,CAAJ,EAAyB;AAEvB,WAAO,CAACD,OAAD,EAAUM,MAAV,CAAiBL,IAAjB,CAAP;AACD;;AAED,SAAO,CAACD,OAAD,EAAUC,IAAV,CAAP;AACD;;AAEDM,OAAOC,OAAP,GAAiBT,cAAjB","sourcesContent":["/**\n * Copyright 2014-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule accumulateInto\n * @flow\n */\n\n'use strict';\n\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * Accumulates items that must not be null or undefined into the first one. This\n * is used to conserve memory by avoiding array allocations, and thus sacrifices\n * API cleanness. Since `current` can be null before being passed in and not\n * null after this function, make sure to assign it back to `current`:\n *\n * `a = accumulateInto(a, b);`\n *\n * This API should be sparingly used. Try `accumulate` for something cleaner.\n *\n * @return {*|array<*>} An accumulation of items.\n */\n\nfunction accumulateInto<T>(\n  current: ?(T | Array<T>),\n  next: T | Array<T>,\n): T | Array<T> {\n  invariant(\n    next != null,\n    'accumulateInto(...): Accumulated items must not be null or undefined.',\n  );\n\n  if (current == null) {\n    return next;\n  }\n\n  // Both are not empty. Warning: Never call x.concat(y) when you are not\n  // certain that x is an Array (x could be a string with concat method).\n  if (Array.isArray(current)) {\n    if (Array.isArray(next)) {\n      current.push.apply(current, next);\n      return current;\n    }\n    current.push(next);\n    return current;\n  }\n\n  if (Array.isArray(next)) {\n    // A bit too dangerous to mutate `next`.\n    return [current].concat(next);\n  }\n\n  return [current, next];\n}\n\nmodule.exports = accumulateInto;\n"]}]