["b8033b5007297ca1c5a38ede4c02e33cbb6c344f","016ef88b94aa5d35241d4419bf3126c6b7ac6156",["React","NativeModules","createStrictShapeTypeChecker","deepFreezeAndThrowOnMutationInDev","fbjs/lib/invariant"],[39,167,247,328,390],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native/Libraries/CameraRoll/CameraRoll.js"],"names":["require","PropTypes","checkPropTypes","RCTCameraRollManager","CameraRollManager","createStrictShapeTypeChecker","deepFreezeAndThrowOnMutationInDev","invariant","GROUP_TYPES_OPTIONS","ASSET_TYPE_OPTIONS","getPhotosParamChecker","first","number","isRequired","after","string","groupTypes","oneOf","groupName","assetType","mimeTypes","arrayOf","getPhotosReturnChecker","edges","node","type","group_name","image","uri","height","width","isStored","bool","timestamp","location","latitude","longitude","altitude","heading","speed","page_info","has_next_page","start_cursor","end_cursor","CameraRoll","tag","console","warn","saveToCameraRoll","undefined","mediaType","indexOf","split","slice","params","__DEV__","arguments","length","successCallback","callback","response","errorCallback","getPhotos","then","GroupTypesOptions","AssetTypeOptions","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule CameraRoll\n * @flow\n */\n'use strict';\n\n// $FlowFixMe `checkPropTypes` is not in Flow's built in React typedefs yet.\nvar {PropTypes, checkPropTypes} = require('React');\nvar RCTCameraRollManager = require('NativeModules').CameraRollManager;\n\nvar createStrictShapeTypeChecker = require('createStrictShapeTypeChecker');\nvar deepFreezeAndThrowOnMutationInDev =\n  require('deepFreezeAndThrowOnMutationInDev');\nvar invariant = require('fbjs/lib/invariant');\n\nvar GROUP_TYPES_OPTIONS = [\n  'Album',\n  'All',\n  'Event',\n  'Faces',\n  'Library',\n  'PhotoStream',\n  'SavedPhotos', // default\n];\n\nvar ASSET_TYPE_OPTIONS = [\n  'All',\n  'Videos',\n  'Photos', // default\n];\n\n// Flow treats Object and Array as disjoint types, currently.\ndeepFreezeAndThrowOnMutationInDev((GROUP_TYPES_OPTIONS: any));\ndeepFreezeAndThrowOnMutationInDev((ASSET_TYPE_OPTIONS: any));\n\n/**\n * Shape of the param arg for the `getPhotos` function.\n */\nvar getPhotosParamChecker = createStrictShapeTypeChecker({\n  /**\n   * The number of photos wanted in reverse order of the photo application\n   * (i.e. most recent first for SavedPhotos).\n   */\n  first: PropTypes.number.isRequired,\n\n  /**\n   * A cursor that matches `page_info { end_cursor }` returned from a previous\n   * call to `getPhotos`\n   */\n  after: PropTypes.string,\n\n  /**\n   * Specifies which group types to filter the results to.\n   */\n  groupTypes: PropTypes.oneOf(GROUP_TYPES_OPTIONS),\n\n  /**\n   * Specifies filter on group names, like 'Recent Photos' or custom album\n   * titles.\n   */\n  groupName: PropTypes.string,\n\n  /**\n  * Specifies filter on asset type\n  */\n  assetType: PropTypes.oneOf(ASSET_TYPE_OPTIONS),\n\n  /**\n   * Filter by mimetype (e.g. image/jpeg).\n   */\n  mimeTypes: PropTypes.arrayOf(PropTypes.string),\n});\n\n/**\n * Shape of the return value of the `getPhotos` function.\n */\nvar getPhotosReturnChecker = createStrictShapeTypeChecker({\n  // $FlowFixMe(>=0.41.0)\n  edges: PropTypes.arrayOf(createStrictShapeTypeChecker({\n    node: createStrictShapeTypeChecker({\n      type: PropTypes.string.isRequired,\n      group_name: PropTypes.string.isRequired,\n      image: createStrictShapeTypeChecker({\n        uri: PropTypes.string.isRequired,\n        height: PropTypes.number.isRequired,\n        width: PropTypes.number.isRequired,\n        isStored: PropTypes.bool,\n      }).isRequired,\n      timestamp: PropTypes.number.isRequired,\n      location: createStrictShapeTypeChecker({\n        latitude: PropTypes.number,\n        longitude: PropTypes.number,\n        altitude: PropTypes.number,\n        heading: PropTypes.number,\n        speed: PropTypes.number,\n      }),\n    }).isRequired,\n  })).isRequired,\n  page_info: createStrictShapeTypeChecker({\n    has_next_page: PropTypes.bool.isRequired,\n    start_cursor: PropTypes.string,\n    end_cursor: PropTypes.string,\n  }).isRequired,\n});\n\n/**\n * `CameraRoll` provides access to the local camera roll / gallery.\n * Before using this you must link the `RCTCameraRoll` library.\n * You can refer to [Linking](docs/linking-libraries-ios.html) for help.\n *\n * ### Permissions\n * The user's permission is required in order to access the Camera Roll on devices running iOS 10 or later.\n * Fill out the `NSCameraUsageDescription` key in your `Info.plist` with a string that describes how your\n * app will use this data. This key will appear as `Privacy - Camera Usage Description` in Xcode.\n *\n */\nclass CameraRoll {\n\n  static GroupTypesOptions: Array<string>;\n  static AssetTypeOptions: Array<string>;\n\n  static saveImageWithTag(tag: string): Promise<Object> {\n    console.warn('CameraRoll.saveImageWithTag is deprecated. Use CameraRoll.saveToCameraRoll instead');\n    return this.saveToCameraRoll(tag, 'photo');\n  }\n\n  /**\n   * Saves the photo or video to the camera roll / gallery.\n   *\n   * On Android, the tag must be a local image or video URI, such as `\"file:///sdcard/img.png\"`.\n   *\n   * On iOS, the tag can be any image URI (including local, remote asset-library and base64 data URIs)\n   * or a local video file URI (remote or data URIs are not supported for saving video at this time).\n   *\n   * If the tag has a file extension of .mov or .mp4, it will be inferred as a video. Otherwise\n   * it will be treated as a photo. To override the automatic choice, you can pass an optional\n   * `type` parameter that must be one of 'photo' or 'video'.\n   *\n   * Returns a Promise which will resolve with the new URI.\n   */\n  static saveToCameraRoll(tag: string, type?: 'photo' | 'video'): Promise<Object> {\n    invariant(\n      typeof tag === 'string',\n      'CameraRoll.saveToCameraRoll must be a valid string.'\n    );\n\n    invariant(\n      type === 'photo' || type === 'video' || type === undefined,\n      // $FlowFixMe(>=0.28.0)\n      `The second argument to saveToCameraRoll must be 'photo' or 'video'. You passed ${type}`\n    );\n\n    let mediaType = 'photo';\n    if (type) {\n      mediaType = type;\n    } else if (['mov', 'mp4'].indexOf(tag.split('.').slice(-1)[0]) >= 0) {\n      mediaType = 'video';\n    }\n\n    return RCTCameraRollManager.saveToCameraRoll(tag, mediaType);\n  }\n\n  /**\n   * Returns a Promise with photo identifier objects from the local camera\n   * roll of the device matching shape defined by `getPhotosReturnChecker`.\n   *\n   * Expects a params object of the following shape:\n   *\n   * - `first` : {number} : The number of photos wanted in reverse order of the photo application (i.e. most recent first for SavedPhotos).\n   * - `after` : {string} : A cursor that matches `page_info { end_cursor }` returned from a previous call to `getPhotos`.\n   * - `groupTypes` : {string} : Specifies which group types to filter the results to. Valid values are:\n   *      - `Album`\n   *      - `All`\n   *      - `Event`\n   *      - `Faces`\n   *      - `Library`\n   *      - `PhotoStream`\n   *      - `SavedPhotos` // default\n   * - `groupName` : {string} : Specifies filter on group names, like 'Recent Photos' or custom album titles.\n   * - `assetType` : {string} : Specifies filter on asset type. Valid values are:\n   *      - `All`\n   *      - `Videos`\n   *      - `Photos` // default\n   * - `mimeTypes` : {string} : Filter by mimetype (e.g. image/jpeg).\n   *\n   * Returns a Promise which when resolved will be of the following shape:\n   *\n   * - `edges` : {Array<node>} An array of node objects\n   *      - `node`: {object} An object with the following shape:\n   *          - `type`: {string}\n   *          - `group_name`: {string}\n   *          - `image`: {object} : An object with the following shape:\n   *              - `uri`: {string}\n   *              - `height`: {number}\n   *              - `width`: {number}\n   *              - `isStored`: {boolean}\n   *          - `timestamp`: {number}\n   *          - `location`: {object} : An object with the following shape:\n   *              - `latitude`: {number}\n   *              - `longitude`: {number}\n   *              - `altitude`: {number}\n   *              - `heading`: {number}\n   *              - `speed`: {number}\n   * - `page_info` : {object} : An object with the following shape:\n   *      - `has_next_page`: {boolean}\n   *      - `start_cursor`: {boolean}\n   *      - `end_cursor`: {boolean}\n   */\n  static getPhotos(params) {\n    if (__DEV__) {\n      checkPropTypes({params: getPhotosParamChecker}, {params}, 'params', 'CameraRoll.getPhotos');\n    }\n    if (arguments.length > 1) {\n      console.warn('CameraRoll.getPhotos(tag, success, error) is deprecated.  Use the returned Promise instead');\n      let successCallback = arguments[1];\n      if (__DEV__) {\n        const callback = arguments[1];\n        successCallback = (response) => {\n          checkPropTypes(\n            {response: getPhotosReturnChecker},\n            {response},\n            'response',\n            'CameraRoll.getPhotos callback'\n          );\n          callback(response);\n        };\n      }\n      const errorCallback = arguments[2] || ( () => {} );\n      RCTCameraRollManager.getPhotos(params).then(successCallback, errorCallback);\n    }\n    // TODO: Add the __DEV__ check back in to verify the Promise result\n    return RCTCameraRollManager.getPhotos(params);\n  }\n}\n\nCameraRoll.GroupTypesOptions = GROUP_TYPES_OPTIONS;\nCameraRoll.AssetTypeOptions = ASSET_TYPE_OPTIONS;\n\nmodule.exports = CameraRoll;\n"]}]