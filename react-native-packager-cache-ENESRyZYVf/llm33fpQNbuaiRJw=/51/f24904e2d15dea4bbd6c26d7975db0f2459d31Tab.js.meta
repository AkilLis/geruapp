["e3368173ee6291c1f188a2cf362777c84e2cefa1","4ed1c13d8a546416736cb05cb2e8dbce3cbc00f3",["react","react-native","./Layout"],[102,199,239],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native-tab-navigator/Tab.js"],"names":["Tab","props","context","_handlePress","bind","title","badge","icon","Children","count","children","only","allowFontScaling","styles","titleStyle","cloneElement","style","tabStyle","container","untitledContainer","testID","hidesTabTouch","event","onPress","Component","propTypes","string","element","func","bool","create","position","top","right","flex","flexDirection","justifyContent","alignItems","paddingBottom","color","fontSize","textAlign","alignSelf","marginTop","marginBottom","pixel"],"mappings":"AAAA;;;;;;AACA;;;;AAGA;;AAOA;;;;IAEqBA,G;;;AAYnB,eAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;AAAA;;AAAA,sHACpBD,KADoB,EACbC,OADa;;AAG1B,UAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,OAApB;AAH0B;AAI3B;;;;6BAEQ;AAAA,mBACgB,KAAKH,KADrB;AAAA,UACDI,KADC,UACDA,KADC;AAAA,UACMC,KADN,UACMA,KADN;;AAEP,UAAIC,OAAO,IAAX;AACA,UAAI,gBAAMC,QAAN,CAAeC,KAAf,CAAqB,KAAKR,KAAL,CAAWS,QAAhC,IAA4C,CAAhD,EAAmD;AACjDH,eAAO,gBAAMC,QAAN,CAAeG,IAAf,CAAoB,KAAKV,KAAL,CAAWS,QAA/B,CAAP;AACD;;AAED,UAAIL,KAAJ,EAAW;AACTA,gBACE;AAAA;AAAA;AACE,2BAAe,CADjB;AAEE,8BAAkB,CAAC,CAAC,KAAKJ,KAAL,CAAWW,gBAFjC;AAGE,mBAAO,CAACC,OAAOR,KAAR,EAAe,KAAKJ,KAAL,CAAWa,UAA1B,CAHT;AAIGT;AAJH,SADF;AAOD;;AAED,UAAIC,KAAJ,EAAW;AACTA,gBAAQ,gBAAMS,YAAN,CAAmBT,KAAnB,EAA0B;AAChCU,iBAAO,CAACH,OAAOP,KAAR,EAAeA,MAAML,KAAN,CAAYe,KAA3B;AADyB,SAA1B,CAAR;AAGD;;AAED,UAAIC,WAAW,CACbJ,OAAOK,SADM,EAEbb,QAAQ,IAAR,GAAeQ,OAAOM,iBAFT,EAGb,KAAKlB,KAAL,CAAWe,KAHE,CAAf;AAKA,aACE;AAAA;AAAA;AACE,kBAAQ,KAAKf,KAAL,CAAWmB,MADrB;AAEE,yBAAe,KAAKnB,KAAL,CAAWoB,aAAX,GAA2B,GAA3B,GAAiC,GAFlD;AAGE,mBAAS,KAAKlB,YAHhB;AAIE,iBAAOc,QAJT;AAKE;AAAA;AAAA;AACGV,cADH;AAEGD;AAFH,SALF;AASGD;AATH,OADF;AAaD;;;iCAEYiB,K,EAAO;AAClB,UAAI,KAAKrB,KAAL,CAAWsB,OAAf,EAAwB;AACtB,aAAKtB,KAAL,CAAWsB,OAAX,CAAmBD,KAAnB;AACD;AACF;;;EAjE8B,gBAAME,S;;AAAlBxB,G,CACZyB,S,GAAY;AACjBL,UAAS,iBAAUM,MADF;AAEjBrB,SAAO,iBAAUqB,MAFA;AAGjBZ,cAAY,kBAAKW,SAAL,CAAeT,KAHV;AAIjBV,SAAO,iBAAUqB,OAJA;AAKjBJ,WAAS,iBAAUK,IALF;AAMjBP,iBAAe,iBAAUQ,IANR;AAOjBjB,oBAAkB,iBAAUiB,IAPX;AAQjBb,SAAO,kBAAKS,SAAL,CAAeT;AARL,C;kBADAhB,G;;;AAoErB,IAAIa,SAAS,wBAAWiB,MAAX,CAAkB;AAC7BxB,SAAO;AACLyB,cAAU,UADL;AAELC,SAAK,CAAC,CAFD;AAGLC,WAAO,CAAC;AAHH,GADsB;AAM7Bf,aAAW;AACTgB,UAAM,CADG;AAETC,mBAAe,QAFN;AAGTC,oBAAgB,UAHP;AAITC,gBAAY;AAJH,GANkB;AAY7BlB,qBAAmB;AACjBmB,mBAAe;AADE,GAZU;AAe7BjC,SAAO;AACLkC,WAAO,SADF;AAELC,cAAU,EAFL;AAGLC,eAAW,QAHN;AAILC,eAAW,SAJN;AAKLC,eAAW,CALN;AAMLC,kBAAc,IAAI,iBAAOC;AANpB;AAfsB,CAAlB,CAAb","sourcesContent":["'use strict';\nimport React, {\n  PropTypes,\n} from 'react';\nimport {\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  View,\n} from 'react-native';\n\nimport Layout from './Layout';\n\nexport default class Tab extends React.Component {\n  static propTypes = {\n    testID : PropTypes.string,\n    title: PropTypes.string,\n    titleStyle: Text.propTypes.style,\n    badge: PropTypes.element,\n    onPress: PropTypes.func,\n    hidesTabTouch: PropTypes.bool,\n    allowFontScaling: PropTypes.bool,\n    style: View.propTypes.style,\n  };\n\n  constructor(props, context) {\n    super(props, context);\n\n    this._handlePress = this._handlePress.bind(this);\n  }\n\n  render() {\n    let { title, badge } = this.props;\n    let icon = null;\n    if (React.Children.count(this.props.children) > 0) {\n      icon = React.Children.only(this.props.children);\n    }\n\n    if (title) {\n      title =\n        <Text\n          numberOfLines={1}\n          allowFontScaling={!!this.props.allowFontScaling}\n          style={[styles.title, this.props.titleStyle]}>\n          {title}\n        </Text>;\n    }\n\n    if (badge) {\n      badge = React.cloneElement(badge, {\n        style: [styles.badge, badge.props.style],\n      });\n    }\n\n    let tabStyle = [\n      styles.container,\n      title ? null : styles.untitledContainer,\n      this.props.style,\n    ];\n    return (\n      <TouchableOpacity\n        testID={this.props.testID}\n        activeOpacity={this.props.hidesTabTouch ? 1.0 : 0.8}\n        onPress={this._handlePress}\n        style={tabStyle}>\n        <View>\n          {icon}\n          {badge}\n        </View>\n        {title}\n      </TouchableOpacity>\n    );\n  }\n\n  _handlePress(event) {\n    if (this.props.onPress) {\n      this.props.onPress(event);\n    }\n  }\n}\n\nlet styles = StyleSheet.create({\n  badge: {\n    position: 'absolute',\n    top: -6,\n    right: -10,\n  },\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'flex-end',\n    alignItems: 'center',\n  },\n  untitledContainer: {\n    paddingBottom: 13,\n  },\n  title: {\n    color: '#929292',\n    fontSize: 10,\n    textAlign: 'center',\n    alignSelf: 'stretch',\n    marginTop: 4,\n    marginBottom: 1 + Layout.pixel,\n  },\n});\n"]}]