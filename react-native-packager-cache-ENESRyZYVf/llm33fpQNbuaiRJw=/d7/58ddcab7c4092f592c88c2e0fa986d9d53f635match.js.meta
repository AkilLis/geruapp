["7bdaa5f7425f49320d909dc00e3ba370ff7f1c4e","61a0a36f570541896ced93e02fd5c78469502d38",["./assert","./isFunction","./isType","./Any"],[21,59,97,128],{"version":3,"sources":["/var/www/geruapp/node_modules/tcomb/lib/match.js"],"names":["assert","require","isFunction","isType","Any","module","exports","match","x","type","guard","f","count","i","len","arguments","length","is","process","env","NODE_ENV","fail"],"mappings":"AAAA,IAAIA,SAASC,QAAQ,UAAR,CAAb;AACA,IAAIC,aAAaD,QAAQ,cAAR,CAAjB;AACA,IAAIE,SAASF,QAAQ,UAAR,CAAb;AACA,IAAIG,MAAMH,QAAQ,OAAR,CAAV;;AAEAI,OAAOC,OAAP,GAAiB,SAASC,KAAT,CAAeC,CAAf,EAAkB;AACjC,MAAIC,IAAJ,EAAUC,KAAV,EAAiBC,CAAjB,EAAoBC,KAApB;AACA,OAAK,IAAIC,IAAI,CAAR,EAAWC,MAAMC,UAAUC,MAAhC,EAAwCH,IAAIC,GAA5C,GAAmD;AACjDL,WAAOM,UAAUF,CAAV,CAAP;AACAH,YAAQK,UAAUF,IAAI,CAAd,CAAR;AACAF,QAAII,UAAUF,IAAI,CAAd,CAAJ;;AAEA,QAAIX,WAAWS,CAAX,KAAiB,CAACR,OAAOQ,CAAP,CAAtB,EAAiC;AAC/BE,UAAIA,IAAI,CAAR;AACD,KAFD,MAGK;AACHF,UAAID,KAAJ;AACAA,cAAQN,IAAIa,EAAZ;AACAJ,UAAIA,IAAI,CAAR;AACD;;AAED,QAAIK,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCR,cAAQ,CAACA,SAAS,CAAV,IAAe,CAAvB;AACAZ,aAAOG,OAAOM,IAAP,CAAP,EAAqB,YAAY;AAAE,eAAO,6BAA6BG,KAApC;AAA4C,OAA/E;AACAZ,aAAOE,WAAWQ,KAAX,CAAP,EAA0B,YAAY;AAAE,eAAO,8BAA8BE,KAArC;AAA6C,OAArF;AACAZ,aAAOE,WAAWS,CAAX,CAAP,EAAsB,YAAY;AAAE,eAAO,8BAA8BC,KAArC;AAA6C,OAAjF;AACD;;AAED,QAAIH,KAAKQ,EAAL,CAAQT,CAAR,KAAcE,MAAMF,CAAN,CAAlB,EAA4B;AAC1B,aAAOG,EAAEH,CAAF,CAAP;AACD;AACF;AACDR,SAAOqB,IAAP,CAAY,aAAZ;AACD,CA5BD","sourcesContent":["var assert = require('./assert');\nvar isFunction = require('./isFunction');\nvar isType = require('./isType');\nvar Any = require('./Any');\n\nmodule.exports = function match(x) {\n  var type, guard, f, count;\n  for (var i = 1, len = arguments.length; i < len; ) {\n    type = arguments[i];\n    guard = arguments[i + 1];\n    f = arguments[i + 2];\n\n    if (isFunction(f) && !isType(f)) {\n      i = i + 3;\n    }\n    else {\n      f = guard;\n      guard = Any.is;\n      i = i + 2;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      count = (count || 0) + 1;\n      assert(isType(type), function () { return 'Invalid type in clause #' + count; });\n      assert(isFunction(guard), function () { return 'Invalid guard in clause #' + count; });\n      assert(isFunction(f), function () { return 'Invalid block in clause #' + count; });\n    }\n\n    if (type.is(x) && guard(x)) {\n      return f(x);\n    }\n  }\n  assert.fail('Match error');\n};\n"]}]