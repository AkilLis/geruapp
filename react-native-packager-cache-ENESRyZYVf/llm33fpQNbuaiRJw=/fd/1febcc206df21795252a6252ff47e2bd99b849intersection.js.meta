["21abdd1f3503a88cd7780d702f5591d6f5b4d03b","0c9afb1eb7b1b17dc47cb5a638b31b62afe5283a",["./assert","./isTypeName","./isFunction","./isArray","./isIdentity","./is","./getTypeName"],[21,59,101,140,186,220,255,298],{"version":3,"sources":["/var/www/geruapp/node_modules/tcomb/lib/intersection.js"],"names":["assert","require","isTypeName","isFunction","isArray","forbidNewOperator","is","getTypeName","isIdentity","getDefaultName","types","map","join","intersection","name","process","env","NODE_ENV","every","length","stringify","displayName","identity","Intersection","value","path","meta","kind","x","type","update","instance","patch","module","exports"],"mappings":"AAAA,IAAIA,SAASC,QAAQ,UAAR,CAAb;AACA,IAAIC,aAAaD,QAAQ,cAAR,CAAjB;AACA,IAAIE,aAAaF,QAAQ,cAAR,CAAjB;AACA,IAAIG,UAAUH,QAAQ,WAAR,CAAd;AACA,IAAII,oBAAoBJ,QAAQ,cAAR,CAAxB;AACA,IAAIK,KAAKL,QAAQ,MAAR,CAAT;AACA,IAAIM,cAAcN,QAAQ,eAAR,CAAlB;AACA,IAAIO,aAAaP,QAAQ,cAAR,CAAjB;;AAEA,SAASQ,cAAT,CAAwBC,KAAxB,EAA+B;AAC7B,SAAOA,MAAMC,GAAN,CAAUJ,WAAV,EAAuBK,IAAvB,CAA4B,KAA5B,CAAP;AACD;;AAED,SAASC,YAAT,CAAsBH,KAAtB,EAA6BI,IAA7B,EAAmC;;AAEjC,MAAIC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCjB,WAAOI,QAAQM,KAAR,KAAkBA,MAAMQ,KAAN,CAAYf,UAAZ,CAAlB,IAA6CO,MAAMS,MAAN,IAAgB,CAApE,EAAuE,YAAY;AAAE,aAAO,4BAA4BnB,OAAOoB,SAAP,CAAiBV,KAAjB,CAA5B,GAAsD,6FAA7D;AAA6J,KAAlP;AACAV,WAAOE,WAAWY,IAAX,CAAP,EAAyB,YAAY;AAAE,aAAO,2BAA2Bd,OAAOoB,SAAP,CAAiBN,IAAjB,CAA3B,GAAoD,yEAA3D;AAAuI,KAA9K;AACD;;AAED,MAAIO,cAAcP,QAAQL,eAAeC,KAAf,CAA1B;AACA,MAAIY,WAAWZ,MAAMQ,KAAN,CAAYV,UAAZ,CAAf;;AAEA,WAASe,YAAT,CAAsBC,KAAtB,EAA6BC,IAA7B,EAAmC;;AAEjC,QAAIV,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,UAAIK,QAAJ,EAAc;AACZjB,0BAAkB,IAAlB,EAAwBkB,YAAxB;AACD;AACDE,aAAOA,QAAQ,CAACJ,WAAD,CAAf;AACArB,aAAOuB,aAAajB,EAAb,CAAgBkB,KAAhB,CAAP,EAA+B,YAAY;AAAE,eAAO,mBAAmBxB,OAAOoB,SAAP,CAAiBI,KAAjB,CAAnB,GAA6C,eAA7C,GAA+DC,KAAKb,IAAL,CAAU,GAAV,CAAtE;AAAuF,OAApI;AACD;;AAED,WAAOY,KAAP;AACD;;AAEDD,eAAaG,IAAb,GAAoB;AAClBC,UAAM,cADY;AAElBjB,WAAOA,KAFW;AAGlBI,UAAMA,IAHY;AAIlBQ,cAAUA;AAJQ,GAApB;;AAOAC,eAAaF,WAAb,GAA2BA,WAA3B;;AAEAE,eAAajB,EAAb,GAAkB,UAAUsB,CAAV,EAAa;AAC7B,WAAOlB,MAAMQ,KAAN,CAAY,UAAUW,IAAV,EAAgB;AACjC,aAAOvB,GAAGsB,CAAH,EAAMC,IAAN,CAAP;AACD,KAFM,CAAP;AAGD,GAJD;;AAMAN,eAAaO,MAAb,GAAsB,UAAUC,QAAV,EAAoBC,KAApB,EAA2B;AAC/C,WAAOT,aAAavB,OAAO8B,MAAP,CAAcC,QAAd,EAAwBC,KAAxB,CAAb,CAAP;AACD,GAFD;;AAIA,SAAOT,YAAP;AACD;;AAEDV,aAAaJ,cAAb,GAA8BA,cAA9B;AACAwB,OAAOC,OAAP,GAAiBrB,YAAjB","sourcesContent":["var assert = require('./assert');\nvar isTypeName = require('./isTypeName');\nvar isFunction = require('./isFunction');\nvar isArray = require('./isArray');\nvar forbidNewOperator = require('./isIdentity');\nvar is = require('./is');\nvar getTypeName = require('./getTypeName');\nvar isIdentity = require('./isIdentity');\n\nfunction getDefaultName(types) {\n  return types.map(getTypeName).join(' & ');\n}\n\nfunction intersection(types, name) {\n\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isArray(types) && types.every(isFunction) && types.length >= 2, function () { return 'Invalid argument types ' + assert.stringify(types) + ' supplied to intersection(types, [name]) combinator (expected an array of at least 2 types)'; });\n    assert(isTypeName(name), function () { return 'Invalid argument name ' + assert.stringify(name) + ' supplied to intersection(types, [name]) combinator (expected a string)'; });\n  }\n\n  var displayName = name || getDefaultName(types);\n  var identity = types.every(isIdentity);\n\n  function Intersection(value, path) {\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (identity) {\n        forbidNewOperator(this, Intersection);\n      }\n      path = path || [displayName];\n      assert(Intersection.is(value), function () { return 'Invalid value ' + assert.stringify(value) + ' supplied to ' + path.join('/'); });\n    }\n\n    return value;\n  }\n\n  Intersection.meta = {\n    kind: 'intersection',\n    types: types,\n    name: name,\n    identity: identity\n  };\n\n  Intersection.displayName = displayName;\n\n  Intersection.is = function (x) {\n    return types.every(function (type) {\n      return is(x, type);\n    });\n  };\n\n  Intersection.update = function (instance, patch) {\n    return Intersection(assert.update(instance, patch));\n  };\n\n  return Intersection;\n}\n\nintersection.getDefaultName = getDefaultName;\nmodule.exports = intersection;\n\n"]}]