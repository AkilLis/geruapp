["f0218f13433a668d76c63f3006c1ecb89b127b12","9e1e5994480a1758906ad331747ff771ccec011d",[],[],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native-router-flux/src/Util.js"],"names":["deepestExplicitValueForKey","assert","navigationState","key","current","selected","hasOwnProperty","call","tabs","i","index","children","expr","failDescription","Error"],"mappings":";;;QAEgBA,0B,GAAAA,0B;QA6BAC,M,GAAAA,M;AA7BT,SAASD,0BAAT,CAAoCE,eAApC,EAAqDC,GAArD,EAA0D;AAC/D,MAAIC,gBAAJ;AACA,MAAIC,WAAWH,eAAf;;AAEA,SAAO,GAAGI,cAAH,CAAkBC,IAAlB,CAAuBF,QAAvB,EAAiC,UAAjC,CAAP,EAAqD;AACnD,QAAI,CAACA,SAASG,IAAd,EAAoB;AAGlB,WAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIJ,SAASK,KAA7B,EAAoCD,KAAK,CAAzC,EAA4C;AAC1C,YAAI,OAAQJ,SAASM,QAAT,CAAkBF,CAAlB,EAAqBN,GAArB,CAAR,KAAuC,WAA3C,EAAwD;AACtDC,oBAAUC,SAASM,QAAT,CAAkBF,CAAlB,EAAqBN,GAArB,CAAV;AACD;AACF;AACF;;AAEDE,eAAWA,SAASM,QAAT,CAAkBN,SAASK,KAA3B,CAAX;AACA,QAAI,OAAQL,SAASF,GAAT,CAAR,KAA2B,WAA/B,EAA4C;AAC1CC,gBAAUC,SAASF,GAAT,CAAV;AACD;AACF;;AAGD,MAAI,OAAQC,OAAR,KAAqB,WAAzB,EAAsC;AACpCA,cAAUF,gBAAgBC,GAAhB,CAAV;AACD;;AAED,SAAOC,OAAP;AACD;;AAEM,SAASH,MAAT,CAAgBW,IAAhB,EAAsBC,eAAtB,EAAuC;AAC5C,MAAI,CAACD,IAAL,EAAW;AACT,UAAM,IAAIE,KAAJ,iCAAwCD,eAAxC,CAAN;AACD;AACF;;kBAEc;AACbb,wDADa;AAEbC;AAFa,C","sourcesContent":["// searches for the deepest explicitly set value for a key\n// in a navigationState tree.\nexport function deepestExplicitValueForKey(navigationState, key) {\n  let current;\n  let selected = navigationState;\n\n  while ({}.hasOwnProperty.call(selected, 'children')) {\n    if (!selected.tabs) {\n      // for pushed children, iterate through each, recording key value,\n      // until reaching the selected child\n      for (let i = 0; i < selected.index; i += 1) {\n        if (typeof (selected.children[i][key]) !== 'undefined') {\n          current = selected.children[i][key];\n        }\n      }\n    }\n    // set the new selected child and check for a key value\n    selected = selected.children[selected.index];\n    if (typeof (selected[key]) !== 'undefined') {\n      current = selected[key];\n    }\n  }\n\n  // fallback to the root key value\n  if (typeof (current) === 'undefined') {\n    current = navigationState[key];\n  }\n\n  return current;\n}\n\nexport function assert(expr, failDescription) {\n  if (!expr) {\n    throw new Error(`[react-native-router-flux] ${failDescription}`);\n  }\n}\n\nexport default {\n  deepestExplicitValueForKey,\n  assert,\n};\n"]}]