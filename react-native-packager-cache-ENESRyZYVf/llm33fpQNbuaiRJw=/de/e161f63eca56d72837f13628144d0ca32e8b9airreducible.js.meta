["5362c56cf08ac591bb8efef4de080c9625c87b67","fe5c9a852a0f46fdc4e5e64b509a92c6b27ac5ae",["./assert","./isString","./isFunction","./forbidNewOperator"],[21,57,97,146],{"version":3,"sources":["/var/www/geruapp/node_modules/tcomb/lib/irreducible.js"],"names":["assert","require","isString","isFunction","forbidNewOperator","module","exports","irreducible","name","predicate","process","env","NODE_ENV","stringify","Irreducible","value","path","join","meta","kind","identity","displayName","is"],"mappings":"AAAA,IAAIA,SAASC,QAAQ,UAAR,CAAb;AACA,IAAIC,WAAWD,QAAQ,YAAR,CAAf;AACA,IAAIE,aAAaF,QAAQ,cAAR,CAAjB;AACA,IAAIG,oBAAoBH,QAAQ,qBAAR,CAAxB;;AAEAI,OAAOC,OAAP,GAAiB,SAASC,WAAT,CAAqBC,IAArB,EAA2BC,SAA3B,EAAsC;;AAErD,MAAIC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCZ,WAAOE,SAASM,IAAT,CAAP,EAAuB,YAAY;AAAE,aAAO,2BAA2BR,OAAOa,SAAP,CAAiBL,IAAjB,CAA3B,GAAoD,+DAA3D;AAA6H,KAAlK;AACAR,WAAOG,WAAWM,SAAX,CAAP,EAA8B,gCAAgCT,OAAOa,SAAP,CAAiBJ,SAAjB,CAAhC,GAA8D,iEAA5F;AACD;;AAED,WAASK,WAAT,CAAqBC,KAArB,EAA4BC,IAA5B,EAAkC;;AAEhC,QAAIN,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCR,wBAAkB,IAAlB,EAAwBU,WAAxB;AACAE,aAAOA,QAAQ,CAACR,IAAD,CAAf;AACAR,aAAOS,UAAUM,KAAV,CAAP,EAAyB,YAAY;AAAE,eAAO,mBAAmBf,OAAOa,SAAP,CAAiBE,KAAjB,CAAnB,GAA6C,eAA7C,GAA+DC,KAAKC,IAAL,CAAU,GAAV,CAAtE;AAAuF,OAA9H;AACD;;AAED,WAAOF,KAAP;AACD;;AAEDD,cAAYI,IAAZ,GAAmB;AACjBC,UAAM,aADW;AAEjBX,UAAMA,IAFW;AAGjBC,eAAWA,SAHM;AAIjBW,cAAU;AAJO,GAAnB;;AAOAN,cAAYO,WAAZ,GAA0Bb,IAA1B;;AAEAM,cAAYQ,EAAZ,GAAiBb,SAAjB;;AAEA,SAAOK,WAAP;AACD,CA9BD","sourcesContent":["var assert = require('./assert');\nvar isString = require('./isString');\nvar isFunction = require('./isFunction');\nvar forbidNewOperator = require('./forbidNewOperator');\n\nmodule.exports = function irreducible(name, predicate) {\n\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isString(name), function () { return 'Invalid argument name ' + assert.stringify(name) + ' supplied to irreducible(name, predicate) (expected a string)'; });\n    assert(isFunction(predicate), 'Invalid argument predicate ' + assert.stringify(predicate) + ' supplied to irreducible(name, predicate) (expected a function)');\n  }\n\n  function Irreducible(value, path) {\n\n    if (process.env.NODE_ENV !== 'production') {\n      forbidNewOperator(this, Irreducible);\n      path = path || [name];\n      assert(predicate(value), function () { return 'Invalid value ' + assert.stringify(value) + ' supplied to ' + path.join('/'); });\n    }\n\n    return value;\n  }\n\n  Irreducible.meta = {\n    kind: 'irreducible',\n    name: name,\n    predicate: predicate,\n    identity: true\n  };\n\n  Irreducible.displayName = name;\n\n  Irreducible.is = predicate;\n\n  return Irreducible;\n};\n"]}]