["6e608f9eb841ad386503e335914b58d7cad38442","13fb5004d03aeb48b72044caa18fc55e1e18a784",["react","react-native"],[35,71],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native-radio-buttons/lib/radio-buttons.js"],"names":["React","require","ReactNative","Text","TouchableWithoutFeedback","View","propTypes","options","PropTypes","array","isRequired","testOptionEqual","func","renderOption","renderContainer","onSelection","RadioButtons","state","selectedOption","selectedIndex","setState","copySelectedOptionFromProps","props","newProps","children","map","option","index","isSelected","selectOption","bind","normalStyle","selectedStyle","extractText","selected","onSelect","style","label","Component","renderHorizontalContainer","getViewContainerRenderer","flexDirection","renderVerticalContainer","defaultProps","a","b","getTextOptionRenderer","fontWeight","module","exports"],"mappings":"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","sourcesContent":["'use strict';\nvar React = require('react');\nvar ReactNative = require('react-native');\n\nconst {\n  Text,\n  TouchableWithoutFeedback,\n  View,\n} = ReactNative;\n\nconst propTypes = {\n  options: React.PropTypes.array.isRequired,\n  testOptionEqual: React.PropTypes.func,\n  renderOption: React.PropTypes.func,\n  renderContainer: React.PropTypes.func,\n  onSelection: React.PropTypes.func,\n};\n\nclass RadioButtons extends React.Component {\n  constructor(){\n    super();\n    this.state = {\n      selectedOption: null,\n      selectedIndex: null,\n    };\n  }\n\n  copySelectedOptionFromProps({selectedOption, selectedIndex}){\n    this.setState({\n      selectedOption,\n      selectedIndex,\n    });\n  }\n\n  componentWillMount(){\n    this.copySelectedOptionFromProps(this.props);\n  }\n\n  componentWillReceiveProps(newProps){\n    this.copySelectedOptionFromProps(newProps);\n  }\n\n  selectOption(selectedOption, selectedIndex){\n    this.setState({\n      selectedOption,\n      selectedIndex,\n    });\n    this.props.onSelection(selectedOption, selectedIndex);\n  }\n\n  render() {\n    const {selectedOption, selectedIndex} = this.state;\n\n    const children = this.props.options.map(function(option, index){\n      const isSelected = selectedIndex === index || this.props.testOptionEqual(selectedOption, option);\n      const onSelection = this.selectOption.bind(this, option, index);\n\n      return this.props.renderOption(option, isSelected, onSelection, index);\n    }.bind(this));\n\n    return this.props.renderContainer(children);\n  }\n\n  static getTextOptionRenderer(normalStyle, selectedStyle, extractText) {\n    return function renderOption(option, selected, onSelect, index){\n      const style = selected ? selectedStyle : normalStyle;\n      const label = extractText ? extractText(option) : option;\n      return (\n        <TouchableWithoutFeedback onPress={onSelect} key={index}>\n          <Text style={style}>{label}</Text>\n        </TouchableWithoutFeedback>\n      );\n    };\n  }\n  static getViewContainerRenderer(style) {\n    return function renderContainer(options){\n      return <View style={style}>{options}</View>;\n    };\n  }\n}\n\nRadioButtons.renderHorizontalContainer = RadioButtons.getViewContainerRenderer({\n  flexDirection: 'row',\n});\n\nRadioButtons.renderVerticalContainer = RadioButtons.getViewContainerRenderer({\n  flexDirection: 'column'\n});\n\nRadioButtons.defaultProps = {\n  testOptionEqual(a, b){\n    return a === b;\n  },\n  renderOption: RadioButtons.getTextOptionRenderer({}, { fontWeight: 'bold' }),\n  renderContainer: RadioButtons.renderVerticalContainer,\n  onSelection(option){}\n};\nRadioButtons.propTypes = propTypes;\n\nmodule.exports = RadioButtons;\n"]}]