["b29c05090a96f0e6b16e006f80c917f0adb5ea2b","045a6a823e3b6c57874c9e2811f105633a2fe270",["CallbackQueue","PooledClass","Transaction","ReactInstrumentation","ReactUpdateQueue"],[44,88,130,181,237],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native/Libraries/Renderer/src/renderers/native/ReactNativeReconcileTransaction.js"],"names":["CallbackQueue","require","PooledClass","Transaction","ReactInstrumentation","ReactUpdateQueue","ON_DOM_READY_QUEUEING","initialize","reactMountReady","reset","close","notifyAll","TRANSACTION_WRAPPERS","__DEV__","push","debugTool","onBeginFlush","onEndFlush","ReactNativeReconcileTransaction","reinitializeTransaction","getPooled","Mixin","getTransactionWrappers","getReactMountReady","getUpdateQueue","checkpoint","rollback","destructor","release","prototype","addPoolingTo","module","exports"],"mappings":";AAWA;;AAEA,IAAIA,gBAAgBC,QAAQ,eAAR,CAApB;AACA,IAAIC,cAAcD,QAAQ,aAAR,CAAlB;AACA,IAAIE,cAAcF,QAAQ,aAAR,CAAlB;AACA,IAAIG,uBAAuBH,QAAQ,sBAAR,CAA3B;AACA,IAAII,mBAAmBJ,QAAQ,kBAAR,CAAvB;;AAMA,IAAIK,wBAAwB;AAI1BC,cAAY,sBAAW;AACrB,SAAKC,eAAL,CAAqBC,KAArB;AACD,GANyB;;AAW1BC,SAAO,iBAAW;AAChB,SAAKF,eAAL,CAAqBG,SAArB;AACD;AAbyB,CAA5B;;AAqBA,IAAIC,uBAAuB,CAACN,qBAAD,CAA3B;;AAEA,IAAIO,OAAJ,EAAa;AACXD,uBAAqBE,IAArB,CAA0B;AACxBP,gBAAYH,qBAAqBW,SAArB,CAA+BC,YADnB;AAExBN,WAAON,qBAAqBW,SAArB,CAA+BE;AAFd,GAA1B;AAID;;AAgBD,SAASC,+BAAT,GAA2C;AACzC,OAAKC,uBAAL;AACA,OAAKX,eAAL,GAAuBR,cAAcoB,SAAd,CAAwB,IAAxB,CAAvB;AACD;;AAED,IAAIC,QAAQ;AAQVC,0BAAwB,kCAAW;AACjC,WAAOV,oBAAP;AACD,GAVS;;AAgBVW,sBAAoB,8BAAW;AAC7B,WAAO,KAAKf,eAAZ;AACD,GAlBS;;AAuBVgB,kBAAgB,0BAAW;AACzB,WAAOnB,gBAAP;AACD,GAzBS;;AA+BVoB,cAAY,sBAAW;AAErB,WAAO,KAAKjB,eAAL,CAAqBiB,UAArB,EAAP;AACD,GAlCS;;AAoCVC,YAAU,kBAASD,UAAT,EAAqB;AAC7B,SAAKjB,eAAL,CAAqBkB,QAArB,CAA8BD,UAA9B;AACD,GAtCS;;AA4CVE,cAAY,sBAAW;AACrB3B,kBAAc4B,OAAd,CAAsB,KAAKpB,eAA3B;AACA,SAAKA,eAAL,GAAuB,IAAvB;AACD;AA/CS,CAAZ;;AAkDA,qBACEU,gCAAgCW,SADlC,EAEE1B,WAFF,EAGEe,+BAHF,EAIEG,KAJF;;AAOAnB,YAAY4B,YAAZ,CAAyBZ,+BAAzB;;AAEAa,OAAOC,OAAP,GAAiBd,+BAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactNativeReconcileTransaction\n * @flow\n */\n'use strict';\n\nvar CallbackQueue = require('CallbackQueue');\nvar PooledClass = require('PooledClass');\nvar Transaction = require('Transaction');\nvar ReactInstrumentation = require('ReactInstrumentation');\nvar ReactUpdateQueue = require('ReactUpdateQueue');\n\n/**\n * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks during\n * the performing of the transaction.\n */\nvar ON_DOM_READY_QUEUEING = {\n  /**\n   * Initializes the internal `onDOMReady` queue.\n   */\n  initialize: function() {\n    this.reactMountReady.reset();\n  },\n\n  /**\n   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.\n   */\n  close: function() {\n    this.reactMountReady.notifyAll();\n  },\n};\n\n/**\n * Executed within the scope of the `Transaction` instance. Consider these as\n * being member methods, but with an implied ordering while being isolated from\n * each other.\n */\nvar TRANSACTION_WRAPPERS = [ON_DOM_READY_QUEUEING];\n\nif (__DEV__) {\n  TRANSACTION_WRAPPERS.push({\n    initialize: ReactInstrumentation.debugTool.onBeginFlush,\n    close: ReactInstrumentation.debugTool.onEndFlush,\n  });\n}\n\n/**\n * Currently:\n * - The order that these are listed in the transaction is critical:\n * - Suppresses events.\n * - Restores selection range.\n *\n * Future:\n * - Restore document/overflow scroll positions that were unintentionally\n *   modified via DOM insertions above the top viewport boundary.\n * - Implement/integrate with customized constraint based layout system and keep\n *   track of which dimensions must be remeasured.\n *\n * @class ReactNativeReconcileTransaction\n */\nfunction ReactNativeReconcileTransaction() {\n  this.reinitializeTransaction();\n  this.reactMountReady = CallbackQueue.getPooled(null);\n}\n\nvar Mixin = {\n  /**\n   * @see Transaction\n   * @abstract\n   * @final\n   * @return {array<object>} List of operation wrap procedures.\n   *   TODO: convert to array<TransactionWrapper>\n   */\n  getTransactionWrappers: function() {\n    return TRANSACTION_WRAPPERS;\n  },\n\n  /**\n   * @return {object} The queue to collect `onDOMReady` callbacks with.\n   *   TODO: convert to ReactMountReady\n   */\n  getReactMountReady: function() {\n    return this.reactMountReady;\n  },\n\n  /**\n   * @return {object} The queue to collect React async events.\n   */\n  getUpdateQueue: function() {\n    return ReactUpdateQueue;\n  },\n\n  /**\n   * Save current transaction state -- if the return value from this method is\n   * passed to `rollback`, the transaction will be reset to that state.\n   */\n  checkpoint: function() {\n    // reactMountReady is the our only stateful wrapper\n    return this.reactMountReady.checkpoint();\n  },\n\n  rollback: function(checkpoint) {\n    this.reactMountReady.rollback(checkpoint);\n  },\n\n  /**\n   * `PooledClass` looks for this, and will invoke this before allowing this\n   * instance to be reused.\n   */\n  destructor: function() {\n    CallbackQueue.release(this.reactMountReady);\n    this.reactMountReady = null;\n  },\n};\n\nObject.assign(\n  ReactNativeReconcileTransaction.prototype,\n  Transaction,\n  ReactNativeReconcileTransaction,\n  Mixin,\n);\n\nPooledClass.addPoolingTo(ReactNativeReconcileTransaction);\n\nmodule.exports = ReactNativeReconcileTransaction;\n"]}]