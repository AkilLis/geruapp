["7504a10b64a7df3a36ec48bbaf774d8a5d3e5f23","b73be75eb714c7ad340e650f18d0659f2b425fb7",["react","prop-types","react-native"],[87,182,292],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native-progress/Bar.js"],"names":["INDETERMINATE_WIDTH_FACTOR","BAR_WIDTH_ZERO_POSITION","ProgressBar","props","handleLayout","event","width","setState","nativeEvent","layout","onLayout","progress","Math","min","max","state","Value","indeterminate","animationValue","animate","spring","toValue","start","animated","bounciness","setValue","timing","duration","easing","linear","isInteraction","endState","finished","borderColor","borderRadius","borderWidth","children","color","height","style","unfilledColor","restProps","innerWidth","containerStyle","overflow","backgroundColor","progressStyle","transform","translateX","interpolate","inputRange","outputRange","scaleX","propTypes","bool","string","number","node","func","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Animated,\n  Easing,\n  View,\n} from 'react-native';\n\nconst INDETERMINATE_WIDTH_FACTOR = 0.3;\nconst BAR_WIDTH_ZERO_POSITION = INDETERMINATE_WIDTH_FACTOR / (1 + INDETERMINATE_WIDTH_FACTOR);\n\nexport default class ProgressBar extends Component {\n  static propTypes = {\n    animated: PropTypes.bool,\n    borderColor: PropTypes.string,\n    borderRadius: PropTypes.number,\n    borderWidth: PropTypes.number,\n    children: PropTypes.node,\n    color: PropTypes.string,\n    height: PropTypes.number,\n    indeterminate: PropTypes.bool,\n    onLayout: PropTypes.func,\n    progress: PropTypes.number,\n    style: View.propTypes.style,\n    unfilledColor: PropTypes.string,\n    width: PropTypes.number,\n  };\n\n  static defaultProps = {\n    animated: true,\n    borderRadius: 4,\n    borderWidth: 1,\n    color: 'rgba(0, 122, 255, 1)',\n    height: 6,\n    indeterminate: false,\n    progress: 0,\n    width: 150,\n  };\n\n  constructor(props) {\n    super(props);\n    const progress = Math.min(Math.max(props.progress, 0), 1);\n    this.state = {\n      width: 0,\n      progress: new Animated.Value(props.indeterminate ? INDETERMINATE_WIDTH_FACTOR : progress),\n      animationValue: new Animated.Value(BAR_WIDTH_ZERO_POSITION),\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.indeterminate) {\n      this.animate();\n    }\n  }\n\n  componentWillReceiveProps(props) {\n    if (props.indeterminate !== this.props.indeterminate) {\n      if (props.indeterminate) {\n        this.animate();\n      } else {\n        Animated.spring(this.state.animationValue, {\n          toValue: BAR_WIDTH_ZERO_POSITION,\n        }).start();\n      }\n    }\n    if (\n      props.indeterminate !== this.props.indeterminate ||\n      props.progress !== this.props.progress\n    ) {\n      const progress = (props.indeterminate\n        ? INDETERMINATE_WIDTH_FACTOR\n        : Math.min(Math.max(props.progress, 0), 1)\n      );\n\n      if (props.animated) {\n        Animated.spring(this.state.progress, {\n          toValue: progress,\n          bounciness: 0,\n        }).start();\n      } else {\n        this.state.progress.setValue(progress);\n      }\n    }\n  }\n\n  animate() {\n    this.state.animationValue.setValue(0);\n    Animated.timing(this.state.animationValue, {\n      toValue: 1,\n      duration: 1000,\n      easing: Easing.linear,\n      isInteraction: false,\n    }).start((endState) => {\n      if (endState.finished) {\n        this.animate();\n      }\n    });\n  }\n\n  handleLayout = (event) => {\n    if (!this.props.width) {\n      this.setState({ width: event.nativeEvent.layout.width });\n    }\n    if (this.props.onLayout) {\n      this.props.onLayout(event);\n    }\n  };\n\n  render() {\n    const {\n      borderColor,\n      borderRadius,\n      borderWidth,\n      children,\n      color,\n      height,\n      style,\n      unfilledColor,\n      width,\n      ...restProps\n    } = this.props;\n\n    const innerWidth = Math.max(0, width || this.state.width) - (borderWidth * 2);\n    const containerStyle = {\n      width,\n      borderWidth,\n      borderColor: borderColor || color,\n      borderRadius,\n      overflow: 'hidden',\n      backgroundColor: unfilledColor,\n    };\n    const progressStyle = {\n      backgroundColor: color,\n      height,\n      transform: [{\n        translateX: this.state.animationValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: [innerWidth * -INDETERMINATE_WIDTH_FACTOR, innerWidth],\n        }),\n      }, {\n        translateX: this.state.progress.interpolate({\n          inputRange: [0, 1],\n          outputRange: [innerWidth / -2, 0],\n        }),\n      }, {\n        // Interpolation a temp workaround for https://github.com/facebook/react-native/issues/6278\n        scaleX: this.state.progress.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0.0001, 1],\n        }),\n      }],\n    };\n\n    return (\n      <View style={[containerStyle, style]} onLayout={this.handleLayout} {...restProps}>\n        <Animated.View style={progressStyle} />\n        {children}\n      </View>\n    );\n  }\n}\n"]}]