["07df924f870da4980f7eb0de83a6c4b0622670a4","6ab33b921140f6a733ae7b9dbe4f8d7fc1bffd50",["ReactNativeComponentTree","UIManager"],[55,108],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native/Libraries/Renderer/src/renderers/native/ReactNativeDOMIDOperations.js"],"names":["ReactNativeComponentTree","require","UIManager","dangerouslyProcessChildrenUpdates","inst","childrenUpdates","length","containerTag","getNodeFromInstance","moveFromIndices","moveToIndices","addChildTags","addAtIndices","removeAtIndices","i","update","type","push","fromIndex","toIndex","mountImage","content","tag","manageChildren","ReactNativeDOMIDOperations","dangerouslyReplaceNodeWithMarkupByID","id","oldTag","replaceExistingNonRootView","module","exports"],"mappings":";AAUA;;AAEA,IAAIA,2BAA2BC,QAAQ,0BAAR,CAA/B;AACA,IAAIC,YAAYD,QAAQ,WAAR,CAAhB;;AAcA,IAAIE,oCAAoC,SAApCA,iCAAoC,CAASC,IAAT,EAAeC,eAAf,EAAgC;AACtE,MAAI,CAACA,gBAAgBC,MAArB,EAA6B;AAC3B;AACD;;AAED,MAAIC,eAAeP,yBAAyBQ,mBAAzB,CAA6CJ,IAA7C,CAAnB;;AAEA,MAAIK,eAAJ;AACA,MAAIC,aAAJ;AACA,MAAIC,YAAJ;AACA,MAAIC,YAAJ;AACA,MAAIC,eAAJ;;AAEA,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIT,gBAAgBC,MAApC,EAA4CQ,GAA5C,EAAiD;AAC/C,QAAIC,SAASV,gBAAgBS,CAAhB,CAAb;AACA,QAAIC,OAAOC,IAAP,KAAgB,eAApB,EAAqC;AACnC,OAACP,oBAAoBA,kBAAkB,EAAtC,CAAD,EAA4CQ,IAA5C,CAAiDF,OAAOG,SAAxD;AACA,OAACR,kBAAkBA,gBAAgB,EAAlC,CAAD,EAAwCO,IAAxC,CAA6CF,OAAOI,OAApD;AACD,KAHD,MAGO,IAAIJ,OAAOC,IAAP,KAAgB,aAApB,EAAmC;AACxC,OAACH,oBAAoBA,kBAAkB,EAAtC,CAAD,EAA4CI,IAA5C,CAAiDF,OAAOG,SAAxD;AACD,KAFM,MAEA,IAAIH,OAAOC,IAAP,KAAgB,eAApB,EAAqC;AAC1C,UAAII,aAAaL,OAAOM,OAAxB;AACA,UAAIC,MAAMF,UAAV;AACA,OAACR,iBAAiBA,eAAe,EAAhC,CAAD,EAAsCK,IAAtC,CAA2CF,OAAOI,OAAlD;AACA,OAACR,iBAAiBA,eAAe,EAAhC,CAAD,EAAsCM,IAAtC,CAA2CK,GAA3C;AACD;AACF;;AAEDpB,YAAUqB,cAAV,CACEhB,YADF,EAEEE,eAFF,EAGEC,aAHF,EAIEC,YAJF,EAKEC,YALF,EAMEC,eANF;AAQD,CApCD;;AA0CA,IAAIW,6BAA6B;AAC/BrB,sEAD+B;;AAS/BsB,wCAAsC,8CAASC,EAAT,EAAaN,UAAb,EAAyB;AAC7D,QAAIO,SAASD,EAAb;AACAxB,cAAU0B,0BAAV,CAAqCD,MAArC,EAA6CP,UAA7C;AACD;AAZ8B,CAAjC;;AAeAS,OAAOC,OAAP,GAAiBN,0BAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactNativeDOMIDOperations\n */\n'use strict';\n\nvar ReactNativeComponentTree = require('ReactNativeComponentTree');\nvar UIManager = require('UIManager');\n\n/**\n * Updates a component's children by processing a series of updates.\n * For each of the update/create commands, the `fromIndex` refers to the index\n * that the item existed at *before* any of the updates are applied, and the\n * `toIndex` refers to the index after *all* of the updates are applied\n * (including deletes/moves). TODO: refactor so this can be shared with\n * DOMChildrenOperations.\n *\n * @param {ReactNativeBaseComponent} updates List of update configurations.\n * @param {array<string>} markup List of markup strings - in the case of React\n * IOS, the ids of new components assumed to be already created.\n */\nvar dangerouslyProcessChildrenUpdates = function(inst, childrenUpdates) {\n  if (!childrenUpdates.length) {\n    return;\n  }\n\n  var containerTag = ReactNativeComponentTree.getNodeFromInstance(inst);\n\n  var moveFromIndices;\n  var moveToIndices;\n  var addChildTags;\n  var addAtIndices;\n  var removeAtIndices;\n\n  for (var i = 0; i < childrenUpdates.length; i++) {\n    var update = childrenUpdates[i];\n    if (update.type === 'MOVE_EXISTING') {\n      (moveFromIndices || (moveFromIndices = [])).push(update.fromIndex);\n      (moveToIndices || (moveToIndices = [])).push(update.toIndex);\n    } else if (update.type === 'REMOVE_NODE') {\n      (removeAtIndices || (removeAtIndices = [])).push(update.fromIndex);\n    } else if (update.type === 'INSERT_MARKUP') {\n      var mountImage = update.content;\n      var tag = mountImage;\n      (addAtIndices || (addAtIndices = [])).push(update.toIndex);\n      (addChildTags || (addChildTags = [])).push(tag);\n    }\n  }\n\n  UIManager.manageChildren(\n    containerTag,\n    moveFromIndices,\n    moveToIndices,\n    addChildTags,\n    addAtIndices,\n    removeAtIndices,\n  );\n};\n\n/**\n * Operations used to process updates to DOM nodes. This is made injectable via\n * `ReactComponent.DOMIDOperations`.\n */\nvar ReactNativeDOMIDOperations = {\n  dangerouslyProcessChildrenUpdates,\n\n  /**\n   * Replaces a view that exists in the document with markup.\n   *\n   * @param {string} id ID of child to be replaced.\n   * @param {string} markup Mount image to replace child with id.\n   */\n  dangerouslyReplaceNodeWithMarkupByID: function(id, mountImage) {\n    var oldTag = id;\n    UIManager.replaceExistingNonRootView(oldTag, mountImage);\n  },\n};\n\nmodule.exports = ReactNativeDOMIDOperations;\n"]}]