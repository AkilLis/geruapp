["124d7ef856a27316e34e4703d654e402171d2368","143bc9e1ec4d273d5fcff57df4ed0d1d78b3beed",["EventPluginHub","EventPluginRegistry","ReactEventEmitterMixin","ReactNativeComponentTree","ReactNativeTagHandles","ReactGenericBatching","fbjs/lib/warning"],[45,98,159,225,290,351,399],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native/Libraries/Renderer/src/renderers/native/ReactNativeEventEmitter.js"],"names":["EventPluginHub","require","EventPluginRegistry","ReactEventEmitterMixin","ReactNativeComponentTree","ReactNativeTagHandles","ReactGenericBatching","warning","EMPTY_NATIVE_EVENT","touchSubsequence","touches","indices","ret","i","length","push","removeTouchesAtIndices","rippedOut","temp","index","fillAt","j","cur","ReactNativeEventEmitter","registrationNames","registrationNameModules","getListener","_receiveRootNodeIDEvent","rootNodeID","topLevelType","nativeEventParam","nativeEvent","inst","getInstanceFromNode","batchedUpdates","handleTopLevel","target","receiveEvent","tag","receiveTouches","eventTopLevelType","changedIndices","changedTouches","jj","touch","undefined","tagsStartAt","__DEV__","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactNativeEventEmitter\n * @flow\n */\n'use strict';\n\nvar EventPluginHub = require('EventPluginHub');\nvar EventPluginRegistry = require('EventPluginRegistry');\nvar ReactEventEmitterMixin = require('ReactEventEmitterMixin');\nvar ReactNativeComponentTree = require('ReactNativeComponentTree');\nvar ReactNativeTagHandles = require('ReactNativeTagHandles');\nvar ReactGenericBatching = require('ReactGenericBatching');\n\nvar warning = require('fbjs/lib/warning');\n\n/**\n * Version of `ReactBrowserEventEmitter` that works on the receiving side of a\n * serialized worker boundary.\n */\n\n// Shared default empty native event - conserve memory.\nvar EMPTY_NATIVE_EVENT = {};\n\n/**\n * Selects a subsequence of `Touch`es, without destroying `touches`.\n *\n * @param {Array<Touch>} touches Deserialized touch objects.\n * @param {Array<number>} indices Indices by which to pull subsequence.\n * @return {Array<Touch>} Subsequence of touch objects.\n */\nvar touchSubsequence = function(touches, indices) {\n  var ret = [];\n  for (var i = 0; i < indices.length; i++) {\n    ret.push(touches[indices[i]]);\n  }\n  return ret;\n};\n\n/**\n * TODO: Pool all of this.\n *\n * Destroys `touches` by removing touch objects at indices `indices`. This is\n * to maintain compatibility with W3C touch \"end\" events, where the active\n * touches don't include the set that has just been \"ended\".\n *\n * @param {Array<Touch>} touches Deserialized touch objects.\n * @param {Array<number>} indices Indices to remove from `touches`.\n * @return {Array<Touch>} Subsequence of removed touch objects.\n */\nvar removeTouchesAtIndices = function(\n  touches: Array<Object>,\n  indices: Array<number>,\n): Array<Object> {\n  var rippedOut = [];\n  // use an unsafe downcast to alias to nullable elements,\n  // so we can delete and then compact.\n  var temp: Array<?Object> = (touches: Array<any>);\n  for (var i = 0; i < indices.length; i++) {\n    var index = indices[i];\n    rippedOut.push(touches[index]);\n    temp[index] = null;\n  }\n  var fillAt = 0;\n  for (var j = 0; j < temp.length; j++) {\n    var cur = temp[j];\n    if (cur !== null) {\n      temp[fillAt++] = cur;\n    }\n  }\n  temp.length = fillAt;\n  return rippedOut;\n};\n\nvar ReactNativeEventEmitter = {\n  ...ReactEventEmitterMixin,\n\n  registrationNames: EventPluginRegistry.registrationNameModules,\n\n  getListener: EventPluginHub.getListener,\n\n  /**\n   * Internal version of `receiveEvent` in terms of normalized (non-tag)\n   * `rootNodeID`.\n   *\n   * @see receiveEvent.\n   *\n   * @param {rootNodeID} rootNodeID React root node ID that event occurred on.\n   * @param {TopLevelType} topLevelType Top level type of event.\n   * @param {object} nativeEventParam Object passed from native.\n   */\n  _receiveRootNodeIDEvent: function(\n    rootNodeID: number,\n    topLevelType: string,\n    nativeEventParam: Object,\n  ) {\n    var nativeEvent = nativeEventParam || EMPTY_NATIVE_EVENT;\n    var inst = ReactNativeComponentTree.getInstanceFromNode(rootNodeID);\n    ReactGenericBatching.batchedUpdates(function() {\n      ReactNativeEventEmitter.handleTopLevel(\n        topLevelType,\n        inst,\n        nativeEvent,\n        nativeEvent.target,\n      );\n    });\n    // React Native doesn't use ReactControlledComponent but if it did, here's\n    // where it would do it.\n  },\n\n  /**\n   * Publicly exposed method on module for native objc to invoke when a top\n   * level event is extracted.\n   * @param {rootNodeID} rootNodeID React root node ID that event occurred on.\n   * @param {TopLevelType} topLevelType Top level type of event.\n   * @param {object} nativeEventParam Object passed from native.\n   */\n  receiveEvent: function(\n    tag: number,\n    topLevelType: string,\n    nativeEventParam: Object,\n  ) {\n    var rootNodeID = tag;\n    ReactNativeEventEmitter._receiveRootNodeIDEvent(\n      rootNodeID,\n      topLevelType,\n      nativeEventParam,\n    );\n  },\n\n  /**\n   * Simple multi-wrapper around `receiveEvent` that is intended to receive an\n   * efficient representation of `Touch` objects, and other information that\n   * can be used to construct W3C compliant `Event` and `Touch` lists.\n   *\n   * This may create dispatch behavior that differs than web touch handling. We\n   * loop through each of the changed touches and receive it as a single event.\n   * So two `touchStart`/`touchMove`s that occur simultaneously are received as\n   * two separate touch event dispatches - when they arguably should be one.\n   *\n   * This implementation reuses the `Touch` objects themselves as the `Event`s\n   * since we dispatch an event for each touch (though that might not be spec\n   * compliant). The main purpose of reusing them is to save allocations.\n   *\n   * TODO: Dispatch multiple changed touches in one event. The bubble path\n   * could be the first common ancestor of all the `changedTouches`.\n   *\n   * One difference between this behavior and W3C spec: cancelled touches will\n   * not appear in `.touches`, or in any future `.touches`, though they may\n   * still be \"actively touching the surface\".\n   *\n   * Web desktop polyfills only need to construct a fake touch event with\n   * identifier 0, also abandoning traditional click handlers.\n   */\n  receiveTouches: function(\n    eventTopLevelType: string,\n    touches: Array<Object>,\n    changedIndices: Array<number>,\n  ) {\n    var changedTouches = eventTopLevelType === 'topTouchEnd' ||\n      eventTopLevelType === 'topTouchCancel'\n      ? removeTouchesAtIndices(touches, changedIndices)\n      : touchSubsequence(touches, changedIndices);\n\n    for (var jj = 0; jj < changedTouches.length; jj++) {\n      var touch = changedTouches[jj];\n      // Touch objects can fulfill the role of `DOM` `Event` objects if we set\n      // the `changedTouches`/`touches`. This saves allocations.\n      touch.changedTouches = changedTouches;\n      touch.touches = touches;\n      var nativeEvent = touch;\n      var rootNodeID = null;\n      var target = nativeEvent.target;\n      if (target !== null && target !== undefined) {\n        if (target < ReactNativeTagHandles.tagsStartAt) {\n          if (__DEV__) {\n            warning(\n              false,\n              'A view is reporting that a touch occurred on tag zero.',\n            );\n          }\n        } else {\n          rootNodeID = target;\n        }\n      }\n      ReactNativeEventEmitter._receiveRootNodeIDEvent(\n        rootNodeID,\n        eventTopLevelType,\n        nativeEvent,\n      );\n    }\n  },\n};\n\nmodule.exports = ReactNativeEventEmitter;\n"]}]