["d63224639125a5f44b068e3d7de49ea8d03e83f6","f0e0fb62129e61c69df9f21f35891ec5021831b7",["ReactDebugTool","fbjs/lib/warning"],[46,87],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native/Libraries/Renderer/src/renderers/shared/ReactPerf.js"],"names":["ReactDebugTool","require","warning","alreadyWarned","roundFloat","val","base","n","Math","pow","floor","consoleTable","table","console","warnInProduction","error","getLastMeasurements","__DEV__","getFlushHistory","getExclusive","flushHistory","aggregatedStats","affectedIDs","updateAggregatedStats","treeSnapshot","instanceID","timerType","applyUpdate","displayName","key","stats","instanceCount","counts","durations","totalDuration","forEach","measurements","flush","duration","measurement","Object","keys","map","length","sort","a","b","getInclusive","ownerID","owner","inclusiveRenderDuration","renderCount","isCompositeByID","nextParentID","parentID","getWasted","operations","isDefinitelyNotWastedByID","operation","renderedCompositeIDs","updateCount","isWasted","getOperations","flushIndex","type","payload","push","printExclusive","item","render","renderDuration","Component","undefined","printInclusive","printWasted","printOperations","stat","Operation","Payload","JSON","stringify","warnedAboutPrintDOM","printDOM","warnedAboutGetMeasurementsSummaryMap","getMeasurementsSummaryMap","start","beginProfiling","stop","endProfiling","isRunning","isProfiling","ReactPerfAnalysis","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2016-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactPerf\n * @flow\n */\n\n'use strict';\n\nvar ReactDebugTool = require('ReactDebugTool');\nvar warning = require('fbjs/lib/warning');\nvar alreadyWarned = false;\n\nimport type {FlushHistory} from 'ReactDebugTool';\n\nfunction roundFloat(val, base = 2) {\n  var n = Math.pow(10, base);\n  return Math.floor(val * n) / n;\n}\n\n// Flow type definition of console.table is too strict right now, see\n// https://github.com/facebook/flow/pull/2353 for updates\nfunction consoleTable(table: Array<{[key: string]: any}>): void {\n  console.table((table: any));\n}\n\nfunction warnInProduction() {\n  if (alreadyWarned) {\n    return;\n  }\n  alreadyWarned = true;\n  if (typeof console !== 'undefined') {\n    console.error(\n      'ReactPerf is not supported in the production builds of React. ' +\n        'To collect measurements, please use the development build of React instead.',\n    );\n  }\n}\n\nfunction getLastMeasurements() {\n  if (!__DEV__) {\n    warnInProduction();\n    return [];\n  }\n\n  return ReactDebugTool.getFlushHistory();\n}\n\nfunction getExclusive(flushHistory = getLastMeasurements()) {\n  if (!__DEV__) {\n    warnInProduction();\n    return [];\n  }\n\n  var aggregatedStats = {};\n  var affectedIDs = {};\n\n  function updateAggregatedStats(\n    treeSnapshot,\n    instanceID,\n    timerType,\n    applyUpdate,\n  ) {\n    var {displayName} = treeSnapshot[instanceID];\n    var key = displayName;\n    var stats = aggregatedStats[key];\n    if (!stats) {\n      affectedIDs[key] = {};\n      stats = (aggregatedStats[key] = {\n        key,\n        instanceCount: 0,\n        counts: {},\n        durations: {},\n        totalDuration: 0,\n      });\n    }\n    if (!stats.durations[timerType]) {\n      stats.durations[timerType] = 0;\n    }\n    if (!stats.counts[timerType]) {\n      stats.counts[timerType] = 0;\n    }\n    affectedIDs[key][instanceID] = true;\n    applyUpdate(stats);\n  }\n\n  flushHistory.forEach(flush => {\n    var {measurements, treeSnapshot} = flush;\n    measurements.forEach(measurement => {\n      var {duration, instanceID, timerType} = measurement;\n      updateAggregatedStats(treeSnapshot, instanceID, timerType, stats => {\n        stats.totalDuration += duration;\n        stats.durations[timerType] += duration;\n        stats.counts[timerType]++;\n      });\n    });\n  });\n\n  return Object.keys(aggregatedStats)\n    .map(key => ({\n      ...aggregatedStats[key],\n      instanceCount: Object.keys(affectedIDs[key]).length,\n    }))\n    .sort((a, b) => b.totalDuration - a.totalDuration);\n}\n\nfunction getInclusive(flushHistory = getLastMeasurements()) {\n  if (!__DEV__) {\n    warnInProduction();\n    return [];\n  }\n\n  var aggregatedStats = {};\n  var affectedIDs = {};\n\n  function updateAggregatedStats(treeSnapshot, instanceID, applyUpdate) {\n    var {displayName, ownerID} = treeSnapshot[instanceID];\n    var owner = treeSnapshot[ownerID];\n    var key = (owner ? owner.displayName + ' > ' : '') + displayName;\n    var stats = aggregatedStats[key];\n    if (!stats) {\n      affectedIDs[key] = {};\n      stats = (aggregatedStats[key] = {\n        key,\n        instanceCount: 0,\n        inclusiveRenderDuration: 0,\n        renderCount: 0,\n      });\n    }\n    affectedIDs[key][instanceID] = true;\n    applyUpdate(stats);\n  }\n\n  var isCompositeByID = {};\n  flushHistory.forEach(flush => {\n    var {measurements} = flush;\n    measurements.forEach(measurement => {\n      var {instanceID, timerType} = measurement;\n      if (timerType !== 'render') {\n        return;\n      }\n      isCompositeByID[instanceID] = true;\n    });\n  });\n\n  flushHistory.forEach(flush => {\n    var {measurements, treeSnapshot} = flush;\n    measurements.forEach(measurement => {\n      var {duration, instanceID, timerType} = measurement;\n      if (timerType !== 'render') {\n        return;\n      }\n      updateAggregatedStats(treeSnapshot, instanceID, stats => {\n        stats.renderCount++;\n      });\n      var nextParentID = instanceID;\n      while (nextParentID) {\n        // As we traverse parents, only count inclusive time towards composites.\n        // We know something is a composite if its render() was called.\n        if (isCompositeByID[nextParentID]) {\n          updateAggregatedStats(treeSnapshot, nextParentID, stats => {\n            stats.inclusiveRenderDuration += duration;\n          });\n        }\n        nextParentID = treeSnapshot[nextParentID].parentID;\n      }\n    });\n  });\n\n  return Object.keys(aggregatedStats)\n    .map(key => ({\n      ...aggregatedStats[key],\n      instanceCount: Object.keys(affectedIDs[key]).length,\n    }))\n    .sort((a, b) => b.inclusiveRenderDuration - a.inclusiveRenderDuration);\n}\n\nfunction getWasted(flushHistory = getLastMeasurements()) {\n  if (!__DEV__) {\n    warnInProduction();\n    return [];\n  }\n\n  var aggregatedStats = {};\n  var affectedIDs = {};\n\n  function updateAggregatedStats(treeSnapshot, instanceID, applyUpdate) {\n    var {displayName, ownerID} = treeSnapshot[instanceID];\n    var owner = treeSnapshot[ownerID];\n    var key = (owner ? owner.displayName + ' > ' : '') + displayName;\n    var stats = aggregatedStats[key];\n    if (!stats) {\n      affectedIDs[key] = {};\n      stats = (aggregatedStats[key] = {\n        key,\n        instanceCount: 0,\n        inclusiveRenderDuration: 0,\n        renderCount: 0,\n      });\n    }\n    affectedIDs[key][instanceID] = true;\n    applyUpdate(stats);\n  }\n\n  flushHistory.forEach(flush => {\n    var {measurements, treeSnapshot, operations} = flush;\n    var isDefinitelyNotWastedByID = {};\n\n    // Find host components associated with an operation in this batch.\n    // Mark all components in their parent tree as definitely not wasted.\n    operations.forEach(operation => {\n      var {instanceID} = operation;\n      var nextParentID = instanceID;\n      while (nextParentID) {\n        isDefinitelyNotWastedByID[nextParentID] = true;\n        nextParentID = treeSnapshot[nextParentID].parentID;\n      }\n    });\n\n    // Find composite components that rendered in this batch.\n    // These are potential candidates for being wasted renders.\n    var renderedCompositeIDs = {};\n    measurements.forEach(measurement => {\n      var {instanceID, timerType} = measurement;\n      if (timerType !== 'render') {\n        return;\n      }\n      renderedCompositeIDs[instanceID] = true;\n    });\n\n    measurements.forEach(measurement => {\n      var {duration, instanceID, timerType} = measurement;\n      if (timerType !== 'render') {\n        return;\n      }\n\n      // If there was a DOM update below this component, or it has just been\n      // mounted, its render() is not considered wasted.\n      var {updateCount} = treeSnapshot[instanceID];\n      if (isDefinitelyNotWastedByID[instanceID] || updateCount === 0) {\n        return;\n      }\n\n      // We consider this render() wasted.\n      updateAggregatedStats(treeSnapshot, instanceID, stats => {\n        stats.renderCount++;\n      });\n\n      var nextParentID = instanceID;\n      while (nextParentID) {\n        // Any parents rendered during this batch are considered wasted\n        // unless we previously marked them as dirty.\n        var isWasted = renderedCompositeIDs[nextParentID] &&\n          !isDefinitelyNotWastedByID[nextParentID];\n        if (isWasted) {\n          updateAggregatedStats(treeSnapshot, nextParentID, stats => {\n            stats.inclusiveRenderDuration += duration;\n          });\n        }\n        nextParentID = treeSnapshot[nextParentID].parentID;\n      }\n    });\n  });\n\n  return Object.keys(aggregatedStats)\n    .map(key => ({\n      ...aggregatedStats[key],\n      instanceCount: Object.keys(affectedIDs[key]).length,\n    }))\n    .sort((a, b) => b.inclusiveRenderDuration - a.inclusiveRenderDuration);\n}\n\nfunction getOperations(flushHistory = getLastMeasurements()) {\n  if (!__DEV__) {\n    warnInProduction();\n    return [];\n  }\n\n  var stats = [];\n  flushHistory.forEach((flush, flushIndex) => {\n    var {operations, treeSnapshot} = flush;\n    operations.forEach(operation => {\n      var {instanceID, type, payload} = operation;\n      var {displayName, ownerID} = treeSnapshot[instanceID];\n      var owner = treeSnapshot[ownerID];\n      var key = (owner ? owner.displayName + ' > ' : '') + displayName;\n\n      stats.push({\n        flushIndex,\n        instanceID,\n        key,\n        type,\n        ownerID,\n        payload,\n      });\n    });\n  });\n  return stats;\n}\n\nfunction printExclusive(flushHistory?: FlushHistory) {\n  if (!__DEV__) {\n    warnInProduction();\n    return;\n  }\n\n  var stats = getExclusive(flushHistory);\n  var table = stats.map(item => {\n    var {key, instanceCount, totalDuration} = item;\n    var renderCount = item.counts.render || 0;\n    var renderDuration = item.durations.render || 0;\n    return {\n      Component: key,\n      'Total time (ms)': roundFloat(totalDuration),\n      'Instance count': instanceCount,\n      'Total render time (ms)': roundFloat(renderDuration),\n      'Average render time (ms)': renderCount\n        ? roundFloat(renderDuration / renderCount)\n        : undefined,\n      'Render count': renderCount,\n      'Total lifecycle time (ms)': roundFloat(totalDuration - renderDuration),\n    };\n  });\n  consoleTable(table);\n}\n\nfunction printInclusive(flushHistory?: FlushHistory) {\n  if (!__DEV__) {\n    warnInProduction();\n    return;\n  }\n\n  var stats = getInclusive(flushHistory);\n  var table = stats.map(item => {\n    var {key, instanceCount, inclusiveRenderDuration, renderCount} = item;\n    return {\n      'Owner > Component': key,\n      'Inclusive render time (ms)': roundFloat(inclusiveRenderDuration),\n      'Instance count': instanceCount,\n      'Render count': renderCount,\n    };\n  });\n  consoleTable(table);\n}\n\nfunction printWasted(flushHistory?: FlushHistory) {\n  if (!__DEV__) {\n    warnInProduction();\n    return;\n  }\n\n  var stats = getWasted(flushHistory);\n  var table = stats.map(item => {\n    var {key, instanceCount, inclusiveRenderDuration, renderCount} = item;\n    return {\n      'Owner > Component': key,\n      'Inclusive wasted time (ms)': roundFloat(inclusiveRenderDuration),\n      'Instance count': instanceCount,\n      'Render count': renderCount,\n    };\n  });\n  consoleTable(table);\n}\n\nfunction printOperations(flushHistory?: FlushHistory) {\n  if (!__DEV__) {\n    warnInProduction();\n    return;\n  }\n\n  var stats = getOperations(flushHistory);\n  var table = stats.map(stat => ({\n    'Owner > Node': stat.key,\n    Operation: stat.type,\n    Payload: typeof stat.payload === 'object'\n      ? JSON.stringify(stat.payload)\n      : stat.payload,\n    'Flush index': stat.flushIndex,\n    'Owner Component ID': stat.ownerID,\n    'DOM Component ID': stat.instanceID,\n  }));\n  consoleTable(table);\n}\n\nvar warnedAboutPrintDOM = false;\nfunction printDOM(measurements: FlushHistory) {\n  warning(\n    warnedAboutPrintDOM,\n    '`ReactPerf.printDOM(...)` is deprecated. Use ' +\n      '`ReactPerf.printOperations(...)` instead.',\n  );\n  warnedAboutPrintDOM = true;\n  return printOperations(measurements);\n}\n\nvar warnedAboutGetMeasurementsSummaryMap = false;\nfunction getMeasurementsSummaryMap(measurements: FlushHistory) {\n  warning(\n    warnedAboutGetMeasurementsSummaryMap,\n    '`ReactPerf.getMeasurementsSummaryMap(...)` is deprecated. Use ' +\n      '`ReactPerf.getWasted(...)` instead.',\n  );\n  warnedAboutGetMeasurementsSummaryMap = true;\n  return getWasted(measurements);\n}\n\nfunction start() {\n  if (!__DEV__) {\n    warnInProduction();\n    return;\n  }\n\n  ReactDebugTool.beginProfiling();\n}\n\nfunction stop() {\n  if (!__DEV__) {\n    warnInProduction();\n    return;\n  }\n\n  ReactDebugTool.endProfiling();\n}\n\nfunction isRunning() {\n  if (!__DEV__) {\n    warnInProduction();\n    return false;\n  }\n\n  return ReactDebugTool.isProfiling();\n}\n\nvar ReactPerfAnalysis = {\n  getLastMeasurements,\n  getExclusive,\n  getInclusive,\n  getWasted,\n  getOperations,\n  printExclusive,\n  printInclusive,\n  printWasted,\n  printOperations,\n  start,\n  stop,\n  isRunning,\n  // Deprecated:\n  printDOM,\n  getMeasurementsSummaryMap,\n};\n\nmodule.exports = ReactPerfAnalysis;\n"]}]