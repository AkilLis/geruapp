["d77373db5cc65c5acceb6577d1dc143f068702af","7a50112e94366de2ce8813799e4fc83d37f708c1",["Batchinator","React","ReactNative","RefreshControl","ScrollView","View","ViewabilityHelper","infoLog","fbjs/lib/invariant","VirtualizeUtils"],[42,78,114,159,203,237,278,323,359,406],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native/Libraries/Lists/VirtualizedList.js"],"names":["Batchinator","require","React","ReactNative","RefreshControl","ScrollView","View","ViewabilityHelper","infoLog","invariant","computeWindowedRenderLimits","_usedIndexForKey","VirtualizedList","params","animated","veryLast","props","getItemCount","data","frame","_getFrameMetricsApprox","offset","length","_footerLength","_scrollMetrics","visibleLength","_scrollRef","scrollTo","horizontal","x","y","getItemLayout","index","viewPosition","_highestMeasuredFrameIndex","Math","max","item","getItem","itemCount","scrollToIndex","_viewabilityHelper","recordInteraction","_updateViewableItems","getScrollableNode","findNodeHandle","onScroll","__isNative","_updateCellsToRenderBatcher","_updateCellsToRender","updateCellsBatchingPeriod","viewabilityConfig","state","first","last","min","initialNumToRender","dispose","newProps","extraData","maxToRenderPerBatch","setState","_hasDataChangedSinceEndReached","schedule","cells","stickyHeaderIndices","stickyIndicesFromProps","ItemSeparatorComponent","keyExtractor","stickyOffset","ListHeaderComponent","end","ii","key","has","push","e","_onCellLayout","_onCellUnmount","ListFooterComponent","disableVirtualization","Set","_onLayoutHeader","spacerKey","lastInitialIndex","_pushCells","firstAfterInitial","insertedStickySpacer","size","initBlock","stickyBlock","leadSpace","trailSpace","firstSpace","_hasWarned","keys","console","warn","lastFrame","endFrame","tailSpacerLength","_onLayoutFooter","ret","cloneElement","renderScrollComponent","onContentSizeChange","_onContentSizeChange","onLayout","_onLayout","_onScroll","onScrollBeginDrag","_onScrollBeginDrag","ref","_captureScrollRef","scrollEventThrottle","debug","flex","_renderDebugOverlay","cellKey","layout","nativeEvent","next","_selectOffset","_selectLength","inLayout","curr","_frames","_totalCellLength","_totalCellsMeasured","_averageCellLength","normalize","contentLength","framesInLayout","windowTop","frameLast","windowLen","visTop","visLen","baseStyle","position","top","right","bottom","width","borderColor","borderWidth","map","f","left","height","backgroundColor","metrics","onViewableItemsChanged","onUpdate","_getFrameMetrics","_createViewToken","PureComponent","defaultProps","String","onEndReached","onEndReachedThreshold","removeClippedSubviews","onRefresh","refreshing","JSON","stringify","windowSize","_headerLength","dt","velocity","timestamp","_sentEndForContentLength","timeStamp","layoutMeasurement","contentSize","contentOffset","perf","prevDt","dOffset","distanceFromEnd","distanceToContentEdge","abs","hiPri","abort","newState","renderAhead","isViewable","CellRenderer","onUnmount","parentProps","renderItem","element","Component","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule VirtualizedList\n * @flow\n */\n'use strict';\n\nconst Batchinator = require('Batchinator');\nconst React = require('React');\nconst ReactNative = require('ReactNative');\nconst RefreshControl = require('RefreshControl');\nconst ScrollView = require('ScrollView');\nconst View = require('View');\nconst ViewabilityHelper = require('ViewabilityHelper');\n\nconst infoLog = require('infoLog');\nconst invariant = require('fbjs/lib/invariant');\n\nconst {computeWindowedRenderLimits} = require('VirtualizeUtils');\n\nimport type {ViewabilityConfig, ViewToken} from 'ViewabilityHelper';\n\ntype Item = any;\ntype renderItemType = (info: {item: Item, index: number}) => ?React.Element<any>;\n\ntype RequiredProps = {\n  renderItem: renderItemType,\n  /**\n   * The default accessor functions assume this is an Array<{key: string}> but you can override\n   * getItem, getItemCount, and keyExtractor to handle any type of index-based data.\n   */\n  data?: any,\n};\ntype OptionalProps = {\n  /**\n   * `debug` will turn on extra logging and visual overlays to aid with debugging both usage and\n   * implementation, but with a significant perf hit.\n   */\n  debug?: ?boolean,\n  /**\n   * DEPRECATED: Virtualization provides significant performance and memory optimizations, but fully\n   * unmounts react instances that are outside of the render window. You should only need to disable\n   * this for debugging purposes.\n   */\n  disableVirtualization: boolean,\n  /**\n   * A marker property for telling the list to re-render (since it implements `PureComponent`). If\n   * any of your `renderItem`, Header, Footer, etc. functions depend on anything outside of the\n   * `data` prop, stick it here and treat it immutably.\n   */\n  extraData?: any,\n  /**\n   * A generic accessor for extracting an item from any sort of data blob.\n   */\n  getItem: (data: any, index: number) => ?Item,\n  /**\n   * Determines how many items are in the data blob.\n   */\n  getItemCount: (data: any) => number,\n  getItemLayout?: (data: any, index: number) =>\n    {length: number, offset: number, index: number}, // e.g. height, y\n  horizontal?: ?boolean,\n  /**\n   * How many items to render in the initial batch. This should be enough to fill the screen but not\n   * much more. Note these items will never be unmounted as part of the windowed rendering in order\n   * to improve perceived performance of scroll-to-top actions.\n   */\n  initialNumToRender: number,\n  keyExtractor: (item: Item, index: number) => string,\n  /**\n   * The maximum number of items to render in each incremental render batch. The more rendered at\n   * once, the better the fill rate, but responsiveness my suffer because rendering content may\n   * interfere with responding to button taps or other interactions.\n   */\n  maxToRenderPerBatch: number,\n  onEndReached?: ?(info: {distanceFromEnd: number}) => void,\n  onEndReachedThreshold?: ?number, // units of visible length\n  onLayout?: ?Function,\n  /**\n   * If provided, a standard RefreshControl will be added for \"Pull to Refresh\" functionality. Make\n   * sure to also set the `refreshing` prop correctly.\n   */\n  onRefresh?: ?Function,\n  /**\n   * Called when the viewability of rows changes, as defined by the\n   * `viewabilityConfig` prop.\n   */\n  onViewableItemsChanged?: ?(info: {\n    viewableItems: Array<ViewToken>,\n    changed: Array<ViewToken>,\n  }) => void,\n  /**\n   * Set this true while waiting for new data from a refresh.\n   */\n  refreshing?: ?boolean,\n  /**\n   * A native optimization that removes clipped subviews (those outside the parent) from the view\n   * hierarchy to offload work from the native rendering system. They are still kept around so no\n   * memory is saved and state is preserved.\n   */\n  removeClippedSubviews?: boolean,\n  /**\n   * Render a custom scroll component, e.g. with a differently styled `RefreshControl`.\n   */\n  renderScrollComponent: (props: Object) => React.Element<any>,\n  /**\n   * Amount of time between low-pri item render batches, e.g. for rendering items quite a ways off\n   * screen. Similar fill rate/responsiveness tradeoff as `maxToRenderPerBatch`.\n   */\n  updateCellsBatchingPeriod: number,\n  viewabilityConfig?: ViewabilityConfig,\n  /**\n   * Determines the maximum number of items rendered outside of the visible area, in units of\n   * visible lengths. So if your list fills the screen, then `windowSize={21}` (the default) will\n   * render the visible screen area plus up to 10 screens above and 10 below the viewport. Reducing\n   * this number will reduce memory consumption and may improve performance, but will increase the\n   * chance that fast scrolling may reveal momentary blank areas of unrendered content.\n   */\n  windowSize: number,\n};\nexport type Props = RequiredProps & OptionalProps;\n\nlet _usedIndexForKey = false;\n\ntype State = {first: number, last: number};\n\n/**\n * Base implementation for the more convenient [`<FlatList>`](/react-native/docs/flatlist.html)\n * and [`<SectionList>`](/react-native/docs/sectionlist.html) components, which are also better\n * documented. In general, this should only really be used if you need more flexibility than\n * `FlatList` provides, e.g. for use with immutable data instead of plain arrays.\n *\n * Virtualization massively improves memory consumption and performance of large lists by\n * maintaining a finite render window of active items and replacing all items outside of the render\n * window with appropriately sized blank space. The window adapts to scrolling behavior, and items\n * are rendered incrementally with low-pri (after any running interactions) if they are far from the\n * visible area, or with hi-pri otherwise to minimize the potential of seeing blank space.\n *\n * Some caveats:\n *\n * - Internal state is not preserved when content scrolls out of the render window. Make sure all\n *   your data is captured in the item data or external stores like Flux, Redux, or Relay.\n * - This is a `PureComponent` which means that it will not re-render if `props` remain shallow-\n *   equal. Make sure that everything your `renderItem` function depends on is passed as a prop that\n *   is not `===` after updates, otherwise your UI may not update on changes. This includes the\n *   `data` prop and parent component state.\n * - In order to constrain memory and enable smooth scrolling, content is rendered asynchronously\n *   offscreen. This means it's possible to scroll faster than the fill rate ands momentarily see\n *   blank content. This is a tradeoff that can be adjusted to suit the needs of each application,\n *   and we are working on improving it behind the scenes.\n * - By default, the list looks for a `key` prop on each item and uses that for the React key.\n *   Alternatively, you can provide a custom `keyExtractor` prop.\n *\n * NOTE: `LayoutAnimation` and sticky section headers both have bugs when used with this and are\n * therefore not officially supported yet.\n *\n * NOTE: `removeClippedSubviews` might not be necessary and may cause bugs. If you see issues with\n * content not rendering, try disabling it, and we may change the default there.\n */\nclass VirtualizedList extends React.PureComponent<OptionalProps, Props, State> {\n  props: Props;\n\n  // scrollToEnd may be janky without getItemLayout prop\n  scrollToEnd(params?: ?{animated?: ?boolean}) {\n    const animated = params ? params.animated : true;\n    const veryLast = this.props.getItemCount(this.props.data) - 1;\n    const frame = this._getFrameMetricsApprox(veryLast);\n    const offset = frame.offset + frame.length + this._footerLength -\n      this._scrollMetrics.visibleLength;\n    this._scrollRef.scrollTo(\n      this.props.horizontal ? {x: offset, animated} : {y: offset, animated}\n    );\n  }\n\n  // scrollToIndex may be janky without getItemLayout prop\n  scrollToIndex(params: {animated?: ?boolean, index: number, viewPosition?: number}) {\n    const {data, horizontal, getItemCount, getItemLayout} = this.props;\n    const {animated, index, viewPosition} = params;\n    invariant(\n      index >= 0 && index < getItemCount(data),\n      `scrollToIndex out of range: ${index} vs ${getItemCount(data) - 1}`,\n    );\n    invariant(\n      getItemLayout || index < this._highestMeasuredFrameIndex,\n      'scrollToIndex should be used in conjunction with getItemLayout, ' +\n        'otherwise there is no way to know the location of an arbitrary index.',\n    );\n    const frame = this._getFrameMetricsApprox(index);\n    const offset = Math.max(\n      0,\n      frame.offset - (viewPosition || 0) * (this._scrollMetrics.visibleLength - frame.length),\n    );\n    this._scrollRef.scrollTo(horizontal ? {x: offset, animated} : {y: offset, animated});\n  }\n\n  // scrollToItem may be janky without getItemLayout prop. Required linear scan through items -\n  // use scrollToIndex instead if possible.\n  scrollToItem(params: {animated?: ?boolean, item: Item, viewPosition?: number}) {\n    const {item} = params;\n    const {data, getItem, getItemCount} = this.props;\n    const itemCount = getItemCount(data);\n    for (let index = 0; index < itemCount; index++) {\n      if (getItem(data, index) === item) {\n        this.scrollToIndex({...params, index});\n        break;\n      }\n    }\n  }\n\n  scrollToOffset(params: {animated?: ?boolean, offset: number}) {\n    const {animated, offset} = params;\n    this._scrollRef.scrollTo(\n      this.props.horizontal ? {x: offset, animated} : {y: offset, animated}\n    );\n  }\n\n  recordInteraction() {\n    this._viewabilityHelper.recordInteraction();\n    this._updateViewableItems(this.props.data);\n  }\n\n  getScrollableNode() {\n    if (this._scrollRef && this._scrollRef.getScrollableNode) {\n      return this._scrollRef.getScrollableNode();\n    } else {\n      return ReactNative.findNodeHandle(this._scrollRef);\n    }\n  }\n\n  static defaultProps = {\n    disableVirtualization: false,\n    getItem: (data: any, index: number) => data[index],\n    getItemCount: (data: any) => data ? data.length : 0,\n    horizontal: false,\n    initialNumToRender: 10,\n    keyExtractor: (item: Item, index: number) => {\n      if (item.key != null) {\n        return item.key;\n      }\n      _usedIndexForKey = true;\n      return String(index);\n    },\n    maxToRenderPerBatch: 10,\n    onEndReached: () => {},\n    onEndReachedThreshold: 2, // multiples of length\n    removeClippedSubviews: true,\n    renderScrollComponent: (props: Props) => {\n      if (props.onRefresh) {\n        invariant(\n          typeof props.refreshing === 'boolean',\n          '`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `' +\n            JSON.stringify(props.refreshing) + '`',\n        );\n        return (\n          <ScrollView\n            {...props}\n            refreshControl={\n              <RefreshControl\n                refreshing={props.refreshing}\n                onRefresh={props.onRefresh}\n              />\n            }\n          />\n        );\n      } else {\n        return <ScrollView {...props} />;\n      }\n    },\n    updateCellsBatchingPeriod: 50,\n    windowSize: 21, // multiples of length\n  };\n\n  state: State = {\n    first: 0,\n    last: this.props.initialNumToRender,\n  };\n\n  constructor(props: Props) {\n    super(props);\n    invariant(\n      !props.onScroll || !props.onScroll.__isNative,\n      'Components based on VirtualizedList must be wrapped with Animated.createAnimatedComponent ' +\n      'to support native onScroll events with useNativeDriver',\n    );\n\n    this._updateCellsToRenderBatcher = new Batchinator(\n      this._updateCellsToRender,\n      this.props.updateCellsBatchingPeriod,\n    );\n    this._viewabilityHelper = new ViewabilityHelper(this.props.viewabilityConfig);\n    this.state = {\n      first: 0,\n      last: Math.min(this.props.getItemCount(this.props.data), this.props.initialNumToRender) - 1,\n    };\n  }\n\n  componentWillUnmount() {\n    this._updateViewableItems(null);\n    this._updateCellsToRenderBatcher.dispose();\n    this._viewabilityHelper.dispose();\n  }\n\n  componentWillReceiveProps(newProps: Props) {\n    const {data, extraData, getItemCount, maxToRenderPerBatch} = newProps;\n    // first and last could be stale (e.g. if a new, shorter items props is passed in), so we make\n    // sure we're rendering a reasonable range here.\n    this.setState({\n      first: Math.max(0, Math.min(this.state.first, getItemCount(data) - 1 - maxToRenderPerBatch)),\n      last: Math.max(0, Math.min(this.state.last, getItemCount(data) - 1)),\n    });\n    if (data !== this.props.data || extraData !== this.props.extraData) {\n      this._hasDataChangedSinceEndReached = true;\n    }\n    this._updateCellsToRenderBatcher.schedule();\n  }\n\n  _pushCells(\n    cells: Array<Object>,\n    stickyHeaderIndices: Array<number>,\n    stickyIndicesFromProps: Set<number>,\n    first: number,\n    last: number,\n  ) {\n    const {ItemSeparatorComponent, data, getItem, getItemCount, keyExtractor} = this.props;\n    const stickyOffset = this.props.ListHeaderComponent ? 1 : 0;\n    const end = getItemCount(data) - 1;\n    last = Math.min(end, last);\n    for (let ii = first; ii <= last; ii++) {\n      const item = getItem(data, ii);\n      invariant(item, 'No item for index ' + ii);\n      const key = keyExtractor(item, ii);\n      if (stickyIndicesFromProps.has(ii + stickyOffset)) {\n        stickyHeaderIndices.push(cells.length);\n      }\n      cells.push(\n        <CellRenderer\n          cellKey={key}\n          index={ii}\n          item={item}\n          key={key}\n          onLayout={(e) => this._onCellLayout(e, key, ii)}\n          onUnmount={this._onCellUnmount}\n          parentProps={this.props}\n        />\n      );\n      if (ItemSeparatorComponent && ii < end) {\n        cells.push(<ItemSeparatorComponent key={'sep' + ii}/>);\n      }\n    }\n  }\n  render() {\n    const {ListFooterComponent, ListHeaderComponent} = this.props;\n    const {data, disableVirtualization, horizontal} = this.props;\n    const cells = [];\n    const stickyIndicesFromProps = new Set(this.props.stickyHeaderIndices);\n    const stickyHeaderIndices = [];\n    if (ListHeaderComponent) {\n      cells.push(\n        <View key=\"$header\" onLayout={this._onLayoutHeader}>\n          <ListHeaderComponent />\n        </View>\n      );\n    }\n    const itemCount = this.props.getItemCount(data);\n    if (itemCount > 0) {\n      _usedIndexForKey = false;\n      const spacerKey = !horizontal ? 'height' : 'width';\n      const lastInitialIndex = this.props.initialNumToRender - 1;\n      const {first, last} = this.state;\n      this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, 0, lastInitialIndex);\n      const firstAfterInitial = Math.max(lastInitialIndex + 1, first);\n      if (!disableVirtualization && first > lastInitialIndex + 1) {\n        let insertedStickySpacer = false;\n        if (stickyIndicesFromProps.size > 0) {\n          const stickyOffset = ListHeaderComponent ? 1 : 0;\n          // See if there are any sticky headers in the virtualized space that we need to render.\n          for (let ii = firstAfterInitial - 1; ii > lastInitialIndex; ii--) {\n            if (stickyIndicesFromProps.has(ii + stickyOffset)) {\n              const initBlock = this._getFrameMetricsApprox(lastInitialIndex);\n              const stickyBlock = this._getFrameMetricsApprox(ii);\n              const leadSpace = stickyBlock.offset - (initBlock.offset + initBlock.length);\n              cells.push(\n                <View key=\"$sticky_lead\" style={{[spacerKey]: leadSpace}} />\n              );\n              this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, ii, ii);\n              const trailSpace = this._getFrameMetricsApprox(first).offset -\n                (stickyBlock.offset + stickyBlock.length);\n              cells.push(\n                <View key=\"$sticky_trail\" style={{[spacerKey]: trailSpace}} />\n              );\n              insertedStickySpacer = true;\n              break;\n            }\n          }\n        }\n        if (!insertedStickySpacer) {\n          const initBlock = this._getFrameMetricsApprox(lastInitialIndex);\n          const firstSpace = this._getFrameMetricsApprox(first).offset -\n            (initBlock.offset + initBlock.length);\n          cells.push(\n            <View key=\"$lead_spacer\" style={{[spacerKey]: firstSpace}} />\n          );\n        }\n      }\n      this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, firstAfterInitial, last);\n      if (!this._hasWarned.keys && _usedIndexForKey) {\n        console.warn(\n          'VirtualizedList: missing keys for items, make sure to specify a key property on each ' +\n          'item or provide a custom keyExtractor.'\n        );\n        this._hasWarned.keys = true;\n      }\n      if (!disableVirtualization && last < itemCount - 1) {\n        const lastFrame = this._getFrameMetricsApprox(last);\n        // Without getItemLayout, we limit our tail spacer to the _highestMeasuredFrameIndex to\n        // prevent the user for hyperscrolling into un-measured area because otherwise content will\n        // likely jump around as it renders in above the viewport.\n        const end = this.props.getItemLayout ?\n          itemCount - 1 :\n          Math.min(itemCount - 1, this._highestMeasuredFrameIndex);\n        const endFrame = this._getFrameMetricsApprox(end);\n        const tailSpacerLength =\n          (endFrame.offset + endFrame.length) -\n          (lastFrame.offset + lastFrame.length);\n        cells.push(\n          <View key=\"$tail_spacer\" style={{[spacerKey]: tailSpacerLength}} />\n        );\n      }\n    }\n    if (ListFooterComponent) {\n      cells.push(\n        <View key=\"$footer\" onLayout={this._onLayoutFooter}>\n          <ListFooterComponent />\n        </View>\n      );\n    }\n    const ret = React.cloneElement(\n      this.props.renderScrollComponent(this.props),\n      {\n        onContentSizeChange: this._onContentSizeChange,\n        onLayout: this._onLayout,\n        onScroll: this._onScroll,\n        onScrollBeginDrag: this._onScrollBeginDrag,\n        ref: this._captureScrollRef,\n        scrollEventThrottle: 50, // TODO: Android support\n        stickyHeaderIndices,\n      },\n      cells,\n    );\n    if (this.props.debug) {\n      return <View style={{flex: 1}}>{ret}{this._renderDebugOverlay()}</View>;\n    } else {\n      return ret;\n    }\n  }\n\n  componentDidUpdate() {\n    this._updateCellsToRenderBatcher.schedule();\n  }\n\n  _averageCellLength = 0;\n  _hasDataChangedSinceEndReached = true;\n  _hasWarned = {};\n  _highestMeasuredFrameIndex = 0;\n  _headerLength = 0;\n  _frames = {};\n  _footerLength = 0;\n  _scrollMetrics = {\n    visibleLength: 0, contentLength: 0, offset: 0, dt: 10, velocity: 0, timestamp: 0,\n  };\n  _scrollRef = (null: any);\n  _sentEndForContentLength = 0;\n  _totalCellLength = 0;\n  _totalCellsMeasured = 0;\n  _updateCellsToRenderBatcher: Batchinator;\n  _viewabilityHelper: ViewabilityHelper;\n\n  _captureScrollRef = (ref) => {\n    this._scrollRef = ref;\n  };\n\n  _onCellLayout(e, cellKey, index) {\n    const layout = e.nativeEvent.layout;\n    const next = {\n      offset: this._selectOffset(layout),\n      length: this._selectLength(layout),\n      index,\n      inLayout: true,\n    };\n    const curr = this._frames[cellKey];\n    if (!curr ||\n      next.offset !== curr.offset ||\n      next.length !== curr.length ||\n      index !== curr.index\n    ) {\n      this._totalCellLength += next.length - (curr ? curr.length : 0);\n      this._totalCellsMeasured += (curr ? 0 : 1);\n      this._averageCellLength = this._totalCellLength / this._totalCellsMeasured;\n      this._frames[cellKey] = next;\n      this._highestMeasuredFrameIndex = Math.max(this._highestMeasuredFrameIndex, index);\n      this._updateCellsToRenderBatcher.schedule();\n    } else {\n      this._frames[cellKey].inLayout = true;\n    }\n  }\n\n  _onCellUnmount = (cellKey: string) => {\n    const curr = this._frames[cellKey];\n    if (curr) {\n      this._frames[cellKey] = {...curr, inLayout: false};\n    }\n  };\n\n  _onLayout = (e: Object) => {\n    this._scrollMetrics.visibleLength = this._selectLength(e.nativeEvent.layout);\n    this.props.onLayout && this.props.onLayout(e);\n    this._updateCellsToRenderBatcher.schedule();\n  };\n\n  _onLayoutFooter = (e) => {\n    this._footerLength = this._selectLength(e.nativeEvent.layout);\n  };\n\n  _onLayoutHeader = (e) => {\n    this._headerLength = this._selectLength(e.nativeEvent.layout);\n  };\n\n  _renderDebugOverlay() {\n    const normalize = this._scrollMetrics.visibleLength / this._scrollMetrics.contentLength;\n    const framesInLayout = [];\n    const itemCount = this.props.getItemCount(this.props.data);\n    for (let ii = 0; ii < itemCount; ii++) {\n      const frame = this._getFrameMetricsApprox(ii);\n      if (frame.inLayout) {\n        framesInLayout.push(frame);\n      }\n    }\n    const windowTop = this._getFrameMetricsApprox(this.state.first).offset;\n    const frameLast = this._getFrameMetricsApprox(this.state.last);\n    const windowLen = frameLast.offset + frameLast.length - windowTop;\n    const visTop = this._scrollMetrics.offset;\n    const visLen = this._scrollMetrics.visibleLength;\n    const baseStyle = {position: 'absolute', top: 0, right: 0};\n    return (\n      <View style={{...baseStyle, bottom: 0, width: 20, borderColor: 'blue', borderWidth: 1}}>\n        {framesInLayout.map((f, ii) =>\n          <View key={'f' + ii} style={{\n            ...baseStyle,\n            left: 0,\n            top: f.offset * normalize,\n            height: f.length * normalize,\n            backgroundColor: 'orange',\n          }} />\n        )}\n        <View style={{\n          ...baseStyle,\n          left: 0,\n          top: windowTop * normalize,\n          height: windowLen * normalize,\n          borderColor: 'green',\n          borderWidth: 2,\n        }} />\n        <View style={{\n          ...baseStyle,\n          left: 0,\n          top: visTop * normalize,\n          height: visLen * normalize,\n          borderColor: 'red',\n          borderWidth: 2,\n        }} />\n      </View>\n    );\n  }\n\n  _selectLength(metrics: {height: number, width: number}): number {\n    return !this.props.horizontal ? metrics.height : metrics.width;\n  }\n\n  _selectOffset(metrics: {x: number, y: number}): number {\n    return !this.props.horizontal ? metrics.y : metrics.x;\n  }\n\n  _onContentSizeChange = (width: number, height: number) => {\n    if (this.props.onContentSizeChange) {\n      this.props.onContentSizeChange(width, height);\n    }\n    this._scrollMetrics.contentLength = this._selectLength({height, width});\n    this._updateCellsToRenderBatcher.schedule();\n  };\n\n  _onScroll = (e: Object) => {\n    if (this.props.onScroll) {\n      this.props.onScroll(e);\n    }\n    const timestamp = e.timeStamp;\n    const visibleLength = this._selectLength(e.nativeEvent.layoutMeasurement);\n    const contentLength = this._selectLength(e.nativeEvent.contentSize);\n    const offset = this._selectOffset(e.nativeEvent.contentOffset);\n    const dt = Math.max(1, timestamp - this._scrollMetrics.timestamp);\n    if (dt > 500 && this._scrollMetrics.dt > 500 && (contentLength > (5 * visibleLength)) &&\n        !this._hasWarned.perf) {\n      infoLog(\n        'VirtualizedList: You have a large list that is slow to update - make sure your ' +\n        'renderItem function renders components that follow React performance best practices ' +\n        'like PureComponent, shouldComponentUpdate, etc.',\n        {dt, prevDt: this._scrollMetrics.dt, contentLength},\n      );\n      this._hasWarned.perf = true;\n    }\n    const dOffset = offset - this._scrollMetrics.offset;\n    const velocity = dOffset / dt;\n    this._scrollMetrics = {contentLength, dt, offset, timestamp, velocity, visibleLength};\n    const {data, getItemCount, onEndReached, onEndReachedThreshold, windowSize} = this.props;\n    this._updateViewableItems(data);\n    if (!data) {\n      return;\n    }\n    const distanceFromEnd = contentLength - visibleLength - offset;\n    const itemCount = getItemCount(data);\n    if (this.state.last === itemCount - 1 &&\n        distanceFromEnd < onEndReachedThreshold * visibleLength &&\n        (this._hasDataChangedSinceEndReached ||\n         this._scrollMetrics.contentLength !== this._sentEndForContentLength)) {\n      // Only call onEndReached once for a given dataset + content length.\n      this._hasDataChangedSinceEndReached = false;\n      this._sentEndForContentLength = this._scrollMetrics.contentLength;\n      onEndReached({distanceFromEnd});\n    }\n    const {first, last} = this.state;\n    if ((first > 0 && velocity < 0) || (last < itemCount - 1 && velocity > 0)) {\n      const distanceToContentEdge = Math.min(\n        Math.abs(this._getFrameMetricsApprox(first).offset - offset),\n        Math.abs(this._getFrameMetricsApprox(last).offset - (offset + visibleLength)),\n      );\n      const hiPri = distanceToContentEdge < (windowSize * visibleLength / 4);\n      if (hiPri) {\n        // Don't worry about interactions when scrolling quickly; focus on filling content as fast\n        // as possible.\n        this._updateCellsToRenderBatcher.dispose({abort: true});\n        this._updateCellsToRender();\n        return;\n      }\n    }\n    this._updateCellsToRenderBatcher.schedule();\n  };\n\n  _onScrollBeginDrag = (e): void => {\n    this._viewabilityHelper.recordInteraction();\n    this.props.onScrollBeginDrag && this.props.onScrollBeginDrag(e);\n  };\n  _updateCellsToRender = () => {\n    const {data, disableVirtualization, getItemCount, onEndReachedThreshold} = this.props;\n    this._updateViewableItems(data);\n    if (!data) {\n      return;\n    }\n    this.setState((state) => {\n      let newState;\n      if (!disableVirtualization) {\n        newState = computeWindowedRenderLimits(\n          this.props, state, this._getFrameMetricsApprox, this._scrollMetrics,\n        );\n      } else {\n        const {contentLength, offset, visibleLength} = this._scrollMetrics;\n        const distanceFromEnd = contentLength - visibleLength - offset;\n        const renderAhead = distanceFromEnd < onEndReachedThreshold * visibleLength ?\n          this.props.maxToRenderPerBatch : 0;\n        newState = {\n          first: 0,\n          last: Math.min(state.last + renderAhead, getItemCount(data) - 1),\n        };\n      }\n      return newState;\n    });\n  };\n\n  _createViewToken = (index: number, isViewable: boolean) => {\n    const {data, getItem, keyExtractor} = this.props;\n    const item = getItem(data, index);\n    invariant(item, 'Missing item for index ' + index);\n    return {index, item, key: keyExtractor(item, index), isViewable};\n  };\n\n  _getFrameMetricsApprox = (index: number): {length: number, offset: number} => {\n    const frame = this._getFrameMetrics(index);\n    if (frame && frame.index === index) { // check for invalid frames due to row re-ordering\n      return frame;\n    } else {\n      const {getItemLayout} = this.props;\n      invariant(\n        !getItemLayout,\n        'Should not have to estimate frames when a measurement metrics function is provided'\n      );\n      return {\n        length: this._averageCellLength,\n        offset: this._averageCellLength * index,\n      };\n    }\n  };\n\n  _getFrameMetrics = (index: number): ?{length: number, offset: number, index: number} => {\n    const {data, getItem, getItemCount, getItemLayout, keyExtractor} = this.props;\n    invariant(getItemCount(data) > index, 'Tried to get frame for out of range index ' + index);\n    const item = getItem(data, index);\n    let frame = item && this._frames[keyExtractor(item, index)];\n    if (!frame || frame.index !== index) {\n      if (getItemLayout) {\n        frame = getItemLayout(data, index);\n      }\n    }\n    return frame;\n  };\n\n  _updateViewableItems(data: any) {\n    const {getItemCount, onViewableItemsChanged} = this.props;\n    if (!onViewableItemsChanged) {\n      return;\n    }\n    this._viewabilityHelper.onUpdate(\n      getItemCount(data),\n      this._scrollMetrics.offset,\n      this._scrollMetrics.visibleLength,\n      this._getFrameMetrics,\n      this._createViewToken,\n      onViewableItemsChanged,\n      this.state,\n    );\n  }\n}\n\nclass CellRenderer extends React.Component {\n  props: {\n    cellKey: string,\n    index: number,\n    item: Item,\n    onLayout: (event: Object) => void, // This is extracted by ScrollViewStickyHeader\n    onUnmount: (cellKey: string) => void,\n    parentProps: {\n      renderItem: renderItemType,\n      getItemLayout?: ?Function,\n    },\n  };\n  componentWillUnmount() {\n    this.props.onUnmount(this.props.cellKey);\n  }\n  render() {\n    const {item, index, parentProps} = this.props;\n    const {renderItem, getItemLayout} = parentProps;\n    invariant(renderItem, 'no renderItem!');\n    const element = renderItem({item, index});\n    if (getItemLayout && !parentProps.debug) {\n      return element;\n    }\n    // NOTE: that when this is a sticky header, `onLayout` will get automatically extracted and\n    // called explicitly by `ScrollViewStickyHeader`.\n    return (\n      <View onLayout={this.props.onLayout}>\n        {element}\n      </View>\n    );\n  }\n}\n\nmodule.exports = VirtualizedList;\n"]}]