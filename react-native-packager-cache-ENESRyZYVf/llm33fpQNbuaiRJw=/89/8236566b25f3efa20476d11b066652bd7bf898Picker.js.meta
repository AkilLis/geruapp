["d647264841694fd1ee6ec309dd0fac58403d34ab","a9b47811d97757a9784bf09ef44e09a463fdf722",["ColorPropType","PickerIOS","PickerAndroid","Platform","React","StyleSheetPropType","TextStylePropTypes","UnimplementedView","ViewPropTypes","ViewStylePropTypes"],[65,107,149,190,223,266,322,377,427,478],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native/Libraries/Components/Picker/Picker.js"],"names":["ColorPropType","require","PickerIOS","PickerAndroid","Platform","React","StyleSheetPropType","TextStylePropTypes","UnimplementedView","ViewPropTypes","ViewStylePropTypes","itemStylePropType","pickerStyleType","color","MODE_DIALOG","MODE_DROPDOWN","Picker","OS","props","children","Component","defaultProps","mode","propTypes","style","selectedValue","PropTypes","any","onValueChange","func","enabled","bool","oneOf","itemStyle","prompt","string","testID","Item","label","isRequired","value","module","exports"],"mappings":";;AAYA;;;;AAEA,IAAIA,gBAAgBC,QAAQ,eAAR,CAApB;AACA,IAAIC,YAAYD,QAAQ,WAAR,CAAhB;AACA,IAAIE,gBAAgBF,QAAQ,eAAR,CAApB;AACA,IAAIG,WAAWH,QAAQ,UAAR,CAAf;AACA,IAAII,QAAQJ,QAAQ,OAAR,CAAZ;AACA,IAAIK,qBAAqBL,QAAQ,oBAAR,CAAzB;AACA,IAAIM,qBAAqBN,QAAQ,oBAAR,CAAzB;AACA,IAAIO,oBAAoBP,QAAQ,mBAAR,CAAxB;AACA,IAAMQ,gBAAgBR,QAAQ,eAAR,CAAtB;AACA,IAAIS,qBAAqBT,QAAQ,oBAAR,CAAzB;;AAEA,IAAIU,oBAAoBL,mBAAmBC,kBAAnB,CAAxB;;AAEA,IAAIK,kBAAkBN,4CACjBI,kBADiB;AAEpBG,SAAOb;AAFa,GAAtB;;AAKA,IAAIc,cAAc,QAAlB;AACA,IAAIC,gBAAgB,UAApB;;IAYMC,M;;;;;;;;;;6BAuEI;AACL,UAAIZ,SAASa,EAAT,KAAgB,KAApB,EAA2B;AAEzB,eAAO;AAAC,mBAAD;AAAe,eAAKC,KAApB;AAA4B,eAAKA,KAAL,CAAWC;AAAvC,SAAP;AACD,OAHD,MAGO,IAAIf,SAASa,EAAT,KAAgB,SAApB,EAA+B;AAEpC,eAAO;AAAC,uBAAD;AAAmB,eAAKC,KAAxB;AAAgC,eAAKA,KAAL,CAAWC;AAA3C,SAAP;AACD,OAHM,MAGA;AACL,eAAO,oBAAC,iBAAD,OAAP;AACD;AACJ;;;EAjFmBd,MAAMe,S;;AAArBJ,M,CAeEF,W,GAAcA,W;AAfhBE,M,CAoBED,a,GAAgBA,a;AApBlBC,M,CAsBEK,Y,GAAe;AACpBC,QAAMR;AADc,C;AAtBjBE,M,CA2BEO,S,4BACFd,a;AACHe,SAAOZ,e;;AAIPa,iBAAepB,MAAMqB,SAAN,CAAgBC,G;;AAM/BC,iBAAevB,MAAMqB,SAAN,CAAgBG,I;;AAM/BC,WAASzB,MAAMqB,SAAN,CAAgBK,I;;AASzBT,QAAMjB,MAAMqB,SAAN,CAAgBM,KAAhB,CAAsB,CAAC,QAAD,EAAW,UAAX,CAAtB,C;;AAKNC,aAAWtB,iB;;AAKXuB,UAAQ7B,MAAMqB,SAAN,CAAgBS,M;;AAIxBC,UAAQ/B,MAAMqB,SAAN,CAAgBS;;;AAoB3BnB,OAAOqB,IAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,6BA6BU;AAEP,YAAM,IAAN;AACD;AAhCF;AAAA;AAAA,EAA4BhC,MAAMe,SAAlC,UAQQG,SARR,GAQoB;AAIjBe,SAAOjC,MAAMqB,SAAN,CAAgBS,MAAhB,CAAuBI,UAJb;;AASjBC,SAAOnC,MAAMqB,SAAN,CAAgBC,GATN;;AAcjBd,SAAOb,aAdU;;AAkBjBoC,UAAQ/B,MAAMqB,SAAN,CAAgBS;AAlBP,CARpB;;AAmCAM,OAAOC,OAAP,GAAiB1B,MAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Picker\n * @flow\n */\n\n'use strict';\n\nvar ColorPropType = require('ColorPropType');\nvar PickerIOS = require('PickerIOS');\nvar PickerAndroid = require('PickerAndroid');\nvar Platform = require('Platform');\nvar React = require('React');\nvar StyleSheetPropType = require('StyleSheetPropType');\nvar TextStylePropTypes = require('TextStylePropTypes');\nvar UnimplementedView = require('UnimplementedView');\nconst ViewPropTypes = require('ViewPropTypes');\nvar ViewStylePropTypes = require('ViewStylePropTypes');\n\nvar itemStylePropType = StyleSheetPropType(TextStylePropTypes);\n\nvar pickerStyleType = StyleSheetPropType({\n  ...ViewStylePropTypes,\n  color: ColorPropType,\n});\n\nvar MODE_DIALOG = 'dialog';\nvar MODE_DROPDOWN = 'dropdown';\n\n/**\n * Renders the native picker component on iOS and Android. Example:\n *\n *     <Picker\n *       selectedValue={this.state.language}\n *       onValueChange={(lang) => this.setState({language: lang})}>\n *       <Picker.Item label=\"Java\" value=\"java\" />\n *       <Picker.Item label=\"JavaScript\" value=\"js\" />\n *     </Picker>\n */\nclass Picker extends React.Component {\n props: {\n  style?: $FlowFixMe,\n  selectedValue?: any,\n  onValueChange?: Function,\n  enabled?: boolean,\n  mode?: 'dialog' | 'dropdown',\n  itemStyle?: $FlowFixMe,\n  prompt?: string,\n  testID?: string,\n };\n\n /**\n  * On Android, display the options in a dialog.\n  */\n static MODE_DIALOG = MODE_DIALOG;\n\n /**\n  * On Android, display the options in a dropdown (this is the default).\n  */\n static MODE_DROPDOWN = MODE_DROPDOWN;\n\n static defaultProps = {\n   mode: MODE_DIALOG,\n };\n\n // $FlowFixMe(>=0.41.0)\n static propTypes = {\n   ...ViewPropTypes,\n   style: pickerStyleType,\n   /**\n    * Value matching value of one of the items. Can be a string or an integer.\n    */\n   selectedValue: React.PropTypes.any,\n   /**\n    * Callback for when an item is selected. This is called with the following parameters:\n    *   - `itemValue`: the `value` prop of the item that was selected\n    *   - `itemPosition`: the index of the selected item in this picker\n    */\n   onValueChange: React.PropTypes.func,\n   /**\n    * If set to false, the picker will be disabled, i.e. the user will not be able to make a\n    * selection.\n    * @platform android\n    */\n   enabled: React.PropTypes.bool,\n   /**\n    * On Android, specifies how to display the selection items when the user taps on the picker:\n    *\n    *   - 'dialog': Show a modal dialog. This is the default.\n    *   - 'dropdown': Shows a dropdown anchored to the picker view\n    *\n    * @platform android\n    */\n   mode: React.PropTypes.oneOf(['dialog', 'dropdown']),\n   /**\n    * Style to apply to each of the item labels.\n    * @platform ios\n    */\n   itemStyle: itemStylePropType,\n   /**\n    * Prompt string for this picker, used on Android in dialog mode as the title of the dialog.\n    * @platform android\n    */\n   prompt: React.PropTypes.string,\n   /**\n    * Used to locate this view in end-to-end tests.\n    */\n   testID: React.PropTypes.string,\n };\n\n render() {\n     if (Platform.OS === 'ios') {\n       // $FlowFixMe found when converting React.createClass to ES6\n       return <PickerIOS {...this.props}>{this.props.children}</PickerIOS>;\n     } else if (Platform.OS === 'android') {\n       // $FlowFixMe found when converting React.createClass to ES6\n       return <PickerAndroid {...this.props}>{this.props.children}</PickerAndroid>;\n     } else {\n       return <UnimplementedView />;\n     }\n }\n}\n\n/**\n * Individual selectable item in a Picker.\n */\n// $FlowFixMe found when converting React.createClass to ES6\nPicker.Item = class extends React.Component {\n props: {\n  label: string,\n  value?: any,\n  color?: ColorPropType,\n  testID?: string,\n };\n\n static propTypes = {\n   /**\n    * Text to display for this item.\n    */\n   label: React.PropTypes.string.isRequired,\n   /**\n    * The value to be passed to picker's `onValueChange` callback when\n    * this item is selected. Can be a string or an integer.\n    */\n   value: React.PropTypes.any,\n   /**\n    * Color of this item's text.\n    * @platform android\n    */\n   color: ColorPropType,\n   /**\n    * Used to locate the item in end-to-end tests.\n    */\n   testID: React.PropTypes.string,\n };\n\n render() {\n   // The items are not rendered directly\n   throw null;\n }\n};\n\nmodule.exports = Picker;\n"]}]