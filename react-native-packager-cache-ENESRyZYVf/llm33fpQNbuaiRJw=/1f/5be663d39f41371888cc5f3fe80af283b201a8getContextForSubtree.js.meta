["9d58a5f105d0e07bb565c0e003396b14a8d1a216","038fbd72f2585c8b2fab7bed991b567c3fb921c2",["ReactInstanceMap","fbjs/lib/emptyObject","fbjs/lib/invariant"],[33,81,130],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native/Libraries/Renderer/src/renderers/shared/shared/getContextForSubtree.js"],"names":["ReactInstanceMap","require","emptyObject","invariant","getContextFiber","arg","getContextForSubtree","parentComponent","instance","get","tag","_processChildContext","_context","_injectFiber","fn","module","exports"],"mappings":";;AAYA,IAAMA,mBAAmBC,QAAQ,kBAAR,CAAzB;;AAEA,IAAMC,cAAcD,QAAQ,sBAAR,CAApB;AACA,IAAME,YAAYF,QAAQ,oBAAR,CAAlB;;AAEA,IAAIG,kBAAkB,yBAASC,GAAT,EAAc;AAClCF,YAAU,KAAV,EAAiB,kDAAjB;AACD,CAFD;;AAIA,SAASG,oBAAT,CACEC,eADF,EAEU;AACR,MAAI,CAACA,eAAL,EAAsB;AACpB,WAAOL,WAAP;AACD;;AAED,MAAMM,WAAWR,iBAAiBS,GAAjB,CAAqBF,eAArB,CAAjB;AACA,MAAI,OAAOC,SAASE,GAAhB,KAAwB,QAA5B,EAAsC;AACpC,WAAON,gBAAgBI,QAAhB,CAAP;AACD,GAFD,MAEO;AACL,WAAOA,SAASG,oBAAT,CAA8BH,SAASI,QAAvC,CAAP;AACD;AACF;;AAEDN,qBAAqBO,YAArB,GAAoC,UAASC,EAAT,EAAa;AAC/CV,oBAAkBU,EAAlB;AACD,CAFD;;AAIAC,OAAOC,OAAP,GAAiBV,oBAAjB","sourcesContent":["/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getContextForSubtree\n * @flow\n */\n\nconst ReactInstanceMap = require('ReactInstanceMap');\n\nconst emptyObject = require('fbjs/lib/emptyObject');\nconst invariant = require('fbjs/lib/invariant');\n\nlet getContextFiber = function(arg) {\n  invariant(false, 'Missing injection for fiber getContextForSubtree');\n};\n\nfunction getContextForSubtree(\n  parentComponent: ?ReactComponent<any, any, any>,\n): Object {\n  if (!parentComponent) {\n    return emptyObject;\n  }\n\n  const instance = ReactInstanceMap.get(parentComponent);\n  if (typeof instance.tag === 'number') {\n    return getContextFiber(instance);\n  } else {\n    return instance._processChildContext(instance._context);\n  }\n}\n\ngetContextForSubtree._injectFiber = function(fn) {\n  getContextFiber = fn;\n};\n\nmodule.exports = getContextForSubtree;\n"]}]