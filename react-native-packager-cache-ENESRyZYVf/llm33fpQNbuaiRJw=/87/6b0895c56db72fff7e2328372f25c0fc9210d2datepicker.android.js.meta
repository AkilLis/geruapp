["f35a65bedf513501fe4473a668c8fe182963e01b","637b60bf43efe5f8c621611b322b858c4d60ef60",["react","react-native"],[20,54],{"version":3,"sources":["/var/www/geruapp/node_modules/tcomb-form-native/lib/templates/bootstrap/datepicker.android.js"],"names":["React","require","View","Text","DatePickerAndroid","TimePickerAndroid","TouchableNativeFeedback","datepicker","locals","hidden","stylesheet","formGroupStyle","formGroup","normal","controlLabelStyle","controlLabel","datepickerStyle","helpBlockStyle","helpBlock","errorBlockStyle","errorBlock","dateValueStyle","dateValue","hasError","error","datePickerMode","mode","formattedValue","String","value","background","SelectableBackground","config","format","label","help","disabled","now","Date","isDate","setTime","hour","getHours","minute","getMinutes","open","is24Hour","then","time","action","dismissedAction","newTime","setHours","setMinutes","onChange","date","minimumDate","minDate","maximumDate","maxDate","newDate","year","month","day","module","exports"],"mappings":"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","sourcesContent":["var React = require('react');\nvar { View, Text, DatePickerAndroid, TimePickerAndroid, TouchableNativeFeedback } = require('react-native');\n\nfunction datepicker(locals) {\n  if (locals.hidden) {\n    return null;\n  }\n\n  var stylesheet = locals.stylesheet;\n  var formGroupStyle = stylesheet.formGroup.normal;\n  var controlLabelStyle = stylesheet.controlLabel.normal;\n  var datepickerStyle = stylesheet.datepicker.normal;\n  var helpBlockStyle = stylesheet.helpBlock.normal;\n  var errorBlockStyle = stylesheet.errorBlock;\n  var dateValueStyle = stylesheet.dateValue.normal;\n\n  if (locals.hasError) {\n    formGroupStyle = stylesheet.formGroup.error;\n    controlLabelStyle = stylesheet.controlLabel.error;\n    datepickerStyle = stylesheet.datepicker.error;\n    helpBlockStyle = stylesheet.helpBlock.error;\n    dateValueStyle = stylesheet.dateValue.error;\n  }\n\n  // Setup the picker mode\n  var datePickerMode = 'date';\n  if (locals.mode === 'date' || locals.mode === 'time') {\n    datePickerMode = locals.mode;\n  }\n\n  /**\n   * Check config locals for Android datepicker.\n   * ``locals.config.background``: `TouchableNativeFeedback` background prop\n   * ``locals.config.format``: Date format function\n   */\n  var formattedValue = String(locals.value);\n  var background = TouchableNativeFeedback.SelectableBackground(); // eslint-disable-line new-cap\n  if (locals.config) {\n    if (locals.config.format) {\n      formattedValue = locals.config.format(locals.value);\n    }\n    if (locals.config.background) {\n      background = locals.config.background;\n    }\n  }\n\n  var label = locals.label ? <Text style={controlLabelStyle}>{locals.label}</Text> : null;\n  var help = locals.help ? <Text style={helpBlockStyle}>{locals.help}</Text> : null;\n  var error = locals.hasError && locals.error ? <Text accessibilityLiveRegion=\"polite\" style={errorBlockStyle}>{locals.error}</Text> : null;\n  var value = locals.value ? <Text style={dateValueStyle}>{formattedValue}</Text> : null;\n\n  return (\n    <View style={formGroupStyle}>\n      <TouchableNativeFeedback\n        accessible={true}\n        disabled={locals.disabled}\n        ref=\"input\"\n        background={background}\n        onPress={function () {\n          if (datePickerMode === 'time') {\n            const now = new Date();\n            const isDate = locals.value && locals.value instanceof Date;\n            let setTime = {\n              hour: (isDate) ? locals.value.getHours() : now.getHours(),\n              minute: (isDate) ? locals.value.getMinutes() : now.getMinutes()\n            };\n            TimePickerAndroid.open({is24Hour: true, hour: setTime.hour, minute: setTime.minute})\n            .then(function (time) {\n              if (time.action !== TimePickerAndroid.dismissedAction) {\n                const newTime = new Date();\n                newTime.setHours(time.hour);\n                newTime.setMinutes(time.minute);\n                locals.onChange(newTime);\n              }\n            });\n          } else {\n            let config = {\n              date: locals.value || new Date()\n            };\n            if (locals.minimumDate) {\n              config.minDate = locals.minimumDate;\n            }\n            if (locals.maximumDate) {\n              config.maxDate = locals.maximumDate;\n            }\n            DatePickerAndroid.open(config)\n            .then(function (date) {\n              if (date.action !== DatePickerAndroid.dismissedAction) {\n                var newDate = new Date(date.year, date.month, date.day);\n                locals.onChange(newDate);\n              }\n            });\n          }\n        }}>\n        <View>\n          {label}\n          {value}\n        </View>\n      </TouchableNativeFeedback>\n      {help}\n      {error}\n    </View>\n  );\n}\n\nmodule.exports = datepicker;\n"]}]