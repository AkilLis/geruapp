["6f4e31c07da3a4c30590e24ca895011700f454f1","d146e7ca6d9aae0821247ff32b626d08a0eeb2be",["../auth/authConstants","./globalInitialState"],[144,205],{"version":3,"sources":["/var/www/geruapp/src/global/globalReducer.js"],"names":["globalReducer","initialState","state","action","merge","type","set","payload","sessionToken","_state","store","getState","newState","auth","toJS","device","profile","global","JSON","parse","next","currentUser"],"mappings":";AAKA;;;;;kBA+BwBA,a;;AAxBxB;;AAgBA;;;;AAEA,IAAMC,eAAe,kCAArB;AAMe,SAASD,aAAT,GAAsD;AAAA,MAA9BE,KAA8B,uEAAtBD,YAAsB;AAAA,MAARE,MAAQ;;AACnE,MAAI,EAAED,6CAAF,CAAJ,EAAsC,OAAOD,aAAaG,KAAb,CAAmBF,KAAnB,CAAP;;AAEtC,UAAQC,OAAOE,IAAf;AAIE;AACE,aAAOH,MAAMI,GAAN,CAAU,cAAV,EAA0BH,OAAOI,OAAjC,CAAP;;AASF;AACA;AACA;AACE,aAAOL,MAAMI,GAAN,CAAU,aAAV,EAAyBH,OAAOI,OAAhC,CAAP;;AAEF;AACE,aAAOL,MAAMI,GAAN,CAAU,aAAV,EAAyBH,OAAOI,OAAP,CAAeC,YAAxC,CAAP;;AASF;;AAEE,aAAON,MAAMI,GAAN,CAAU,aAAV,EAAyB,IAAzB,CAAP;;AASF;AACE,aAAOJ,MAAMI,GAAN,CAAU,OAAV,EAAmBH,OAAOI,OAA1B,CAAP;;AAWF;AAAgB;AACd,YAAIE,SAASP,MAAMQ,KAAN,CAAYC,QAAZ,EAAb;;AAEA,YAAIR,OAAOI,OAAX,EAAoB;AAClB,cAAIK,WAAW,EAAf;AACAA,mBAAS,MAAT,IAAmBH,OAAOI,IAAP,CAAYC,IAAZ,EAAnB;AACAF,mBAAS,QAAT,IAAqBH,OAAOM,MAAP,CAAcD,IAAd,EAArB;AACAF,mBAAS,SAAT,IAAsBH,OAAOO,OAAP,CAAeF,IAAf,EAAtB;;AAMAF,mBAAS,QAAT,IAAqBH,OAAOQ,MAAP,CAAcX,GAAd,CAAkB,cAAlB,EAAkC,IAAlC,EAAwCA,GAAxC,CAA4C,OAA5C,EAAqD,IAArD,EAA2DQ,IAA3D,EAArB;;AAEA,iBAAOZ,MAAMI,GAAN,CAAU,WAAV,EAAuBH,OAAOI,OAA9B,EACND,GADM,CACF,cADE,EACcM,QADd,CAAP;AAED,SAdD,MAcO;AACL,iBAAOV,MAAMI,GAAN,CAAU,WAAV,EAAuBH,OAAOI,OAA9B,CAAP;AACD;AACF;;AAQD;AACE,UAAIU,SAASC,KAAKC,KAAL,CAAWhB,OAAOI,OAAlB,EAA2BU,MAAxC;AACA,UAAIG,OAAOlB,MAAMI,GAAN,CAAU,aAAV,EAAyBW,OAAOI,WAAhC,EACNf,GADM,CACF,WADE,EACW,KADX,EAENA,GAFM,CAEF,cAFE,EAEc,IAFd,CAAX;AAGA,aAAOc,IAAP;;AArFJ;;AAyFA,SAAOlB,KAAP;AACD","sourcesContent":["/**\n * # globalReducer.js\n *\n *\n */\n'use strict'\n/**\n * ## Imports\n * The InitialState for auth\n * fieldValidation for validating the fields\n * formValidation for setting the form's valid flag\n */\nimport {\n  SET_SESSION_TOKEN,\n\n  GET_PROFILE_SUCCESS,\n  SIGNUP_SUCCESS,\n  LOGIN_SUCCESS,\n  SESSION_TOKEN_SUCCESS,\n\n  LOGOUT_SUCCESS,\n\n  GET_STATE,\n  SET_STATE,\n  SET_STORE\n\n} from '../auth/authConstants'\n\nimport InitialState from './globalInitialState'\n\nconst initialState = new InitialState()\n/**\n * ## globalReducer function\n * @param {Object} state - initialState\n * @param {Object} action - type and payload\n */\nexport default function globalReducer (state = initialState, action) {\n  if (!(state instanceof InitialState)) return initialState.merge(state)\n\n  switch (action.type) {\n    /**\n     * ### Save the sessionToken\n     */\n    case SET_SESSION_TOKEN:\n      return state.set('sessionToken', action.payload)\n\n    /**\n     * ### Save the payload in the store\n     *\n     * This payload is the ```currentUser``` object returned by\n     * the server.  It contains the ```sessionToken``` and the user's\n     * ```objectId``` which will be needed for some calls to the server\n     */\n    case SIGNUP_SUCCESS:\n    case LOGIN_SUCCESS:\n    case GET_PROFILE_SUCCESS:\n      return state.set('currentUser', action.payload)\n\n    case SESSION_TOKEN_SUCCESS:\n      return state.set('currentUser', action.payload.sessionToken)\n\n    /**\n     * ### Clear currentUser\n     *\n     *\n     *\n     *\n     */\n    case LOGOUT_SUCCESS:\n\n      return state.set('currentUser', null)\n\n    /**\n     * ### sets the payload into the store\n     *\n     * *Note* this is for support of Hot Loading - the payload is the\n     * ```store``` itself.\n     *\n     */\n    case SET_STORE:\n      return state.set('store', action.payload)\n\n    /**\n     * ### Get the current state from the store\n     *\n     * The Redux ```store``` provides the state object.\n     * We convert each key to JSON and set it in the state\n     *\n     * *Note*: the global state removes the ```store```, otherwise,\n     * when trying to convert to JSON, it will be recursive and fail\n     */\n    case GET_STATE: {\n      let _state = state.store.getState()\n\n      if (action.payload) {\n        let newState = {}\n        newState['auth'] = _state.auth.toJS()\n        newState['device'] = _state.device.toJS()\n        newState['profile'] = _state.profile.toJS()\n\n      // Make sure global doesn't have the previous currentState\n        // let _noCurrentState =  _state.global.set('currentState',null);\n        // let _noStore = _noCurrentState.set('store',null);\n\n        newState['global'] = _state.global.set('currentState', null).set('store', null).toJS()\n\n        return state.set('showState', action.payload)\n        .set('currentState', newState)\n      } else {\n        return state.set('showState', action.payload)\n      }\n    }\n\n    /**\n     * ### Set the state\n     *\n     * This is in support of Hot Loading\n     *\n     */\n    case SET_STATE:\n      var global = JSON.parse(action.payload).global\n      var next = state.set('currentUser', global.currentUser)\n          .set('showState', false)\n          .set('currentState', null)\n      return next\n\n  }\n\n  return state\n}\n"]}]