["57085e77e54abe8cd70fb3dac514cc03664a17b6","c894cf71b1eac34987dc6106bb6d73670dff4256",["Dimensions","InspectorUtils","React","StyleSheet","UIManager","View","ElementBox"],[41,85,124,159,198,231,265],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native/Libraries/Inspector/InspectorOverlay.js"],"names":["Dimensions","require","InspectorUtils","React","StyleSheet","UIManager","View","ElementBox","PropTypes","InspectorOverlay","findViewForTouchEvent","e","nativeEvent","touches","locationX","locationY","findSubviewIn","props","inspectedViewTag","nativeViewTag","left","top","width","height","instance","findInstanceByNativeTag","onTouchInstance","shouldSetResponser","content","inspected","frame","style","styles","inspector","get","Component","propTypes","shape","object","any","number","func","isRequired","create","backgroundColor","position","right","module","exports"],"mappings":";AAWA;;AAEA,IAAIA,aAAaC,QAAQ,YAAR,CAAjB;AACA,IAAIC,iBAAiBD,QAAQ,gBAAR,CAArB;AACA,IAAIE,QAAQF,QAAQ,OAAR,CAAZ;AACA,IAAIG,aAAaH,QAAQ,YAAR,CAAjB;AACA,IAAII,YAAYJ,QAAQ,WAAR,CAAhB;AACA,IAAIK,OAAOL,QAAQ,MAAR,CAAX;AACA,IAAIM,aAAaN,QAAQ,YAAR,CAAjB;;AAEA,IAAIO,YAAYL,MAAMK,SAAtB;;IAMMC,gB;;;;;;;;;;;;;;sNAmBJC,qB,GAAwB,UAACC,CAAD,EAAkB;AAAA,kCACXA,EAAEC,WAAF,CAAcC,OAAd,CAAsB,CAAtB,CADW;AAAA,UACnCC,SADmC,yBACnCA,SADmC;AAAA,UACxBC,SADwB,yBACxBA,SADwB;;AAExCV,gBAAUW,aAAV,CACE,MAAKC,KAAL,CAAWC,gBADb,EAEE,CAACJ,SAAD,EAAYC,SAAZ,CAFF,EAGE,UAACI,aAAD,EAAgBC,IAAhB,EAAsBC,GAAtB,EAA2BC,KAA3B,EAAkCC,MAAlC,EAA6C;AAC3C,YAAIC,WAAWtB,eAAeuB,uBAAf,CAAuCN,aAAvC,CAAf;AACA,YAAI,CAACK,QAAL,EAAe;AACb;AACD;AACD,cAAKP,KAAL,CAAWS,eAAX,CAA2BF,QAA3B,EAAqC,EAACJ,UAAD,EAAOC,QAAP,EAAYC,YAAZ,EAAmBC,cAAnB,EAArC,EAAiER,SAAjE;AACD,OATH;AAWD,K,QAEDY,kB,GAAqB,UAAChB,CAAD,EAAwB;AAC3C,YAAKD,qBAAL,CAA2BC,CAA3B;AACA,aAAO,IAAP;AACD,K;;;;;6BAEQ;AACP,UAAIiB,UAAU,IAAd;AACA,UAAI,KAAKX,KAAL,CAAWY,SAAf,EAA0B;AACxBD,kBAAU,oBAAC,UAAD,IAAY,OAAO,KAAKX,KAAL,CAAWY,SAAX,CAAqBC,KAAxC,EAA+C,OAAO,KAAKb,KAAL,CAAWY,SAAX,CAAqBE,KAA3E,GAAV;AACD;;AAED,aACE;AAAC,YAAD;AAAA;AACE,qCAA2B,KAAKJ,kBADlC;AAEE,2BAAiB,KAAKjB,qBAFxB;AAGE,iBAAO,CAACsB,OAAOC,SAAR,EAAmB,EAACV,QAAQvB,WAAWkC,GAAX,CAAe,QAAf,EAAyBX,MAAlC,EAAnB,CAHT;AAIGK;AAJH,OADF;AAQD;;;EArD4BzB,MAAMgC,S;;AAA/B1B,gB,CAUG2B,S,GAAY;AACjBP,aAAWrB,UAAU6B,KAAV,CAAgB;AACzBP,WAAOtB,UAAU8B,MADQ;AAEzBP,WAAOvB,UAAU+B;AAFQ,GAAhB,CADM;AAKjBrB,oBAAkBV,UAAUgC,MALX;AAMjBd,mBAAiBlB,UAAUiC,IAAV,CAAeC;AANf,C;;;AA8CrB,IAAIV,SAAS5B,WAAWuC,MAAX,CAAkB;AAC7BV,aAAW;AACTW,qBAAiB,aADR;AAETC,cAAU,UAFD;AAGTzB,UAAM,CAHG;AAITC,SAAK,CAJI;AAKTyB,WAAO;AALE;AADkB,CAAlB,CAAb;;AAUAC,OAAOC,OAAP,GAAiBvC,gBAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule InspectorOverlay\n * @flow\n */\n'use strict';\n\nvar Dimensions = require('Dimensions');\nvar InspectorUtils = require('InspectorUtils');\nvar React = require('React');\nvar StyleSheet = require('StyleSheet');\nvar UIManager = require('UIManager');\nvar View = require('View');\nvar ElementBox = require('ElementBox');\n\nvar PropTypes = React.PropTypes;\n\ntype EventLike = {\n  nativeEvent: Object,\n};\n\nclass InspectorOverlay extends React.Component {\n  props: {\n    inspected?: {\n      frame?: Object,\n      style?: any,\n    },\n    inspectedViewTag?: number,\n    onTouchInstance: Function,\n  };\n\n  static propTypes = {\n    inspected: PropTypes.shape({\n      frame: PropTypes.object,\n      style: PropTypes.any,\n    }),\n    inspectedViewTag: PropTypes.number,\n    onTouchInstance: PropTypes.func.isRequired,\n  };\n\n  findViewForTouchEvent = (e: EventLike) => {\n    var {locationX, locationY} = e.nativeEvent.touches[0];\n    UIManager.findSubviewIn(\n      this.props.inspectedViewTag,\n      [locationX, locationY],\n      (nativeViewTag, left, top, width, height) => {\n        var instance = InspectorUtils.findInstanceByNativeTag(nativeViewTag);\n        if (!instance) {\n          return;\n        }\n        this.props.onTouchInstance(instance, {left, top, width, height}, locationY);\n      }\n    );\n  };\n\n  shouldSetResponser = (e: EventLike): bool => {\n    this.findViewForTouchEvent(e);\n    return true;\n  };\n\n  render() {\n    var content = null;\n    if (this.props.inspected) {\n      content = <ElementBox frame={this.props.inspected.frame} style={this.props.inspected.style} />;\n    }\n\n    return (\n      <View\n        onStartShouldSetResponder={this.shouldSetResponser}\n        onResponderMove={this.findViewForTouchEvent}\n        style={[styles.inspector, {height: Dimensions.get('window').height}]}>\n        {content}\n      </View>\n    );\n  }\n}\n\nvar styles = StyleSheet.create({\n  inspector: {\n    backgroundColor: 'transparent',\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n  },\n});\n\nmodule.exports = InspectorOverlay;\n"]}]