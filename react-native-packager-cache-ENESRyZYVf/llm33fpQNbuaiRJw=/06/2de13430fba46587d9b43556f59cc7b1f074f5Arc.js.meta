["1dca2119a340ae66fcfbc8dbcc865f53fe9b2650","3cb31b6c2cfa5621dfb818b9b42036b9a76dbec4",["react","prop-types","react-native"],[87,182,292],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native-progress/Shapes/Arc.js"],"names":["CIRCLE","Math","PI","makeArcPath","x","y","startAngleArg","endAngleArg","radius","direction","startAngle","endAngle","angle","Path","moveTo","arc","close","directionFactor","startSine","sin","startCosine","cos","endSine","endCosine","arcFlag","reverseFlag","Arc","props","offset","strokeCap","strokeWidth","restProps","path","left","top","propTypes","number","isRequired","shape","string","oneOf","defaultProps"],"mappings":"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","sourcesContent":["/* eslint new-cap: [\"error\", { \"capIsNew\": false }] */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { ART } from 'react-native';\n\nconst CIRCLE = Math.PI * 2;\n\nfunction makeArcPath(x, y, startAngleArg, endAngleArg, radius, direction) {\n  let startAngle = startAngleArg;\n  let endAngle = endAngleArg;\n  if (endAngle - startAngle >= CIRCLE) {\n    endAngle = CIRCLE + (endAngle % CIRCLE);\n  } else {\n    endAngle = endAngle % CIRCLE;\n  }\n  startAngle = startAngle % CIRCLE;\n  const angle = startAngle > endAngle ? CIRCLE - startAngle + endAngle : endAngle - startAngle;\n\n  if (angle >= CIRCLE) {\n    return ART.Path()\n      .moveTo(x + radius, y)\n      .arc(0, radius * 2, radius, radius)\n      .arc(0, radius * -2, radius, radius)\n      .close();\n  }\n\n  const directionFactor = direction === 'counter-clockwise' ? -1 : 1;\n  endAngle *= directionFactor;\n  startAngle *= directionFactor;\n  const startSine = Math.sin(startAngle);\n  const startCosine = Math.cos(startAngle);\n  const endSine = Math.sin(endAngle);\n  const endCosine = Math.cos(endAngle);\n\n  const arcFlag = angle > Math.PI ? 1 : 0;\n  const reverseFlag = direction === 'counter-clockwise' ? 0 : 1;\n\n  return `M${x + (radius * (1 + startSine))} ${y + radius - (radius * startCosine)}\n          A${radius} ${radius} 0 ${arcFlag} ${reverseFlag} ${x + (radius * (1 + endSine))} ${y + radius - (radius * endCosine)}`;\n}\n\nexport default class Arc extends Component {\n  static propTypes = {\n    startAngle: PropTypes.number.isRequired, // in radians\n    endAngle: PropTypes.number.isRequired, // in radians\n    radius: PropTypes.number.isRequired,\n    offset: PropTypes.shape({\n      top: PropTypes.number,\n      left: PropTypes.number,\n    }),\n    strokeCap: PropTypes.string,\n    strokeWidth: PropTypes.number,\n    direction: PropTypes.oneOf(['clockwise', 'counter-clockwise']),\n  };\n\n  static defaultProps = {\n    startAngle: 0,\n    offset: { top: 0, left: 0 },\n    strokeCap: 'butt',\n    strokeWidth: 0,\n    direction: 'clockwise',\n  };\n\n  render() {\n    const {\n      startAngle,\n      endAngle,\n      radius,\n      offset,\n      direction,\n      strokeCap,\n      strokeWidth,\n      ...restProps\n    } = this.props;\n\n    const path = makeArcPath(\n      (offset.left || 0) + (strokeWidth / 2),\n      (offset.top || 0) + (strokeWidth / 2),\n      startAngle,\n      endAngle,\n      radius - (strokeWidth / 2),\n      direction\n    );\n\n    return (\n      <ART.Shape\n        d={path}\n        strokeCap={strokeCap}\n        strokeWidth={strokeWidth}\n        {...restProps}\n      />\n    );\n  }\n}\n"]}]