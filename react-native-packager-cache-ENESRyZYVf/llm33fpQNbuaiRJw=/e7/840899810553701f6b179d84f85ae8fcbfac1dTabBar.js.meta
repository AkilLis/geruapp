["3ba1c06ec14dd0937280095f6e63affe071f3022","cf16e8b834d268a4d3a458a48775112510a0275f",["react","react-native","react-native-tabs","./DefaultRenderer","./Actions","./TabbedView","./Util"],[87,184,233,366,491,595,702],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native-router-flux/src/TabBar.js"],"names":["TabBar","el","selectedSceneKey","props","name","Error","JSON","stringify","Object","keys","active","key","onActivePress","onPress","context","renderScene","bind","navigationState","onNavigate","state","selected","children","index","hideTabBar","unmountScenes","hideOnChildTabs","contents","tabBarStyle","tabBarSelectedItemStyle","tabBarIconContainerStyle","onSelect","sceneKey","pressOpacity","filter","icon","tabIcon","map","Icon","flex","length","tabBarBackgroundImage","tabBarBackgroundImageStyle","propTypes","object","any","func","bool","number"],"mappings":";;;;AAAA;;;;AACA;;AAIA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;IAEMA,M;;;;6BAWYC,E,EAAIC,gB,EAAkB;AACpC,UAAI,CAAC,kBAAQD,GAAGE,KAAH,CAASC,IAAjB,CAAL,EAA6B;AAC3B,cAAM,IAAIC,KAAJ,CACJ,mCAAiCJ,GAAGE,KAAH,CAASC,IAA1C,wBACYE,KAAKC,SAAL,CAAeC,OAAOC,IAAP,mBAAf,CADZ,CADI,CAAN;AAGD;AACD,UAAMC,SAASR,qBAAqBD,GAAGE,KAAH,CAASC,IAAT,IAAiBH,GAAGU,GAAzC,CAAf;AACA,UAAID,UAAU,OAAOT,GAAGE,KAAH,CAASS,aAAhB,KAAkC,UAAhD,EAA4D;AAC1DX,WAAGE,KAAH,CAASS,aAAT;AACD,OAFD,MAGK,IAAI,OAAOX,GAAGE,KAAH,CAASU,OAAhB,KAA4B,UAAhC,EAA4C;AAC/CZ,WAAGE,KAAH,CAASU,OAAT;AACD,OAFI,MAEE;AACL,0BAAQZ,GAAGE,KAAH,CAASC,IAAjB;AACD;AACF;;;AAED,kBAAYD,KAAZ,EAAmBW,OAAnB,EAA4B;AAAA;;AAAA,4HACpBX,KADoB,EACbW,OADa;;AAE1B,UAAKC,WAAL,GAAmB,MAAKA,WAAL,CAAiBC,IAAjB,OAAnB;AAF0B;AAG3B;;;;gCAEWC,e,EAAiB;AAC3B,aACE;AACE,aAAKA,gBAAgBN,GADvB;AAEE,oBAAY,KAAKR,KAAL,CAAWe,UAFzB;AAGE,yBAAiBD;AAHnB,QADF;AAOD;;;6BAEQ;AAAA;;AACP,UAAME,QAAQ,KAAKhB,KAAL,CAAWc,eAAzB;AACA,UAAMG,WAAWD,MAAME,QAAN,CAAeF,MAAMG,KAArB,CAAjB;;AAEA,UAAMC,aAAa,KAAKpB,KAAL,CAAWqB,aAAX,IACjB,sCAA2BL,KAA3B,EAAkC,YAAlC,CADiB,IAEhB,KAAKhB,KAAL,CAAWsB,eAAX,IAA8B,sCAA2BL,QAA3B,EAAqC,MAArC,CAFjC;;AAIA,UAAMM,WACJ;AAAA;AAAA;AACE,iBAAOP,MAAMQ,WADf;AAEE,6BAAmBR,MAAMS,uBAF3B;AAGE,qBAAWT,MAAMU,wBAHnB;AAIE,oBAAU,kBAAC5B,EAAD;AAAA,mBAAQD,OAAO8B,QAAP,CAAgB7B,EAAhB,EAAoBmB,SAASW,QAA7B,CAAR;AAAA,WAJZ,IAIgEZ,KAJhE;AAKE,oBAAUC,SAASW,QALrB;AAME,wBAAc,KAAK5B,KAAL,CAAW6B;AAN3B;AAQGb,cAAME,QAAN,CAAeY,MAAf,CAAsB;AAAA,iBAAMhC,GAAGiC,IAAH,IAAW,OAAK/B,KAAL,CAAWgC,OAA5B;AAAA,SAAtB,EAA2DC,GAA3D,CAA+D,UAACnC,EAAD,EAAQ;AACtE,cAAMoC,OAAOpC,GAAGiC,IAAH,IAAW,OAAK/B,KAAL,CAAWgC,OAAnC;AACA,iBAAO,8BAAC,IAAD,2BAAU,OAAKhC,KAAf,EAA0BF,EAA1B,EAAP;AACD,SAHA;AARH,OADF;AAeA,aACE;AAAA;AAAA;AACE,iBAAO,EAAEqC,MAAM,CAAR;AADT;AAGE;AACE,2BAAiB,KAAKnC,KAAL,CAAWc,eAD9B;AAEE,iBAAO,EAAEqB,MAAM,CAAR,EAFT;AAGE,uBAAa,KAAKvB;AAHpB,UAHF;AAQG,SAACQ,UAAD,IAAeJ,MAAME,QAAN,CAAeY,MAAf,CAAsB;AAAA,iBAAMhC,GAAGiC,IAAT;AAAA,SAAtB,EAAqCK,MAArC,GAA8C,CAA7D,KACEpB,MAAMqB,qBAAN,GACC;AAAA;AAAA,YAAO,QAAQrB,MAAMqB,qBAArB,EAA4C,OAAOrB,MAAMsB,0BAAzD;AACGf;AADH,SADD,GAIGA,QALL;AARH,OADF;AAkBD;;;;;AApFG1B,M,CAEG0C,S,GAAY;AACjBzB,mBAAiB,iBAAU0B,MADV;AAEjBR,WAAS,iBAAUS,GAFF;AAGjB1B,cAAY,iBAAU2B,IAHL;AAIjBrB,iBAAe,iBAAUsB,IAJR;AAKjBd,gBAAc,iBAAUe,MALP;AAMjBtB,mBAAiB,iBAAUqB;AANV,C;kBAsFN9C,M","sourcesContent":["import React, { Component, PropTypes } from 'react';\nimport {\n  Image,\n  View,\n} from 'react-native';\nimport Tabs from 'react-native-tabs';\nimport DefaultRenderer from './DefaultRenderer';\nimport Actions from './Actions';\nimport TabbedView from './TabbedView';\nimport { deepestExplicitValueForKey } from './Util';\n\nclass TabBar extends Component {\n\n  static propTypes = {\n    navigationState: PropTypes.object,\n    tabIcon: PropTypes.any,\n    onNavigate: PropTypes.func,\n    unmountScenes: PropTypes.bool,\n    pressOpacity: PropTypes.number,\n    hideOnChildTabs: PropTypes.bool,\n  };\n\n  static onSelect(el, selectedSceneKey) {\n    if (!Actions[el.props.name]) {\n      throw new Error(\n        `No action is defined for name=${el.props.name} ` +\n        `actions: ${JSON.stringify(Object.keys(Actions))}`);\n    }\n    const active = selectedSceneKey == (el.props.name || el.key)\n    if (active && typeof el.props.onActivePress === 'function') {\n      el.props.onActivePress();\n    }\n    else if (typeof el.props.onPress === 'function') {\n      el.props.onPress();\n    } else {\n      Actions[el.props.name]();\n    }\n  }\n\n  constructor(props, context) {\n    super(props, context);\n    this.renderScene = this.renderScene.bind(this);\n  }\n\n  renderScene(navigationState) {\n    return (\n      <DefaultRenderer\n        key={navigationState.key}\n        onNavigate={this.props.onNavigate}\n        navigationState={navigationState}\n      />\n    );\n  }\n\n  render() {\n    const state = this.props.navigationState;\n    const selected = state.children[state.index];\n\n    const hideTabBar = this.props.unmountScenes ||\n      deepestExplicitValueForKey(state, 'hideTabBar') ||\n      (this.props.hideOnChildTabs && deepestExplicitValueForKey(selected, 'tabs'));\n\n    const contents = (\n      <Tabs\n        style={state.tabBarStyle}\n        selectedIconStyle={state.tabBarSelectedItemStyle}\n        iconStyle={state.tabBarIconContainerStyle}\n        onSelect={(el) => TabBar.onSelect(el, selected.sceneKey)} {...state}\n        selected={selected.sceneKey}\n        pressOpacity={this.props.pressOpacity}\n      >\n        {state.children.filter(el => el.icon || this.props.tabIcon).map((el) => {\n          const Icon = el.icon || this.props.tabIcon;\n          return <Icon {...this.props} {...el} />;\n        })}\n      </Tabs>\n    );\n    return (\n      <View\n        style={{ flex: 1 }}\n      >\n        <TabbedView\n          navigationState={this.props.navigationState}\n          style={{ flex: 1 }}\n          renderScene={this.renderScene}\n        />\n        {!hideTabBar && state.children.filter(el => el.icon).length > 0 &&\n          (state.tabBarBackgroundImage ? (\n            <Image source={state.tabBarBackgroundImage} style={state.tabBarBackgroundImageStyle}>\n              {contents}\n            </Image>\n          ) : contents)\n        }\n      </View>\n    );\n  }\n\n}\n\nexport default TabBar;\n"]}]