["a5ac8a6fa57401647e66b7ffec5eb5501cd95d0a","16fbad716f952709e4d851c6b208c834e94e2ed9",["ReactTypeOfWork","fbjs/lib/emptyObject","fbjs/lib/invariant"],[40,133,182],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native/Libraries/Renderer/src/renderers/shared/stack/reconciler/ReactOwner.js"],"names":["require","ClassComponent","emptyObject","invariant","isValidOwner","object","attachRef","detachRef","ReactOwner","addComponentAsRefTo","component","ref","owner","tag","inst","stateNode","refs","getPublicInstance","removeComponentAsRefFrom","ownerPublicInstance","module","exports"],"mappings":";;AAYA;;eAEuBA,QAAQ,iBAAR,C;IAAlBC,c,YAAAA,c;;AAEL,IAAIC,cAAcF,QAAQ,sBAAR,CAAlB;AACA,IAAIG,YAAYH,QAAQ,oBAAR,CAAhB;;AAUA,SAASI,YAAT,CAAsBC,MAAtB,EAA4C;AAC1C,SAAO,CAAC,EAAEA,UACR,OAAOA,OAAOC,SAAd,KAA4B,UADpB,IAER,OAAOD,OAAOE,SAAd,KAA4B,UAFtB,CAAR;AAGD;;AAgCD,IAAIC,aAAa;AAUfC,uBAAqB,6BACnBC,SADmB,EAEnBC,GAFmB,EAGnBC,KAHmB,EAIb;AACN,QAAIA,SAAUA,KAAD,CAAaC,GAAb,KAAqBZ,cAAlC,EAAkD;AAChD,UAAMa,OAAQF,KAAD,CAAaG,SAA1B;AACA,UAAMC,OAAOF,KAAKE,IAAL,KAAcd,WAAd,GAA6BY,KAAKE,IAAL,GAAY,EAAzC,GAA+CF,KAAKE,IAAjE;AACAA,WAAKL,GAAL,IAAYD,UAAUO,iBAAV,EAAZ;AACD,KAJD,MAIO;AACLd,gBACEC,aAAaQ,KAAb,CADF,EAEE,0EACE,2EADF,GAEE,+DAFF,GAGE,sDALJ;AAOCA,WAAD,CAAaN,SAAb,CAAuBK,GAAvB,EAA4BD,SAA5B;AACD;AACF,GA7Bc;;AAwCfQ,4BAA0B,kCACxBR,SADwB,EAExBC,GAFwB,EAGxBC,KAHwB,EAIlB;AACN,QAAIA,SAAUA,KAAD,CAAaC,GAAb,KAAqBZ,cAAlC,EAAkD;AAChD,UAAMa,OAAQF,KAAD,CAAaG,SAA1B;AACA,UAAID,QAAQA,KAAKE,IAAL,CAAUL,GAAV,MAAmBD,UAAUO,iBAAV,EAA/B,EAA8D;AAC5D,eAAOH,KAAKE,IAAL,CAAUL,GAAV,CAAP;AACD;AACF,KALD,MAKO;AACLR,gBACEC,aAAaQ,KAAb,CADF,EAEE,+EACE,6EADF,GAEE,+DAFF,GAGE,sDALJ;AAOA,UAAIO,sBAAuBP,KAAD,CAAaK,iBAAb,EAA1B;;AAGA,UACEE,uBACAA,oBAAoBH,IAApB,CAAyBL,GAAzB,MAAkCD,UAAUO,iBAAV,EAFpC,EAGE;AACCL,aAAD,CAAaL,SAAb,CAAuBI,GAAvB;AACD;AACF;AACF;AApEc,CAAjB;;AAuEAS,OAAOC,OAAP,GAAiBb,UAAjB","sourcesContent":["/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactOwner\n * @flow\n */\n\n'use strict';\n\nvar {ClassComponent} = require('ReactTypeOfWork');\n\nvar emptyObject = require('fbjs/lib/emptyObject');\nvar invariant = require('fbjs/lib/invariant');\n\nimport type {Fiber} from 'ReactFiber';\nimport type {ReactInstance} from 'ReactInstanceType';\n\n/**\n * @param {?object} object\n * @return {boolean} True if `object` is a valid owner.\n * @final\n */\nfunction isValidOwner(object: any): boolean {\n  return !!(object &&\n    typeof object.attachRef === 'function' &&\n    typeof object.detachRef === 'function');\n}\n\n/**\n * ReactOwners are capable of storing references to owned components.\n *\n * All components are capable of //being// referenced by owner components, but\n * only ReactOwner components are capable of //referencing// owned components.\n * The named reference is known as a \"ref\".\n *\n * Refs are available when mounted and updated during reconciliation.\n *\n *   var MyComponent = React.createClass({\n *     render: function() {\n *       return (\n *         <div onClick={this.handleClick}>\n *           <CustomComponent ref=\"custom\" />\n *         </div>\n *       );\n *     },\n *     handleClick: function() {\n *       this.refs.custom.handleClick();\n *     },\n *     componentDidMount: function() {\n *       this.refs.custom.initialize();\n *     }\n *   });\n *\n * Refs should rarely be used. When refs are used, they should only be done to\n * control data that is not handled by React's data flow.\n *\n * @class ReactOwner\n */\nvar ReactOwner = {\n  /**\n   * Adds a component by ref to an owner component.\n   *\n   * @param {ReactComponent} component Component to reference.\n   * @param {string} ref Name by which to refer to the component.\n   * @param {ReactOwner} owner Component on which to record the ref.\n   * @final\n   * @internal\n   */\n  addComponentAsRefTo: function(\n    component: ReactInstance,\n    ref: string,\n    owner: ReactInstance | Fiber,\n  ): void {\n    if (owner && (owner: any).tag === ClassComponent) {\n      const inst = (owner: any).stateNode;\n      const refs = inst.refs === emptyObject ? (inst.refs = {}) : inst.refs;\n      refs[ref] = component.getPublicInstance();\n    } else {\n      invariant(\n        isValidOwner(owner),\n        'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might ' +\n          \"be adding a ref to a component that was not created inside a component's \" +\n          '`render` method, or you have multiple copies of React loaded ' +\n          '(details: https://fb.me/react-refs-must-have-owner).',\n      );\n      (owner: any).attachRef(ref, component);\n    }\n  },\n\n  /**\n   * Removes a component by ref from an owner component.\n   *\n   * @param {ReactComponent} component Component to dereference.\n   * @param {string} ref Name of the ref to remove.\n   * @param {ReactOwner} owner Component on which the ref is recorded.\n   * @final\n   * @internal\n   */\n  removeComponentAsRefFrom: function(\n    component: ReactInstance,\n    ref: string,\n    owner: ReactInstance | Fiber,\n  ): void {\n    if (owner && (owner: any).tag === ClassComponent) {\n      const inst = (owner: any).stateNode;\n      if (inst && inst.refs[ref] === component.getPublicInstance()) {\n        delete inst.refs[ref];\n      }\n    } else {\n      invariant(\n        isValidOwner(owner),\n        'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might ' +\n          \"be removing a ref to a component that was not created inside a component's \" +\n          '`render` method, or you have multiple copies of React loaded ' +\n          '(details: https://fb.me/react-refs-must-have-owner).',\n      );\n      var ownerPublicInstance = (owner: any).getPublicInstance();\n      // Check that `component`'s owner is still alive and that `component` is still the current ref\n      // because we do not want to detach the ref if another component stole it.\n      if (\n        ownerPublicInstance &&\n        ownerPublicInstance.refs[ref] === component.getPublicInstance()\n      ) {\n        (owner: any).detachRef(ref);\n      }\n    }\n  },\n};\n\nmodule.exports = ReactOwner;\n"]}]