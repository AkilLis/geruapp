["64662061c3768644f54a85e99bdef2396d9a2ce1","25e84cadf0cdc2af6ba8379c1f817d99a291b1a7",["Animated","ColorPropType","EdgeInsetsPropType","Platform","PointPropType","React","ReactNative","ScrollResponder","ScrollViewStickyHeader","StyleSheet","StyleSheetPropType","View","ViewPropTypes","ViewStylePropTypes","dismissKeyboard","flattenStyle","fbjs/lib/invariant","processDecelerationRate","requireNativeComponent"],[39,80,131,177,218,256,292,338,395,447,495,537,574,625,679,726,767,828,926],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native/Libraries/Components/ScrollView/ScrollView.js"],"names":["Animated","require","ColorPropType","EdgeInsetsPropType","Platform","PointPropType","React","ReactNative","ScrollResponder","ScrollViewStickyHeader","StyleSheet","StyleSheetPropType","View","ViewPropTypes","ViewStylePropTypes","dismissKeyboard","flattenStyle","invariant","processDecelerationRate","PropTypes","requireNativeComponent","ScrollView","createClass","propTypes","automaticallyAdjustContentInsets","bool","contentInset","contentOffset","bounces","bouncesZoom","alwaysBounceHorizontal","alwaysBounceVertical","centerContent","contentContainerStyle","decelerationRate","oneOfType","oneOf","number","horizontal","indicatorStyle","directionalLockEnabled","canCancelContentTouches","keyboardDismissMode","keyboardShouldPersistTaps","maximumZoomScale","minimumZoomScale","onScroll","func","onScrollAnimationEnd","onContentSizeChange","pagingEnabled","scrollEnabled","scrollEventThrottle","scrollIndicatorInsets","scrollsToTop","showsHorizontalScrollIndicator","showsVerticalScrollIndicator","stickyHeaderIndices","arrayOf","style","snapToInterval","snapToAlignment","removeClippedSubviews","zoomScale","refreshControl","element","endFillColor","scrollPerfTag","string","overScrollMode","mixins","Mixin","_scrollAnimatedValue","Value","_scrollAnimatedValueAttachment","_stickyHeaderRefs","Map","_headerLayoutYs","getInitialState","scrollResponderMixinGetInitialState","componentWillMount","componentDidMount","_updateAnimatedNodeAttachment","componentDidUpdate","componentWillUnmount","detach","setNativeProps","props","_scrollViewRef","getScrollResponder","getScrollableNode","findNodeHandle","getInnerViewNode","_innerViewRef","scrollTo","y","x","animated","console","warn","scrollResponderScrollTo","scrollToEnd","options","scrollResponderScrollToEnd","scrollWithoutAnimationTo","_getKeyForIndex","index","childArray","child","key","length","attachNativeEvent","nativeEvent","_setStickyHeaderRef","ref","set","delete","_onStickyHeaderLayout","event","Children","toArray","children","layoutY","layout","indexOfIndex","indexOf","previousHeaderIndex","previousHeader","get","setNextHeaderY","_handleScroll","e","__DEV__","OS","log","scrollResponderHandleScroll","_handleContentOnLayout","width","height","_setScrollViewRef","_setInnerViewRef","render","ScrollViewClass","ScrollContentContainerViewClass","RCTScrollView","RCTScrollContentView","AndroidHorizontalScrollView","AndroidScrollView","undefined","styles","contentContainerHorizontal","childLayoutProps","filter","prop","JSON","stringify","contentSizeChangeProps","onLayout","hasStickyHeaders","map","nextIndex","contentContainer","baseStyle","baseHorizontal","baseVertical","onMomentumScrollBegin","scrollResponderHandleMomentumScrollBegin","onMomentumScrollEnd","scrollResponderHandleMomentumScrollEnd","onResponderGrant","scrollResponderHandleResponderGrant","onResponderReject","scrollResponderHandleResponderReject","onResponderRelease","scrollResponderHandleResponderRelease","onResponderTerminate","scrollResponderHandleTerminate","onResponderTerminationRequest","scrollResponderHandleTerminationRequest","onScrollBeginDrag","scrollResponderHandleScrollBeginDrag","onScrollEndDrag","scrollResponderHandleScrollEndDrag","onScrollShouldSetResponder","scrollResponderHandleScrollShouldSetResponder","onStartShouldSetResponder","scrollResponderHandleStartShouldSetResponder","onStartShouldSetResponderCapture","scrollResponderHandleStartShouldSetResponderCapture","onTouchEnd","scrollResponderHandleTouchEnd","onTouchMove","scrollResponderHandleTouchMove","onTouchStart","scrollResponderHandleTouchStart","sendMomentumEvents","isTVOS","cloneElement","create","flexGrow","flexShrink","flexDirection","overflow","nativeOnlyProps","nativeOnly","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ScrollView\n * @flow\n */\n'use strict';\n\nconst Animated = require('Animated');\nconst ColorPropType = require('ColorPropType');\nconst EdgeInsetsPropType = require('EdgeInsetsPropType');\nconst Platform = require('Platform');\nconst PointPropType = require('PointPropType');\nconst React = require('React');\nconst ReactNative = require('ReactNative');\nconst ScrollResponder = require('ScrollResponder');\nconst ScrollViewStickyHeader = require('ScrollViewStickyHeader');\nconst StyleSheet = require('StyleSheet');\nconst StyleSheetPropType = require('StyleSheetPropType');\nconst View = require('View');\nconst ViewPropTypes = require('ViewPropTypes');\nconst ViewStylePropTypes = require('ViewStylePropTypes');\n\nconst dismissKeyboard = require('dismissKeyboard');\nconst flattenStyle = require('flattenStyle');\nconst invariant = require('fbjs/lib/invariant');\nconst processDecelerationRate = require('processDecelerationRate');\nconst PropTypes = React.PropTypes;\nconst requireNativeComponent = require('requireNativeComponent');\n\n/**\n * Component that wraps platform ScrollView while providing\n * integration with touch locking \"responder\" system.\n *\n * Keep in mind that ScrollViews must have a bounded height in order to work,\n * since they contain unbounded-height children into a bounded container (via\n * a scroll interaction). In order to bound the height of a ScrollView, either\n * set the height of the view directly (discouraged) or make sure all parent\n * views have bounded height. Forgetting to transfer `{flex: 1}` down the\n * view stack can lead to errors here, which the element inspector makes\n * easy to debug.\n *\n * Doesn't yet support other contained responders from blocking this scroll\n * view from becoming the responder.\n *\n *\n * `<ScrollView>` vs [`<FlatList>`](/react-native/docs/flatlist.html) - which one to use?\n *\n * `ScrollView` simply renders all its react child components at once. That\n * makes it very easy to understand and use.\n *\n * On the other hand, this has a performance downside. Imagine you have a very\n * long list of items you want to display, maybe several screens worth of\n * content. Creating JS components and native views for everythign all at once,\n * much of which may not even be shown, will contribute to slow rendering and\n * increased memory usage.\n *\n * This is where `FlatList` comes into play. `FlatList` renders items lazily,\n * just when they are about to appear, and removes items that scroll way off\n * screen to save memory and processing time.\n *\n * `FlatList` is also handy if you want to render separators between your items,\n * multiple columns, infinite scroll loading, or any number of other features it\n * supports out of the box.\n */\n// $FlowFixMe(>=0.41.0)\nconst ScrollView = React.createClass({\n  propTypes: {\n    ...ViewPropTypes,\n    /**\n     * Controls whether iOS should automatically adjust the content inset\n     * for scroll views that are placed behind a navigation bar or\n     * tab bar/ toolbar. The default value is true.\n     * @platform ios\n     */\n    automaticallyAdjustContentInsets: PropTypes.bool,\n    /**\n     * The amount by which the scroll view content is inset from the edges\n     * of the scroll view. Defaults to `{top: 0, left: 0, bottom: 0, right: 0}`.\n     * @platform ios\n     */\n    contentInset: EdgeInsetsPropType,\n    /**\n     * Used to manually set the starting scroll offset.\n     * The default value is `{x: 0, y: 0}`.\n     * @platform ios\n     */\n    contentOffset: PointPropType,\n    /**\n     * When true, the scroll view bounces when it reaches the end of the\n     * content if the content is larger then the scroll view along the axis of\n     * the scroll direction. When false, it disables all bouncing even if\n     * the `alwaysBounce*` props are true. The default value is true.\n     * @platform ios\n     */\n    bounces: PropTypes.bool,\n    /**\n     * When true, gestures can drive zoom past min/max and the zoom will animate\n     * to the min/max value at gesture end, otherwise the zoom will not exceed\n     * the limits.\n     * @platform ios\n     */\n    bouncesZoom: PropTypes.bool,\n    /**\n     * When true, the scroll view bounces horizontally when it reaches the end\n     * even if the content is smaller than the scroll view itself. The default\n     * value is true when `horizontal={true}` and false otherwise.\n     * @platform ios\n     */\n    alwaysBounceHorizontal: PropTypes.bool,\n    /**\n     * When true, the scroll view bounces vertically when it reaches the end\n     * even if the content is smaller than the scroll view itself. The default\n     * value is false when `horizontal={true}` and true otherwise.\n     * @platform ios\n     */\n    alwaysBounceVertical: PropTypes.bool,\n    /**\n     * When true, the scroll view automatically centers the content when the\n     * content is smaller than the scroll view bounds; when the content is\n     * larger than the scroll view, this property has no effect. The default\n     * value is false.\n     * @platform ios\n     */\n    centerContent: PropTypes.bool,\n    /**\n     * These styles will be applied to the scroll view content container which\n     * wraps all of the child views. Example:\n     *\n     *   return (\n     *     <ScrollView contentContainerStyle={styles.contentContainer}>\n     *     </ScrollView>\n     *   );\n     *   ...\n     *   const styles = StyleSheet.create({\n     *     contentContainer: {\n     *       paddingVertical: 20\n     *     }\n     *   });\n     */\n    contentContainerStyle: StyleSheetPropType(ViewStylePropTypes),\n    /**\n     * A floating-point number that determines how quickly the scroll view\n     * decelerates after the user lifts their finger. You may also use string\n     * shortcuts `\"normal\"` and `\"fast\"` which match the underlying iOS settings\n     * for `UIScrollViewDecelerationRateNormal` and\n     * `UIScrollViewDecelerationRateFast` respectively.\n     *   - normal: 0.998 (the default)\n     *   - fast: 0.99\n     * @platform ios\n     */\n    decelerationRate: PropTypes.oneOfType([\n      PropTypes.oneOf(['fast', 'normal']),\n      PropTypes.number,\n    ]),\n    /**\n     * When true, the scroll view's children are arranged horizontally in a row\n     * instead of vertically in a column. The default value is false.\n     */\n    horizontal: PropTypes.bool,\n    /**\n     * The style of the scroll indicators.\n     *   - `default` (the default), same as `black`.\n     *   - `black`, scroll indicator is black. This style is good against a light background.\n     *   - `white`, scroll indicator is white. This style is good against a dark background.\n     * @platform ios\n     */\n    indicatorStyle: PropTypes.oneOf([\n      'default', // default\n      'black',\n      'white',\n    ]),\n    /**\n     * When true, the ScrollView will try to lock to only vertical or horizontal\n     * scrolling while dragging.  The default value is false.\n     * @platform ios\n     */\n    directionalLockEnabled: PropTypes.bool,\n    /**\n     * When false, once tracking starts, won't try to drag if the touch moves.\n     * The default value is true.\n     * @platform ios\n     */\n    canCancelContentTouches: PropTypes.bool,\n    /**\n     * Determines whether the keyboard gets dismissed in response to a drag.\n     *   - 'none' (the default), drags do not dismiss the keyboard.\n     *   - 'on-drag', the keyboard is dismissed when a drag begins.\n     *   - 'interactive', the keyboard is dismissed interactively with the drag and moves in\n     *     synchrony with the touch; dragging upwards cancels the dismissal.\n     *     On android this is not supported and it will have the same behavior as 'none'.\n     */\n    keyboardDismissMode: PropTypes.oneOf([\n      'none', // default\n      'interactive',\n      'on-drag',\n    ]),\n    /**\n     * Determines when the keyboard should stay visible after a tap.\n     *\n     *   - 'never' (the default), tapping outside of the focused text input when the keyboard\n     *     is up dismisses the keyboard. When this happens, children won't receive the tap.\n     *   - 'always', the keyboard will not dismiss automatically, and the scroll view will not\n     *     catch taps, but children of the scroll view can catch taps.\n     *   - 'handled', the keyboard will not dismiss automatically when the tap was handled by\n     *     a children, (or captured by an ancestor).\n     *   - false, deprecated, use 'never' instead\n     *   - true, deprecated, use 'always' instead\n     */\n    keyboardShouldPersistTaps: PropTypes.oneOf(['always', 'never', 'handled', false, true]),\n    /**\n     * The maximum allowed zoom scale. The default value is 1.0.\n     * @platform ios\n     */\n    maximumZoomScale: PropTypes.number,\n    /**\n     * The minimum allowed zoom scale. The default value is 1.0.\n     * @platform ios\n     */\n    minimumZoomScale: PropTypes.number,\n    /**\n     * Fires at most once per frame during scrolling. The frequency of the\n     * events can be controlled using the `scrollEventThrottle` prop.\n     */\n    onScroll: PropTypes.func,\n    /**\n     * Called when a scrolling animation ends.\n     * @platform ios\n     */\n    onScrollAnimationEnd: PropTypes.func,\n    /**\n     * Called when scrollable content view of the ScrollView changes.\n     *\n     * Handler function is passed the content width and content height as parameters:\n     * `(contentWidth, contentHeight)`\n     *\n     * It's implemented using onLayout handler attached to the content container\n     * which this ScrollView renders.\n     */\n    onContentSizeChange: PropTypes.func,\n    /**\n     * When true, the scroll view stops on multiples of the scroll view's size\n     * when scrolling. This can be used for horizontal pagination. The default\n     * value is false.\n     */\n    pagingEnabled: PropTypes.bool,\n    /**\n     * When false, the content does not scroll.\n     * The default value is true.\n     */\n    scrollEnabled: PropTypes.bool,\n    /**\n     * This controls how often the scroll event will be fired while scrolling\n     * (as a time interval in ms). A lower number yields better accuracy for code\n     * that is tracking the scroll position, but can lead to scroll performance\n     * problems due to the volume of information being send over the bridge.\n     * You will not notice a difference between values set between 1-16 as the\n     * JS run loop is synced to the screen refresh rate. If you do not need precise\n     * scroll position tracking, set this value higher to limit the information\n     * being sent across the bridge. The default value is zero, which results in\n     * the scroll event being sent only once each time the view is scrolled.\n     * @platform ios\n     */\n    scrollEventThrottle: PropTypes.number,\n    /**\n     * The amount by which the scroll view indicators are inset from the edges\n     * of the scroll view. This should normally be set to the same value as\n     * the `contentInset`. Defaults to `{0, 0, 0, 0}`.\n     * @platform ios\n     */\n    scrollIndicatorInsets: EdgeInsetsPropType,\n    /**\n     * When true, the scroll view scrolls to top when the status bar is tapped.\n     * The default value is true.\n     * @platform ios\n     */\n    scrollsToTop: PropTypes.bool,\n    /**\n     * When true, shows a horizontal scroll indicator.\n     * The default value is true.\n     */\n    showsHorizontalScrollIndicator: PropTypes.bool,\n    /**\n     * When true, shows a vertical scroll indicator.\n     * The default value is true.\n     */\n    showsVerticalScrollIndicator: PropTypes.bool,\n    /**\n     * An array of child indices determining which children get docked to the\n     * top of the screen when scrolling. For example, passing\n     * `stickyHeaderIndices={[0]}` will cause the first child to be fixed to the\n     * top of the scroll view. This property is not supported in conjunction\n     * with `horizontal={true}`.\n     */\n    stickyHeaderIndices: PropTypes.arrayOf(PropTypes.number),\n    style: StyleSheetPropType(ViewStylePropTypes),\n    /**\n     * When set, causes the scroll view to stop at multiples of the value of\n     * `snapToInterval`. This can be used for paginating through children\n     * that have lengths smaller than the scroll view. Used in combination\n     * with `snapToAlignment`.\n     * @platform ios\n     */\n    snapToInterval: PropTypes.number,\n    /**\n     * When `snapToInterval` is set, `snapToAlignment` will define the relationship\n     * of the snapping to the scroll view.\n     *   - `start` (the default) will align the snap at the left (horizontal) or top (vertical)\n     *   - `center` will align the snap in the center\n     *   - `end` will align the snap at the right (horizontal) or bottom (vertical)\n     * @platform ios\n     */\n    snapToAlignment: PropTypes.oneOf([\n      'start', // default\n      'center',\n      'end',\n    ]),\n    /**\n     * Experimental: When true, offscreen child views (whose `overflow` value is\n     * `hidden`) are removed from their native backing superview when offscreen.\n     * This can improve scrolling performance on long lists. The default value is\n     * true.\n     */\n    removeClippedSubviews: PropTypes.bool,\n    /**\n     * The current scale of the scroll view content. The default value is 1.0.\n     * @platform ios\n     */\n    zoomScale: PropTypes.number,\n\n    /**\n     * A RefreshControl component, used to provide pull-to-refresh\n     * functionality for the ScrollView. Only works for vertical ScrollViews\n     * (`horizontal` prop must be `false`).\n     *\n     * See [RefreshControl](docs/refreshcontrol.html).\n     */\n    refreshControl: PropTypes.element,\n\n    /**\n     * Sometimes a scrollview takes up more space than its content fills. When this is\n     * the case, this prop will fill the rest of the scrollview with a color to avoid setting\n     * a background and creating unnecessary overdraw. This is an advanced optimization\n     * that is not needed in the general case.\n     * @platform android\n     */\n    endFillColor: ColorPropType,\n\n    /**\n     * Tag used to log scroll performance on this scroll view. Will force\n     * momentum events to be turned on (see sendMomentumEvents). This doesn't do\n     * anything out of the box and you need to implement a custom native\n     * FpsListener for it to be useful.\n     * @platform android\n     */\n    scrollPerfTag: PropTypes.string,\n\n     /**\n     * Used to override default value of overScroll mode.\n     *\n     * Possible values:\n     *\n     *  - `'auto'` - Default value, allow a user to over-scroll\n     *    this view only if the content is large enough to meaningfully scroll.\n     *  - `'always'` - Always allow a user to over-scroll this view.\n     *  - `'never'` - Never allow a user to over-scroll this view.\n     *\n     * @platform android\n     */\n    overScrollMode: PropTypes.oneOf([\n      'auto',\n      'always',\n      'never',\n    ]),\n  },\n\n  mixins: [ScrollResponder.Mixin],\n\n  _scrollAnimatedValue: (new Animated.Value(0): Animated.Value),\n  _scrollAnimatedValueAttachment: (null: ?{detach: () => void}),\n  _stickyHeaderRefs: (new Map(): Map<number, ScrollViewStickyHeader>),\n  _headerLayoutYs: (new Map(): Map<string, number>),\n  getInitialState: function() {\n    return this.scrollResponderMixinGetInitialState();\n  },\n\n  componentWillMount: function() {\n    this._scrollAnimatedValue = new Animated.Value(0);\n    this._stickyHeaderRefs = new Map();\n    this._headerLayoutYs = new Map();\n  },\n\n  componentDidMount: function() {\n    this._updateAnimatedNodeAttachment();\n  },\n\n  componentDidUpdate: function() {\n    this._updateAnimatedNodeAttachment();\n  },\n\n  componentWillUnmount: function() {\n    if (this._scrollAnimatedValueAttachment) {\n      this._scrollAnimatedValueAttachment.detach();\n    }\n  },\n\n  setNativeProps: function(props: Object) {\n    this._scrollViewRef && this._scrollViewRef.setNativeProps(props);\n  },\n\n  /**\n   * Returns a reference to the underlying scroll responder, which supports\n   * operations like `scrollTo`. All ScrollView-like components should\n   * implement this method so that they can be composed while providing access\n   * to the underlying scroll responder's methods.\n   */\n  getScrollResponder: function(): ScrollView {\n    return this;\n  },\n\n  getScrollableNode: function(): any {\n    return ReactNative.findNodeHandle(this._scrollViewRef);\n  },\n\n  getInnerViewNode: function(): any {\n    return ReactNative.findNodeHandle(this._innerViewRef);\n  },\n\n  /**\n   * Scrolls to a given x, y offset, either immediately or with a smooth animation.\n   *\n   * Example:\n   *\n   * `scrollTo({x: 0; y: 0; animated: true})`\n   *\n   * Note: The weird function signature is due to the fact that, for historical reasons,\n   * the function also accepts separate arguments as an alternative to the options object.\n   * This is deprecated due to ambiguity (y before x), and SHOULD NOT BE USED.\n   */\n  scrollTo: function(\n    y?: number | { x?: number, y?: number, animated?: boolean },\n    x?: number,\n    animated?: boolean\n  ) {\n    if (typeof y === 'number') {\n      console.warn('`scrollTo(y, x, animated)` is deprecated. Use `scrollTo({x: 5, y: 5, ' +\n        'animated: true})` instead.');\n    } else {\n      ({x, y, animated} = y || {});\n    }\n    this.getScrollResponder().scrollResponderScrollTo(\n      {x: x || 0, y: y || 0, animated: animated !== false}\n    );\n  },\n\n  /**\n   * If this is a vertical ScrollView scrolls to the bottom.\n   * If this is a horizontal ScrollView scrolls to the right.\n   *\n   * Use `scrollToEnd({animated: true})` for smooth animated scrolling,\n   * `scrollToEnd({animated: false})` for immediate scrolling.\n   * If no options are passed, `animated` defaults to true.\n   */\n  scrollToEnd: function(\n    options?: { animated?: boolean },\n  ) {\n    // Default to true\n    const animated = (options && options.animated) !== false;\n    this.getScrollResponder().scrollResponderScrollToEnd({\n      animated: animated,\n    });\n  },\n\n  /**\n   * Deprecated, use `scrollTo` instead.\n   */\n  scrollWithoutAnimationTo: function(y: number = 0, x: number = 0) {\n    console.warn('`scrollWithoutAnimationTo` is deprecated. Use `scrollTo` instead');\n    this.scrollTo({x, y, animated: false});\n  },\n\n  _getKeyForIndex: function(index, childArray) {\n    const child = childArray[index];\n    return child && child.key;\n  },\n\n  _updateAnimatedNodeAttachment: function() {\n    if (this.props.stickyHeaderIndices && this.props.stickyHeaderIndices.length > 0) {\n      if (!this._scrollAnimatedValueAttachment) {\n        this._scrollAnimatedValueAttachment = Animated.attachNativeEvent(\n          this._scrollViewRef,\n          'onScroll',\n          [{nativeEvent: {contentOffset: {y: this._scrollAnimatedValue}}}]\n        );\n      }\n    } else {\n      if (this._scrollAnimatedValueAttachment) {\n        this._scrollAnimatedValueAttachment.detach();\n      }\n    }\n  },\n\n  _setStickyHeaderRef: function(key, ref) {\n    if (ref) {\n      this._stickyHeaderRefs.set(key, ref);\n    } else {\n      this._stickyHeaderRefs.delete(key);\n    }\n  },\n\n  _onStickyHeaderLayout: function(index, event, key) {\n    if (!this.props.stickyHeaderIndices) {\n      return;\n    }\n    const childArray = React.Children.toArray(this.props.children);\n    if (key !== this._getKeyForIndex(index, childArray)) {\n      // ignore stale layout update\n      return;\n    }\n\n    const layoutY = event.nativeEvent.layout.y;\n    this._headerLayoutYs.set(key, layoutY);\n\n    const indexOfIndex = this.props.stickyHeaderIndices.indexOf(index);\n    const previousHeaderIndex = this.props.stickyHeaderIndices[indexOfIndex - 1];\n    if (previousHeaderIndex != null) {\n      const previousHeader = this._stickyHeaderRefs.get(\n        this._getKeyForIndex(previousHeaderIndex, childArray)\n      );\n      previousHeader && previousHeader.setNextHeaderY(layoutY);\n    }\n  },\n\n  _handleScroll: function(e: Object) {\n    if (__DEV__) {\n      if (this.props.onScroll && this.props.scrollEventThrottle == null && Platform.OS === 'ios') {\n        console.log( // eslint-disable-line no-console-disallow\n          'You specified `onScroll` on a <ScrollView> but not ' +\n          '`scrollEventThrottle`. You will only receive one event. ' +\n          'Using `16` you get all the events but be aware that it may ' +\n          'cause frame drops, use a bigger number if you don\\'t need as ' +\n          'much precision.'\n        );\n      }\n    }\n    if (Platform.OS === 'android') {\n      if (this.props.keyboardDismissMode === 'on-drag') {\n        dismissKeyboard();\n      }\n    }\n    this.scrollResponderHandleScroll(e);\n  },\n\n  _handleContentOnLayout: function(e: Object) {\n    const {width, height} = e.nativeEvent.layout;\n    this.props.onContentSizeChange && this.props.onContentSizeChange(width, height);\n  },\n\n  _scrollViewRef: (null: ?ScrollView),\n  _setScrollViewRef: function(ref: ?ScrollView) {\n    this._scrollViewRef = ref;\n  },\n\n  _innerViewRef: (null: ?View),\n  _setInnerViewRef: function(ref: ?View) {\n    this._innerViewRef = ref;\n  },\n\n  render: function() {\n    let ScrollViewClass;\n    let ScrollContentContainerViewClass;\n    if (Platform.OS === 'ios') {\n      ScrollViewClass = RCTScrollView;\n      ScrollContentContainerViewClass = RCTScrollContentView;\n    } else if (Platform.OS === 'android') {\n      if (this.props.horizontal) {\n        ScrollViewClass = AndroidHorizontalScrollView;\n      } else {\n        ScrollViewClass = AndroidScrollView;\n      }\n      ScrollContentContainerViewClass = View;\n    }\n\n    invariant(\n      ScrollViewClass !== undefined,\n      'ScrollViewClass must not be undefined'\n    );\n\n    invariant(\n      ScrollContentContainerViewClass !== undefined,\n      'ScrollContentContainerViewClass must not be undefined'\n    );\n\n    const contentContainerStyle = [\n      this.props.horizontal && styles.contentContainerHorizontal,\n      this.props.contentContainerStyle,\n    ];\n    let style, childLayoutProps;\n    if (__DEV__ && this.props.style) {\n      style = flattenStyle(this.props.style);\n      childLayoutProps = ['alignItems', 'justifyContent']\n        .filter((prop) => style && style[prop] !== undefined);\n      invariant(\n        childLayoutProps.length === 0,\n        'ScrollView child layout (' + JSON.stringify(childLayoutProps) +\n          ') must be applied through the contentContainerStyle prop.'\n      );\n    }\n\n    let contentSizeChangeProps = {};\n    if (this.props.onContentSizeChange) {\n      contentSizeChangeProps = {\n        onLayout: this._handleContentOnLayout,\n      };\n    }\n\n    const {stickyHeaderIndices} = this.props;\n    const hasStickyHeaders = stickyHeaderIndices && stickyHeaderIndices.length > 0;\n    const childArray = hasStickyHeaders && React.Children.toArray(this.props.children);\n    const children = hasStickyHeaders ?\n      childArray.map((child, index) => {\n        const indexOfIndex = child ? stickyHeaderIndices.indexOf(index) : -1;\n        if (indexOfIndex > -1) {\n          const key = child.key;\n          const nextIndex = stickyHeaderIndices[indexOfIndex + 1];\n          return (\n            <ScrollViewStickyHeader\n              key={key}\n              ref={(ref) => this._setStickyHeaderRef(key, ref)}\n              nextHeaderLayoutY={\n                this._headerLayoutYs.get(this._getKeyForIndex(nextIndex, childArray))\n              }\n              onLayout={(event) => this._onStickyHeaderLayout(index, event, key)}\n              scrollAnimatedValue={this._scrollAnimatedValue}>\n              {child}\n            </ScrollViewStickyHeader>\n          );\n        } else {\n          return child;\n        }\n      }) :\n      this.props.children;\n    const contentContainer =\n      <ScrollContentContainerViewClass\n        {...contentSizeChangeProps}\n        ref={this._setInnerViewRef}\n        style={contentContainerStyle}\n        removeClippedSubviews={\n          hasStickyHeaders && Platform.OS === 'android' ? false : this.props.removeClippedSubviews\n        }\n        collapsable={false}>\n        {children}\n      </ScrollContentContainerViewClass>;\n\n    const alwaysBounceHorizontal =\n      this.props.alwaysBounceHorizontal !== undefined ?\n        this.props.alwaysBounceHorizontal :\n        this.props.horizontal;\n\n    const alwaysBounceVertical =\n      this.props.alwaysBounceVertical !== undefined ?\n        this.props.alwaysBounceVertical :\n        !this.props.horizontal;\n\n    const baseStyle = this.props.horizontal ? styles.baseHorizontal : styles.baseVertical;\n    const props = {\n      ...this.props,\n      alwaysBounceHorizontal,\n      alwaysBounceVertical,\n      style: ([baseStyle, this.props.style]: ?Array<any>),\n      // Override the onContentSizeChange from props, since this event can\n      // bubble up from TextInputs\n      onContentSizeChange: null,\n      onMomentumScrollBegin: this.scrollResponderHandleMomentumScrollBegin,\n      onMomentumScrollEnd: this.scrollResponderHandleMomentumScrollEnd,\n      onResponderGrant: this.scrollResponderHandleResponderGrant,\n      onResponderReject: this.scrollResponderHandleResponderReject,\n      onResponderRelease: this.scrollResponderHandleResponderRelease,\n      onResponderTerminate: this.scrollResponderHandleTerminate,\n      onResponderTerminationRequest: this.scrollResponderHandleTerminationRequest,\n      onScroll: this._handleScroll,\n      onScrollBeginDrag: this.scrollResponderHandleScrollBeginDrag,\n      onScrollEndDrag: this.scrollResponderHandleScrollEndDrag,\n      onScrollShouldSetResponder: this.scrollResponderHandleScrollShouldSetResponder,\n      onStartShouldSetResponder: this.scrollResponderHandleStartShouldSetResponder,\n      onStartShouldSetResponderCapture: this.scrollResponderHandleStartShouldSetResponderCapture,\n      onTouchEnd: this.scrollResponderHandleTouchEnd,\n      onTouchMove: this.scrollResponderHandleTouchMove,\n      onTouchStart: this.scrollResponderHandleTouchStart,\n      scrollEventThrottle: hasStickyHeaders ? 1 : this.props.scrollEventThrottle,\n      sendMomentumEvents: (this.props.onMomentumScrollBegin || this.props.onMomentumScrollEnd) ?\n        true : false,\n    };\n\n    const { decelerationRate } = this.props;\n    if (decelerationRate) {\n      props.decelerationRate = processDecelerationRate(decelerationRate);\n    }\n\n    const refreshControl = this.props.refreshControl;\n\n    if (refreshControl) {\n      if (Platform.OS === 'ios') {\n        // On iOS the RefreshControl is a child of the ScrollView.\n        // tvOS lacks native support for RefreshControl, so don't include it in that case\n        return (\n          <ScrollViewClass {...props} ref={this._setScrollViewRef}>\n            {Platform.isTVOS ? null : refreshControl}\n            {contentContainer}\n          </ScrollViewClass>\n        );\n      } else if (Platform.OS === 'android') {\n        // On Android wrap the ScrollView with a AndroidSwipeRefreshLayout.\n        // Since the ScrollView is wrapped add the style props to the\n        // AndroidSwipeRefreshLayout and use flex: 1 for the ScrollView.\n        // Note: we should only apply props.style on the wrapper\n        // however, the ScrollView still needs the baseStyle to be scrollable\n\n        return React.cloneElement(\n          refreshControl,\n          {style: props.style},\n          <ScrollViewClass {...props} style={baseStyle} ref={this._setScrollViewRef}>\n            {contentContainer}\n          </ScrollViewClass>\n        );\n      }\n    }\n    return (\n      <ScrollViewClass {...props} ref={this._setScrollViewRef}>\n        {contentContainer}\n      </ScrollViewClass>\n    );\n  }\n});\n\nconst styles = StyleSheet.create({\n  baseVertical: {\n    flexGrow: 1,\n    flexShrink: 1,\n    flexDirection: 'column',\n    overflow: 'scroll',\n  },\n  baseHorizontal: {\n    flexGrow: 1,\n    flexShrink: 1,\n    flexDirection: 'row',\n    overflow: 'scroll',\n  },\n  contentContainerHorizontal: {\n    flexDirection: 'row',\n  },\n});\n\nlet nativeOnlyProps,\n  AndroidScrollView,\n  AndroidHorizontalScrollView,\n  RCTScrollView,\n  RCTScrollContentView;\nif (Platform.OS === 'android') {\n  nativeOnlyProps = {\n    nativeOnly: {\n      sendMomentumEvents: true,\n    }\n  };\n  AndroidScrollView = requireNativeComponent(\n    'RCTScrollView',\n    (ScrollView: ReactClass<any>),\n    nativeOnlyProps\n  );\n  AndroidHorizontalScrollView = requireNativeComponent(\n    'AndroidHorizontalScrollView',\n    (ScrollView: ReactClass<any>),\n    nativeOnlyProps\n  );\n} else if (Platform.OS === 'ios') {\n  nativeOnlyProps = {\n    nativeOnly: {\n      onMomentumScrollBegin: true,\n      onMomentumScrollEnd : true,\n      onScrollBeginDrag: true,\n      onScrollEndDrag: true,\n    }\n  };\n  RCTScrollView = requireNativeComponent(\n    'RCTScrollView',\n    (ScrollView: ReactClass<any>),\n    nativeOnlyProps,\n  );\n  RCTScrollContentView = requireNativeComponent('RCTScrollContentView', View);\n}\n\nmodule.exports = ScrollView;\n"]}]