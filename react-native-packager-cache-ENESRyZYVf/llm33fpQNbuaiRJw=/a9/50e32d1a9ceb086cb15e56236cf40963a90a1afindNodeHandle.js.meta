["448314c89d674812fc66eab12cc886caa9ea5b33","c56c41424aba240e3d5db5368065da0fad39604e",["react/lib/ReactCurrentOwner","ReactInstanceMap","fbjs/lib/invariant","fbjs/lib/warning"],[49,112,158,203],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native/Libraries/Renderer/src/renderers/native/findNodeHandle.js"],"names":["ReactCurrentOwner","require","ReactInstanceMap","invariant","warning","injectedFindNode","injectedFindRootNodeID","findNodeHandle","componentOrHandle","__DEV__","owner","current","_warnedAboutRefsInRender","getName","component","internalInstance","get","rootNodeID","render","Object","keys","injection","injectFindNode","findNode","injectFindRootNodeID","findRootNodeID","module","exports"],"mappings":";;AAYA;;AAEA,IAAIA,oBAAoBC,QAAQ,6BAAR,CAAxB;AACA,IAAIC,mBAAmBD,QAAQ,kBAAR,CAAvB;;AAEA,IAAIE,YAAYF,QAAQ,oBAAR,CAAhB;AACA,IAAIG,UAAUH,QAAQ,kBAAR,CAAd;;AAkCA,IAAII,yBAAJ;AACA,IAAIC,+BAAJ;;AAKA,SAASC,cAAT,CAAwBC,iBAAxB,EAAqD;AACnD,MAAIC,OAAJ,EAAa;AAEX,QAAIC,QAAUV,kBAAkBW,OAAhC;AACA,QAAID,UAAU,IAAd,EAAoB;AAClBN,cACEM,MAAME,wBADR,EAEE,yDACE,mEADF,GAEE,oEAFF,GAGE,iEAHF,GAIE,6BANJ,EAOEF,MAAMG,OAAN,MAAmB,aAPrB;;AAUAH,YAAME,wBAAN,GAAiC,IAAjC;AACD;AACF;AACD,MAAIJ,qBAAqB,IAAzB,EAA+B;AAC7B,WAAO,IAAP;AACD;AACD,MAAI,OAAOA,iBAAP,KAA6B,QAAjC,EAA2C;AAEzC,WAAOA,iBAAP;AACD;;AAED,MAAIM,YAAYN,iBAAhB;;AAIA,MAAIO,mBAAmBb,iBAAiBc,GAAjB,CAAqBF,SAArB,CAAvB;AACA,MAAIC,gBAAJ,EAAsB;AACpB,WAAOV,iBAAiBU,gBAAjB,CAAP;AACD,GAFD,MAEO;AACL,QAAIE,aAAaX,uBAAuBQ,SAAvB,CAAjB;AACA,QAAIG,UAAJ,EAAgB;AACd,aAAOA,UAAP;AACD,KAFD,MAEO;AACLd,gBAEG,OAAOW,SAAP,KAAqB,QAArB,KACE,iBAAiBA,SAAjB,IACC,gBAAgBA,SAFnB,CAAD,IAIGA,UAAUI,MAAV,IAAoB,IAApB,IAA4B,OAAOJ,UAAUI,MAAjB,KAA4B,UAN7D,EAOE,sDACE,sBARJ,EASE,OAAOJ,SATT,EAUEK,OAAOC,IAAP,CAAYN,SAAZ,CAVF;AAYAX,gBACE,KADF,EAEE,mEACE,YAHJ;AAKD;AACF;AACF;;AAGDI,eAAec,SAAf,GAA2B;AACzBC,gBADyB,0BACVC,QADU,EACA;AACvBlB,uBAAmBkB,QAAnB;AACD,GAHwB;AAIzBC,sBAJyB,gCAIJC,cAJI,EAIY;AACnCnB,6BAAyBmB,cAAzB;AACD;AANwB,CAA3B;;AASAC,OAAOC,OAAP,GAAiBpB,cAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule findNodeHandle\n * @flow\n */\n\n'use strict';\n\nvar ReactCurrentOwner = require('react/lib/ReactCurrentOwner');\nvar ReactInstanceMap = require('ReactInstanceMap');\n\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\nimport type {ReactInstance} from 'ReactInstanceType';\n\n/**\n * ReactNative vs ReactWeb\n * -----------------------\n * React treats some pieces of data opaquely. This means that the information\n * is first class (it can be passed around), but cannot be inspected. This\n * allows us to build infrastructure that reasons about resources, without\n * making assumptions about the nature of those resources, and this allows that\n * infra to be shared across multiple platforms, where the resources are very\n * different. General infra (such as `ReactMultiChild`) reasons opaquely about\n * the data, but platform specific code (such as `ReactNativeBaseComponent`) can\n * make assumptions about the data.\n *\n *\n * `rootNodeID`, uniquely identifies a position in the generated native view\n * tree. Many layers of composite components (created with `React.createClass`)\n * can all share the same `rootNodeID`.\n *\n * `nodeHandle`: A sufficiently unambiguous way to refer to a lower level\n * resource (dom node, native view etc). The `rootNodeID` is sufficient for web\n * `nodeHandle`s, because the position in a tree is always enough to uniquely\n * identify a DOM node (we never have nodes in some bank outside of the\n * document). The same would be true for `ReactNative`, but we must maintain a\n * mapping that we can send efficiently serializable\n * strings across native boundaries.\n *\n * Opaque name      TodaysWebReact   FutureWebWorkerReact   ReactNative\n * ----------------------------------------------------------------------------\n * nodeHandle       N/A              rootNodeID             tag\n */\n\nlet injectedFindNode;\nlet injectedFindRootNodeID;\n\n// TODO (bvaughn) Rename the findNodeHandle module to something more descriptive\n// eg findInternalHostInstance. This will reduce the likelihood of someone\n// accidentally deep-requiring this version.\nfunction findNodeHandle(componentOrHandle: any): any {\n  if (__DEV__) {\n    // TODO: fix this unsafe cast to work with Fiber.\n    var owner = ((ReactCurrentOwner.current: any): ReactInstance | null);\n    if (owner !== null) {\n      warning(\n        owner._warnedAboutRefsInRender,\n        '%s is accessing findNodeHandle inside its render(). ' +\n          'render() should be a pure function of props and state. It should ' +\n          'never access something that requires stale data from the previous ' +\n          'render, such as refs. Move this logic to componentDidMount and ' +\n          'componentDidUpdate instead.',\n        owner.getName() || 'A component',\n      );\n\n      owner._warnedAboutRefsInRender = true;\n    }\n  }\n  if (componentOrHandle == null) {\n    return null;\n  }\n  if (typeof componentOrHandle === 'number') {\n    // Already a node handle\n    return componentOrHandle;\n  }\n\n  var component = componentOrHandle;\n\n  // TODO (balpert): Wrap iOS native components in a composite wrapper, then\n  // ReactInstanceMap.get here will always succeed for mounted components\n  var internalInstance = ReactInstanceMap.get(component);\n  if (internalInstance) {\n    return injectedFindNode(internalInstance);\n  } else {\n    var rootNodeID = injectedFindRootNodeID(component);\n    if (rootNodeID) {\n      return rootNodeID;\n    } else {\n      invariant(\n        // Native\n        (typeof component === 'object' &&\n          ('_rootNodeID' in component || // TODO (bvaughn) Clean up once Stack is deprecated\n            '_nativeTag' in component)) ||\n          // Composite\n          (component.render != null && typeof component.render === 'function'),\n        'findNodeHandle(...): Argument is not a component ' +\n          '(type: %s, keys: %s)',\n        typeof component,\n        Object.keys(component),\n      );\n      invariant(\n        false,\n        'findNodeHandle(...): Unable to find node handle for unmounted ' +\n          'component.',\n      );\n    }\n  }\n}\n\n// Fiber and stack implementations differ; each must inject a strategy\nfindNodeHandle.injection = {\n  injectFindNode(findNode) {\n    injectedFindNode = findNode;\n  },\n  injectFindRootNodeID(findRootNodeID) {\n    injectedFindRootNodeID = findRootNodeID;\n  },\n};\n\nmodule.exports = findNodeHandle;\n"]}]