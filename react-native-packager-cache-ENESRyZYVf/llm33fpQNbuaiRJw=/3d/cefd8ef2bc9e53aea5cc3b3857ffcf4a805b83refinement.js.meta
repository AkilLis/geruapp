["22e18e9ef7be18fb1a019e146c7dd17638a2eab0","74bf08a0084d51267278794d8fd13e10f827f17d",["./assert","./isTypeName","./isFunction","./forbidNewOperator","./isIdentity","./create","./is","./getTypeName","./getFunctionName"],[21,59,101,150,199,237,267,302,350],{"version":3,"sources":["/var/www/geruapp/node_modules/tcomb/lib/refinement.js"],"names":["assert","require","isTypeName","isFunction","forbidNewOperator","isIdentity","create","is","getTypeName","getFunctionName","getDefaultName","type","predicate","refinement","name","process","env","NODE_ENV","stringify","displayName","identity","Refinement","value","path","x","join","meta","kind","update","instance","patch","module","exports"],"mappings":"AAAA,IAAIA,SAASC,QAAQ,UAAR,CAAb;AACA,IAAIC,aAAaD,QAAQ,cAAR,CAAjB;AACA,IAAIE,aAAaF,QAAQ,cAAR,CAAjB;AACA,IAAIG,oBAAoBH,QAAQ,qBAAR,CAAxB;AACA,IAAII,aAAaJ,QAAQ,cAAR,CAAjB;AACA,IAAIK,SAASL,QAAQ,UAAR,CAAb;AACA,IAAIM,KAAKN,QAAQ,MAAR,CAAT;AACA,IAAIO,cAAcP,QAAQ,eAAR,CAAlB;AACA,IAAIQ,kBAAkBR,QAAQ,mBAAR,CAAtB;;AAEA,SAASS,cAAT,CAAwBC,IAAxB,EAA8BC,SAA9B,EAAyC;AACvC,SAAO,MAAMJ,YAAYG,IAAZ,CAAN,GAA0B,KAA1B,GAAkCF,gBAAgBG,SAAhB,CAAlC,GAA+D,GAAtE;AACD;;AAED,SAASC,UAAT,CAAoBF,IAApB,EAA0BC,SAA1B,EAAqCE,IAArC,EAA2C;;AAEzC,MAAIC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCjB,WAAOG,WAAWQ,IAAX,CAAP,EAAyB,YAAY;AAAE,aAAO,2BAA2BX,OAAOkB,SAAP,CAAiBP,IAAjB,CAA3B,GAAoD,+EAA3D;AAA6I,KAApL;AACAX,WAAOG,WAAWS,SAAX,CAAP,EAA8B,YAAY;AAAE,aAAO,6GAAP;AAAuH,KAAnK;AACAZ,WAAOE,WAAWY,IAAX,CAAP,EAAyB,YAAY;AAAE,aAAO,2BAA2Bd,OAAOkB,SAAP,CAAiBJ,IAAjB,CAA3B,GAAoD,iFAA3D;AAA+I,KAAtL;AACD;;AAED,MAAIK,cAAcL,QAAQJ,eAAeC,IAAf,EAAqBC,SAArB,CAA1B;AACA,MAAIQ,WAAWf,WAAWM,IAAX,CAAf;;AAEA,WAASU,UAAT,CAAoBC,KAApB,EAA2BC,IAA3B,EAAiC;;AAE/B,QAAIR,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,UAAIG,QAAJ,EAAc;AACZhB,0BAAkB,IAAlB,EAAwBiB,UAAxB;AACD;AACDE,aAAOA,QAAQ,CAACJ,WAAD,CAAf;AACD;;AAED,QAAIK,IAAIlB,OAAOK,IAAP,EAAaW,KAAb,EAAoBC,IAApB,CAAR;;AAEA,QAAIR,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCjB,aAAOY,UAAUY,CAAV,CAAP,EAAqB,YAAY;AAAE,eAAO,mBAAmBxB,OAAOkB,SAAP,CAAiBI,KAAjB,CAAnB,GAA6C,eAA7C,GAA+DC,KAAKE,IAAL,CAAU,GAAV,CAAtE;AAAuF,OAA1H;AACD;;AAED,WAAOD,CAAP;AACD;;AAEDH,aAAWK,IAAX,GAAkB;AAChBC,UAAM,SADU;AAEhBhB,UAAMA,IAFU;AAGhBC,eAAWA,SAHK;AAIhBE,UAAMA,IAJU;AAKhBM,cAAUA;AALM,GAAlB;;AAQAC,aAAWF,WAAX,GAAyBA,WAAzB;;AAEAE,aAAWd,EAAX,GAAgB,UAAUiB,CAAV,EAAa;AAC3B,WAAOjB,GAAGiB,CAAH,EAAMb,IAAN,KAAeC,UAAUY,CAAV,CAAtB;AACD,GAFD;;AAIAH,aAAWO,MAAX,GAAoB,UAAUC,QAAV,EAAoBC,KAApB,EAA2B;AAC7C,WAAOT,WAAWrB,OAAO4B,MAAP,CAAcC,QAAd,EAAwBC,KAAxB,CAAX,CAAP;AACD,GAFD;;AAIA,SAAOT,UAAP;AACD;;AAEDR,WAAWH,cAAX,GAA4BA,cAA5B;AACAqB,OAAOC,OAAP,GAAiBnB,UAAjB","sourcesContent":["var assert = require('./assert');\nvar isTypeName = require('./isTypeName');\nvar isFunction = require('./isFunction');\nvar forbidNewOperator = require('./forbidNewOperator');\nvar isIdentity = require('./isIdentity');\nvar create = require('./create');\nvar is = require('./is');\nvar getTypeName = require('./getTypeName');\nvar getFunctionName = require('./getFunctionName');\n\nfunction getDefaultName(type, predicate) {\n  return '{' + getTypeName(type) + ' | ' + getFunctionName(predicate) + '}';\n}\n\nfunction refinement(type, predicate, name) {\n\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isFunction(type), function () { return 'Invalid argument type ' + assert.stringify(type) + ' supplied to refinement(type, predicate, [name]) combinator (expected a type)'; });\n    assert(isFunction(predicate), function () { return 'Invalid argument predicate supplied to refinement(type, predicate, [name]) combinator (expected a function)'; });\n    assert(isTypeName(name), function () { return 'Invalid argument name ' + assert.stringify(name) + ' supplied to refinement(type, predicate, [name]) combinator (expected a string)'; });\n  }\n\n  var displayName = name || getDefaultName(type, predicate);\n  var identity = isIdentity(type);\n\n  function Refinement(value, path) {\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (identity) {\n        forbidNewOperator(this, Refinement);\n      }\n      path = path || [displayName];\n    }\n\n    var x = create(type, value, path);\n\n    if (process.env.NODE_ENV !== 'production') {\n      assert(predicate(x), function () { return 'Invalid value ' + assert.stringify(value) + ' supplied to ' + path.join('/'); });\n    }\n\n    return x;\n  }\n\n  Refinement.meta = {\n    kind: 'subtype',\n    type: type,\n    predicate: predicate,\n    name: name,\n    identity: identity\n  };\n\n  Refinement.displayName = displayName;\n\n  Refinement.is = function (x) {\n    return is(x, type) && predicate(x);\n  };\n\n  Refinement.update = function (instance, patch) {\n    return Refinement(assert.update(instance, patch));\n  };\n\n  return Refinement;\n}\n\nrefinement.getDefaultName = getDefaultName;\nmodule.exports = refinement;\n"]}]