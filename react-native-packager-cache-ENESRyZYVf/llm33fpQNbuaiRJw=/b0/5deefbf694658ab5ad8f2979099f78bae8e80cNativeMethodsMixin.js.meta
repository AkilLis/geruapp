["265c82e3ddd9f6ad4f9036407d00d7122bd820d5","68cc9da7df0153a3e9b7a3015023fdb222b111c0",["ReactNative","ReactNativeFeatureFlags","ReactNativeAttributePayload","TextInputState","UIManager","fbjs/lib/invariant","findNodeHandle","NativeMethodsMixinUtils"],[42,96,166,227,270,309,361,404,1228],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native/Libraries/Renderer/src/renderers/native/NativeMethodsMixin.js"],"names":["ReactNative","require","ReactNativeFeatureFlags","ReactNativeAttributePayload","TextInputState","UIManager","invariant","findNodeHandle","mountSafeCallback","throwOnStylesProp","warnForStyleProps","NativeMethodsMixin","measure","callback","measureInWindow","measureLayout","relativeToNativeNode","onSuccess","onFail","setNativeProps","nativeProps","injectedSetNativeProps","focus","focusTextInput","blur","blurTextInput","setNativePropsFiber","componentOrHandle","maybeInstance","error","viewConfig","__DEV__","validAttributes","updatePayload","create","updateView","_nativeTag","uiViewClassName","setNativePropsStack","undefined","_instance","_renderedComponent","tag","getHostNode","_rootNodeID","useFiber","NativeMethodsMixin_DEV","componentWillMount","componentWillReceiveProps","props","newProps","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule NativeMethodsMixin\n * @flow\n */\n'use strict';\n\nvar ReactNative = require('ReactNative');\nvar ReactNativeFeatureFlags = require('ReactNativeFeatureFlags');\nvar ReactNativeAttributePayload = require('ReactNativeAttributePayload');\nvar TextInputState = require('TextInputState');\nvar UIManager = require('UIManager');\n\nvar invariant = require('fbjs/lib/invariant');\nvar findNodeHandle = require('findNodeHandle');\n\nvar {\n  mountSafeCallback,\n  throwOnStylesProp,\n  warnForStyleProps,\n} = require('NativeMethodsMixinUtils');\n\nimport type {\n  MeasureInWindowOnSuccessCallback,\n  MeasureLayoutOnSuccessCallback,\n  MeasureOnSuccessCallback,\n} from 'NativeMethodsMixinUtils';\nimport type {\n  ReactNativeBaseComponentViewConfig,\n} from 'ReactNativeViewConfigRegistry';\n\n/**\n * `NativeMethodsMixin` provides methods to access the underlying native\n * component directly. This can be useful in cases when you want to focus\n * a view or measure its on-screen dimensions, for example.\n *\n * The methods described here are available on most of the default components\n * provided by React Native. Note, however, that they are *not* available on\n * composite components that aren't directly backed by a native view. This will\n * generally include most components that you define in your own app. For more\n * information, see [Direct\n * Manipulation](docs/direct-manipulation.html).\n */\n// TODO (bvaughn) Figure out how to use the NativeMethodsInterface type to-\n// ensure that these mixins and ReactNativeFiberHostComponent stay in sync.\n// Unfortunately, using it causes Flow to complain WRT createClass mixins:\n// \"call of method `createClass`. Expected an exact object instead of ...\"\nvar NativeMethodsMixin = {\n  /**\n   * Determines the location on screen, width, and height of the given view and\n   * returns the values via an async callback. If successful, the callback will\n   * be called with the following arguments:\n   *\n   *  - x\n   *  - y\n   *  - width\n   *  - height\n   *  - pageX\n   *  - pageY\n   *\n   * Note that these measurements are not available until after the rendering\n   * has been completed in native. If you need the measurements as soon as\n   * possible, consider using the [`onLayout`\n   * prop](docs/view.html#onlayout) instead.\n   */\n  measure: function(callback: MeasureOnSuccessCallback) {\n    UIManager.measure(\n      ReactNative.findNodeHandle(this),\n      mountSafeCallback(this, callback),\n    );\n  },\n\n  /**\n   * Determines the location of the given view in the window and returns the\n   * values via an async callback. If the React root view is embedded in\n   * another native view, this will give you the absolute coordinates. If\n   * successful, the callback will be called with the following\n   * arguments:\n   *\n   *  - x\n   *  - y\n   *  - width\n   *  - height\n   *\n   * Note that these measurements are not available until after the rendering\n   * has been completed in native.\n   */\n  measureInWindow: function(callback: MeasureInWindowOnSuccessCallback) {\n    UIManager.measureInWindow(\n      ReactNative.findNodeHandle(this),\n      mountSafeCallback(this, callback),\n    );\n  },\n\n  /**\n   * Like [`measure()`](#measure), but measures the view relative an ancestor,\n   * specified as `relativeToNativeNode`. This means that the returned x, y\n   * are relative to the origin x, y of the ancestor view.\n   *\n   * As always, to obtain a native node handle for a component, you can use\n   * `ReactNative.findNodeHandle(component)`.\n   */\n  measureLayout: function(\n    relativeToNativeNode: number,\n    onSuccess: MeasureLayoutOnSuccessCallback,\n    onFail: () => void /* currently unused */,\n  ) {\n    UIManager.measureLayout(\n      ReactNative.findNodeHandle(this),\n      relativeToNativeNode,\n      mountSafeCallback(this, onFail),\n      mountSafeCallback(this, onSuccess),\n    );\n  },\n\n  /**\n   * This function sends props straight to native. They will not participate in\n   * future diff process - this means that if you do not include them in the\n   * next render, they will remain active (see [Direct\n   * Manipulation](docs/direct-manipulation.html)).\n   */\n  setNativeProps: function(nativeProps: Object) {\n    // Ensure ReactNative factory function has configured findNodeHandle.\n    // Requiring it won't execute the factory function until first referenced.\n    // It's possible for tests that use ReactTestRenderer to reach this point,\n    // Without having executed ReactNative.\n    // Defer the factory function until now to avoid a cycle with UIManager.\n    // TODO (bvaughn) Remove this once ReactNativeStack is dropped.\n    require('ReactNative');\n\n    injectedSetNativeProps(this, nativeProps);\n  },\n\n  /**\n   * Requests focus for the given input or view. The exact behavior triggered\n   * will depend on the platform and type of view.\n   */\n  focus: function() {\n    TextInputState.focusTextInput(ReactNative.findNodeHandle(this));\n  },\n\n  /**\n   * Removes focus from an input or view. This is the opposite of `focus()`.\n   */\n  blur: function() {\n    TextInputState.blurTextInput(ReactNative.findNodeHandle(this));\n  },\n};\n\n// TODO (bvaughn) Inline this once ReactNativeStack is dropped.\nfunction setNativePropsFiber(componentOrHandle: any, nativeProps: Object) {\n  // Class components don't have viewConfig -> validateAttributes.\n  // Nor does it make sense to set native props on a non-native component.\n  // Instead, find the nearest host component and set props on it.\n  // Use findNodeHandle() rather than ReactNative.findNodeHandle() because\n  // We want the instance/wrapper (not the native tag).\n  let maybeInstance;\n\n  // Fiber errors if findNodeHandle is called for an umounted component.\n  // Tests using ReactTestRenderer will trigger this case indirectly.\n  // Mimicking stack behavior, we should silently ignore this case.\n  // TODO Fix ReactTestRenderer so we can remove this try/catch.\n  try {\n    maybeInstance = findNodeHandle(componentOrHandle);\n  } catch (error) {}\n\n  // If there is no host component beneath this we should fail silently.\n  // This is not an error; it could mean a class component rendered null.\n  if (maybeInstance == null) {\n    return;\n  }\n\n  const viewConfig: ReactNativeBaseComponentViewConfig = maybeInstance.viewConfig;\n\n  if (__DEV__) {\n    warnForStyleProps(nativeProps, viewConfig.validAttributes);\n  }\n\n  var updatePayload = ReactNativeAttributePayload.create(\n    nativeProps,\n    viewConfig.validAttributes,\n  );\n\n  UIManager.updateView(\n    maybeInstance._nativeTag,\n    viewConfig.uiViewClassName,\n    updatePayload,\n  );\n}\n\n// TODO (bvaughn) Remove this once ReactNativeStack is dropped.\nfunction setNativePropsStack(componentOrHandle: any, nativeProps: Object) {\n  // Class components don't have viewConfig -> validateAttributes.\n  // Nor does it make sense to set native props on a non-native component.\n  // Instead, find the nearest host component and set props on it.\n  // Use findNodeHandle() rather than ReactNative.findNodeHandle() because\n  // We want the instance/wrapper (not the native tag).\n  let maybeInstance = findNodeHandle(componentOrHandle);\n\n  // If there is no host component beneath this we should fail silently.\n  // This is not an error; it could mean a class component rendered null.\n  if (maybeInstance == null) {\n    return;\n  }\n\n  let viewConfig: ReactNativeBaseComponentViewConfig;\n  if (maybeInstance.viewConfig !== undefined) {\n    // ReactNativeBaseComponent\n    viewConfig = maybeInstance.viewConfig;\n  } else if (\n    maybeInstance._instance !== undefined &&\n    maybeInstance._instance.viewConfig !== undefined\n  ) {\n    // ReactCompositeComponentWrapper\n    // Some instances (eg Text) define their own viewConfig\n    viewConfig = maybeInstance._instance.viewConfig;\n  } else {\n    // ReactCompositeComponentWrapper\n    // Other instances (eg TextInput) defer to their children's viewConfig\n    while (maybeInstance._renderedComponent !== undefined) {\n      maybeInstance = maybeInstance._renderedComponent;\n    }\n    viewConfig = maybeInstance.viewConfig;\n  }\n\n  const tag: number = typeof maybeInstance.getHostNode === 'function'\n    ? maybeInstance.getHostNode()\n    : maybeInstance._rootNodeID;\n\n  if (__DEV__) {\n    warnForStyleProps(nativeProps, viewConfig.validAttributes);\n  }\n\n  var updatePayload = ReactNativeAttributePayload.create(\n    nativeProps,\n    viewConfig.validAttributes,\n  );\n\n  UIManager.updateView(tag, viewConfig.uiViewClassName, updatePayload);\n}\n\n// Switching based on fiber vs stack to avoid a lot of inline checks at runtime.\n// HACK Normally this injection would be done by the renderer, but in this case\n// that would result in a cycle between ReactNative and NativeMethodsMixin.\n// We avoid requiring additional code for this injection so it's probably ok?\n// TODO (bvaughn) Remove this once ReactNativeStack is gone.\nlet injectedSetNativeProps: (\n  componentOrHandle: any,\n  nativeProps: Object,\n) => void;\nif (ReactNativeFeatureFlags.useFiber) {\n  injectedSetNativeProps = setNativePropsFiber;\n} else {\n  injectedSetNativeProps = setNativePropsStack;\n}\n\nif (__DEV__) {\n  // hide this from Flow since we can't define these properties outside of\n  // __DEV__ without actually implementing them (setting them to undefined\n  // isn't allowed by ReactClass)\n  var NativeMethodsMixin_DEV = (NativeMethodsMixin: any);\n  invariant(\n    !NativeMethodsMixin_DEV.componentWillMount &&\n      !NativeMethodsMixin_DEV.componentWillReceiveProps,\n    'Do not override existing functions.',\n  );\n  NativeMethodsMixin_DEV.componentWillMount = function() {\n    throwOnStylesProp(this, this.props);\n  };\n  NativeMethodsMixin_DEV.componentWillReceiveProps = function(newProps) {\n    throwOnStylesProp(this, newProps);\n  };\n}\n\nmodule.exports = NativeMethodsMixin;\n"]}]