["53a8e7a2127586e8a7345bbbc8f881d826aa5e23","7615ad1c1b905d0870b2bbdfa5ff1c670404961b",["ColorPropType","EdgeInsetsPropType","NativeMethodsMixin","Platform","React","ReactNativeViewAttributes","StyleSheetPropType","TextStylePropTypes","Touchable","processColor","createReactNativeComponentClass","mergeFast"],[44,95,151,197,230,280,343,399,446,488,551,611],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native/Libraries/Text/Text.js"],"names":["ColorPropType","require","EdgeInsetsPropType","NativeMethodsMixin","Platform","React","ReactNativeViewAttributes","StyleSheetPropType","TextStylePropTypes","Touchable","processColor","createReactNativeComponentClass","mergeFast","PropTypes","stylePropType","viewConfig","validAttributes","UIView","isHighlighted","numberOfLines","ellipsizeMode","allowFontScaling","selectable","selectionColor","adjustsFontSizeToFit","minimumFontScale","textBreakStrategy","uiViewClassName","Text","createClass","propTypes","oneOf","number","onLayout","func","onPress","onLongPress","pressRetentionOffset","bool","suppressHighlighting","style","testID","string","accessible","getDefaultProps","getInitialState","Mixin","touchableGetInitialState","mixins","getChildContext","isInAParentText","childContextTypes","contextTypes","_handlers","_hasPressHandler","props","touchableHandleActivePressIn","touchableHandleActivePressOut","touchableHandlePress","touchableHandleLongPress","touchableGetPressRectOffset","render","newProps","onStartShouldSetResponder","shouldSetFromProps","setResponder","key","bind","setState","e","PRESS_RECT_OFFSET","onResponderGrant","dispatchID","touchableHandleResponderGrant","apply","arguments","onResponderMove","touchableHandleResponderMove","onResponderRelease","touchableHandleResponderRelease","onResponderTerminate","touchableHandleResponderTerminate","onResponderTerminationRequest","allowTermination","touchableHandleResponderTerminationRequest","state","TOUCH_TARGET_DEBUG","color","context","top","left","right","bottom","RCTText","RCTVirtualText","OS","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Text\n * @flow\n */\n'use strict';\n\nconst ColorPropType = require('ColorPropType');\nconst EdgeInsetsPropType = require('EdgeInsetsPropType');\nconst NativeMethodsMixin = require('NativeMethodsMixin');\nconst Platform = require('Platform');\nconst React = require('React');\nconst ReactNativeViewAttributes = require('ReactNativeViewAttributes');\nconst StyleSheetPropType = require('StyleSheetPropType');\nconst TextStylePropTypes = require('TextStylePropTypes');\nconst Touchable = require('Touchable');\n\nconst processColor = require('processColor');\nconst createReactNativeComponentClass = require('createReactNativeComponentClass');\nconst mergeFast = require('mergeFast');\n\nconst { PropTypes } = React;\n\nconst stylePropType = StyleSheetPropType(TextStylePropTypes);\n\nconst viewConfig = {\n  validAttributes: mergeFast(ReactNativeViewAttributes.UIView, {\n    isHighlighted: true,\n    numberOfLines: true,\n    ellipsizeMode: true,\n    allowFontScaling: true,\n    selectable: true,\n    selectionColor: true,\n    adjustsFontSizeToFit: true,\n    minimumFontScale: true,\n    textBreakStrategy: true,\n  }),\n  uiViewClassName: 'RCTText',\n};\n\n/**\n * A React component for displaying text.\n *\n * `Text` supports nesting, styling, and touch handling.\n *\n * In the following example, the nested title and body text will inherit the `fontFamily` from\n *`styles.baseText`, but the title provides its own additional styles.  The title and body will\n * stack on top of each other on account of the literal newlines:\n *\n * ```ReactNativeWebPlayer\n * import React, { Component } from 'react';\n * import { AppRegistry, Text, StyleSheet } from 'react-native';\n *\n * class TextInANest extends Component {\n *   constructor(props) {\n *     super(props);\n *     this.state = {\n *       titleText: \"Bird's Nest\",\n *       bodyText: 'This is not really a bird nest.'\n *     };\n *   }\n *\n *   render() {\n *     return (\n *       <Text style={styles.baseText}>\n *         <Text style={styles.titleText} onPress={this.onPressTitle}>\n *           {this.state.titleText}{'\\n'}{'\\n'}\n *         </Text>\n *         <Text numberOfLines={5}>\n *           {this.state.bodyText}\n *         </Text>\n *       </Text>\n *     );\n *   }\n * }\n *\n * const styles = StyleSheet.create({\n *   baseText: {\n *     fontFamily: 'Cochin',\n *   },\n *   titleText: {\n *     fontSize: 20,\n *     fontWeight: 'bold',\n *   },\n * });\n *\n * // App registration and rendering\n * AppRegistry.registerComponent('TextInANest', () => TextInANest);\n * ```\n */\n\n// $FlowFixMe(>=0.41.0)\nconst Text = React.createClass({\n  propTypes: {\n    /**\n     * When `numberOfLines` is set, this prop defines how text will be truncated.\n     * `numberOfLines` must be set in conjunction with this prop.\n     *\n     * This can be one of the following values:\n     *\n     * - `head` - The line is displayed so that the end fits in the container and the missing text\n     * at the beginning of the line is indicated by an ellipsis glyph. e.g., \"...wxyz\"\n     * - `middle` - The line is displayed so that the beginning and end fit in the container and the\n     * missing text in the middle is indicated by an ellipsis glyph. \"ab...yz\"\n     * - `tail` - The line is displayed so that the beginning fits in the container and the\n     * missing text at the end of the line is indicated by an ellipsis glyph. e.g., \"abcd...\"\n     * - `clip` - Lines are not drawn past the edge of the text container.\n     *\n     * The default is `tail`.\n     *\n     * > `clip` is working only for iOS\n     */\n    ellipsizeMode: PropTypes.oneOf(['head', 'middle', 'tail', 'clip']),\n    /**\n     * Used to truncate the text with an ellipsis after computing the text\n     * layout, including line wrapping, such that the total number of lines\n     * does not exceed this number.\n     *\n     * This prop is commonly used with `ellipsizeMode`.\n     */\n    numberOfLines: PropTypes.number,\n    /**\n     * Set text break strategy on Android API Level 23+, possible values are `simple`, `highQuality`, `balanced`\n     * The default value is `highQuality`.\n     * @platform android\n     */\n    textBreakStrategy: PropTypes.oneOf(['simple', 'highQuality', 'balanced']),\n    /**\n     * Invoked on mount and layout changes with\n     *\n     *   `{nativeEvent: {layout: {x, y, width, height}}}`\n     */\n    onLayout: PropTypes.func,\n    /**\n     * This function is called on press.\n     *\n     * e.g., `onPress={() => console.log('1st')}`\n     */\n    onPress: PropTypes.func,\n    /**\n     * This function is called on long press.\n     *\n     * e.g., `onLongPress={this.increaseSize}>`\n     */\n    onLongPress: PropTypes.func,\n    /**\n     * When the scroll view is disabled, this defines how far your touch may\n     * move off of the button, before deactivating the button. Once deactivated,\n     * try moving it back and you'll see that the button is once again\n     * reactivated! Move it back and forth several times while the scroll view\n     * is disabled. Ensure you pass in a constant to reduce memory allocations.\n     */\n    pressRetentionOffset: EdgeInsetsPropType,\n    /**\n     * Lets the user select text, to use the native copy and paste functionality.\n     */\n    selectable: PropTypes.bool,\n    /**\n     * The highlight color of the text.\n     * @platform android\n     */\n    selectionColor: ColorPropType,\n    /**\n     * When `true`, no visual change is made when text is pressed down. By\n     * default, a gray oval highlights the text on press down.\n     * @platform ios\n     */\n    suppressHighlighting: PropTypes.bool,\n    style: stylePropType,\n    /**\n     * Used to locate this view in end-to-end tests.\n     */\n    testID: PropTypes.string,\n    /**\n     * Specifies whether fonts should scale to respect Text Size accessibility settings. The\n     * default is `true`.\n     */\n    allowFontScaling: PropTypes.bool,\n    /**\n     * When set to `true`, indicates that the view is an accessibility element. The default value\n     * for a `Text` element is `true`.\n     *\n     * See the\n     * [Accessibility guide](docs/accessibility.html#accessible-ios-android)\n     * for more information.\n     */\n    accessible: PropTypes.bool,\n    /**\n     * Specifies whether font should be scaled down automatically to fit given style constraints.\n     * @platform ios\n     */\n    adjustsFontSizeToFit: PropTypes.bool,\n\n    /**\n     * Specifies smallest possible scale a font can reach when adjustsFontSizeToFit is enabled. (values 0.01-1.0).\n     * @platform ios\n     */\n    minimumFontScale: PropTypes.number,\n  },\n  getDefaultProps(): Object {\n    return {\n      accessible: true,\n      allowFontScaling: true,\n      ellipsizeMode: 'tail',\n    };\n  },\n  getInitialState: function(): Object {\n    return mergeFast(Touchable.Mixin.touchableGetInitialState(), {\n      isHighlighted: false,\n    });\n  },\n  mixins: [NativeMethodsMixin],\n  viewConfig: viewConfig,\n  getChildContext(): Object {\n    return {isInAParentText: true};\n  },\n  childContextTypes: {\n    isInAParentText: PropTypes.bool\n  },\n  contextTypes: {\n    isInAParentText: PropTypes.bool\n  },\n  /**\n   * Only assigned if touch is needed.\n   */\n  _handlers: (null: ?Object),\n  _hasPressHandler(): boolean {\n    return !!this.props.onPress || !!this.props.onLongPress;\n  },\n  /**\n   * These are assigned lazily the first time the responder is set to make plain\n   * text nodes as cheap as possible.\n   */\n  touchableHandleActivePressIn: (null: ?Function),\n  touchableHandleActivePressOut: (null: ?Function),\n  touchableHandlePress: (null: ?Function),\n  touchableHandleLongPress: (null: ?Function),\n  touchableGetPressRectOffset: (null: ?Function),\n  render(): React.Element<any> {\n    let newProps = this.props;\n    if (this.props.onStartShouldSetResponder || this._hasPressHandler()) {\n      if (!this._handlers) {\n        this._handlers = {\n          onStartShouldSetResponder: (): bool => {\n            const shouldSetFromProps = this.props.onStartShouldSetResponder &&\n                // $FlowFixMe(>=0.41.0)\n                this.props.onStartShouldSetResponder();\n            const setResponder = shouldSetFromProps || this._hasPressHandler();\n            if (setResponder && !this.touchableHandleActivePressIn) {\n              // Attach and bind all the other handlers only the first time a touch\n              // actually happens.\n              for (const key in Touchable.Mixin) {\n                if (typeof Touchable.Mixin[key] === 'function') {\n                  (this: any)[key] = Touchable.Mixin[key].bind(this);\n                }\n              }\n              this.touchableHandleActivePressIn = () => {\n                if (this.props.suppressHighlighting || !this._hasPressHandler()) {\n                  return;\n                }\n                this.setState({\n                  isHighlighted: true,\n                });\n              };\n\n              this.touchableHandleActivePressOut = () => {\n                if (this.props.suppressHighlighting || !this._hasPressHandler()) {\n                  return;\n                }\n                this.setState({\n                  isHighlighted: false,\n                });\n              };\n\n              this.touchableHandlePress = (e: SyntheticEvent) => {\n                this.props.onPress && this.props.onPress(e);\n              };\n\n              this.touchableHandleLongPress = (e: SyntheticEvent) => {\n                this.props.onLongPress && this.props.onLongPress(e);\n              };\n\n              this.touchableGetPressRectOffset = function(): RectOffset {\n                return this.props.pressRetentionOffset || PRESS_RECT_OFFSET;\n              };\n            }\n            // $FlowFixMe(>=0.41.0)\n            return setResponder;\n          },\n          onResponderGrant: function(e: SyntheticEvent, dispatchID: string) {\n            // $FlowFixMe(>=0.41.0)\n            this.touchableHandleResponderGrant(e, dispatchID);\n            this.props.onResponderGrant &&\n              // $FlowFixMe(>=0.41.0)\n              this.props.onResponderGrant.apply(this, arguments);\n          }.bind(this),\n          onResponderMove: function(e: SyntheticEvent) {\n            // $FlowFixMe(>=0.41.0)\n            this.touchableHandleResponderMove(e);\n            this.props.onResponderMove &&\n              // $FlowFixMe(>=0.41.0)\n              this.props.onResponderMove.apply(this, arguments);\n          }.bind(this),\n          onResponderRelease: function(e: SyntheticEvent) {\n            // $FlowFixMe(>=0.41.0)\n            this.touchableHandleResponderRelease(e);\n            this.props.onResponderRelease &&\n              // $FlowFixMe(>=0.41.0)\n              this.props.onResponderRelease.apply(this, arguments);\n          }.bind(this),\n          onResponderTerminate: function(e: SyntheticEvent) {\n            // $FlowFixMe(>=0.41.0)\n            this.touchableHandleResponderTerminate(e);\n            this.props.onResponderTerminate &&\n              // $FlowFixMe(>=0.41.0)\n              this.props.onResponderTerminate.apply(this, arguments);\n          }.bind(this),\n          onResponderTerminationRequest: function(): bool {\n            // Allow touchable or props.onResponderTerminationRequest to deny\n            // the request\n            // $FlowFixMe(>=0.41.0)\n            var allowTermination = this.touchableHandleResponderTerminationRequest();\n            if (allowTermination && this.props.onResponderTerminationRequest) {\n              // $FlowFixMe(>=0.41.0)\n              allowTermination = this.props.onResponderTerminationRequest.apply(this, arguments);\n            }\n            return allowTermination;\n          }.bind(this),\n        };\n      }\n      newProps = {\n        ...this.props,\n        ...this._handlers,\n        isHighlighted: this.state.isHighlighted,\n      };\n    }\n    if (newProps.selectionColor != null) {\n      newProps = {\n        ...newProps,\n        selectionColor: processColor(newProps.selectionColor)\n      };\n    }\n    if (Touchable.TOUCH_TARGET_DEBUG && newProps.onPress) {\n      newProps = {\n        ...newProps,\n        style: [this.props.style, {color: 'magenta'}],\n      };\n    }\n    if (this.context.isInAParentText) {\n      return <RCTVirtualText {...newProps} />;\n    } else {\n      return <RCTText {...newProps} />;\n    }\n  },\n});\n\ntype RectOffset = {\n  top: number,\n  left: number,\n  right: number,\n  bottom: number,\n}\n\nvar PRESS_RECT_OFFSET = {top: 20, left: 20, right: 20, bottom: 30};\n\nvar RCTText = createReactNativeComponentClass(viewConfig);\nvar RCTVirtualText = RCTText;\n\nif (Platform.OS === 'android') {\n  RCTVirtualText = createReactNativeComponentClass({\n    validAttributes: mergeFast(ReactNativeViewAttributes.UIView, {\n      isHighlighted: true,\n    }),\n    uiViewClassName: 'RCTVirtualText',\n  });\n}\n\nmodule.exports = Text;\n"]}]