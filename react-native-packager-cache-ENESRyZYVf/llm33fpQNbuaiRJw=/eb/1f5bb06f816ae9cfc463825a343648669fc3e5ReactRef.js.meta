["b80f5a8a401ea962bce86cc385d120ccd5b51e0e","12d13638f3ba1f2dcc0e72d6927b71e5d9e66604",["ReactOwner","ReactCompositeComponentTypes","react/lib/ReactComponentTreeHook","fbjs/lib/warning"],[42,138,210,271],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native/Libraries/Renderer/src/renderers/shared/stack/reconciler/ReactRef.js"],"names":["ReactOwner","require","ReactRef","__DEV__","ReactCompositeComponentTypes","ReactComponentTreeHook","warning","warnedAboutStatelessRefs","attachRef","ref","component","owner","_compositeType","StatelessFunctional","info","ownerName","getName","warningKey","_debugID","element","_currentElement","_source","fileName","lineNumber","getStackAddendumByID","getPublicInstance","addComponentAsRefTo","detachRef","removeComponentAsRefFrom","attachRefs","instance","_owner","shouldUpdateRefs","prevElement","nextElement","prevRef","prevOwner","nextRef","nextOwner","detachRefs","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactRef\n * @flow\n */\n\n'use strict';\n\nvar ReactOwner = require('ReactOwner');\n\nimport type {ReactInstance} from 'ReactInstanceType';\nimport type {ReactElement} from 'ReactElementType';\n\nvar ReactRef = {};\n\nif (__DEV__) {\n  var ReactCompositeComponentTypes = require('ReactCompositeComponentTypes');\n  var ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');\n  var warning = require('fbjs/lib/warning');\n\n  var warnedAboutStatelessRefs = {};\n}\n\nfunction attachRef(ref, component, owner) {\n  if (__DEV__) {\n    if (\n      component._compositeType ===\n      ReactCompositeComponentTypes.StatelessFunctional\n    ) {\n      let info = '';\n      let ownerName;\n      if (owner) {\n        if (typeof owner.getName === 'function') {\n          ownerName = owner.getName();\n        }\n        if (ownerName) {\n          info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n        }\n      }\n\n      let warningKey = ownerName || component._debugID;\n      let element = component._currentElement;\n      if (element && element._source) {\n        warningKey = element._source.fileName +\n          ':' +\n          element._source.lineNumber;\n      }\n      if (!warnedAboutStatelessRefs[warningKey]) {\n        warnedAboutStatelessRefs[warningKey] = true;\n        warning(\n          false,\n          'Stateless function components cannot be given refs. ' +\n            'Attempts to access this ref will fail.%s%s',\n          info,\n          ReactComponentTreeHook.getStackAddendumByID(component._debugID),\n        );\n      }\n    }\n  }\n\n  if (typeof ref === 'function') {\n    ref(component.getPublicInstance());\n  } else {\n    // Legacy ref\n    ReactOwner.addComponentAsRefTo(component, ref, owner);\n  }\n}\n\nfunction detachRef(ref, component, owner) {\n  if (typeof ref === 'function') {\n    ref(null);\n  } else {\n    // Legacy ref\n    ReactOwner.removeComponentAsRefFrom(component, ref, owner);\n  }\n}\n\nReactRef.attachRefs = function(\n  instance: ReactInstance,\n  element: ReactElement | string | number | null | false,\n): void {\n  if (element === null || typeof element !== 'object') {\n    return;\n  }\n  var ref = element.ref;\n  if (ref != null) {\n    attachRef(ref, instance, element._owner);\n  }\n};\n\nReactRef.shouldUpdateRefs = function(\n  prevElement: ReactElement | string | number | null | false,\n  nextElement: ReactElement | string | number | null | false,\n): boolean {\n  // If either the owner or a `ref` has changed, make sure the newest owner\n  // has stored a reference to `this`, and the previous owner (if different)\n  // has forgotten the reference to `this`. We use the element instead\n  // of the public this.props because the post processing cannot determine\n  // a ref. The ref conceptually lives on the element.\n\n  // TODO: Should this even be possible? The owner cannot change because\n  // it's forbidden by shouldUpdateReactComponent. The ref can change\n  // if you swap the keys of but not the refs. Reconsider where this check\n  // is made. It probably belongs where the key checking and\n  // instantiateReactComponent is done.\n\n  var prevRef = null;\n  var prevOwner = null;\n  if (prevElement !== null && typeof prevElement === 'object') {\n    prevRef = prevElement.ref;\n    prevOwner = prevElement._owner;\n  }\n\n  var nextRef = null;\n  var nextOwner = null;\n  if (nextElement !== null && typeof nextElement === 'object') {\n    nextRef = nextElement.ref;\n    nextOwner = nextElement._owner;\n  }\n\n  return prevRef !== nextRef ||\n    // If owner changes but we have an unchanged function ref, don't update refs\n    (typeof nextRef === 'string' && nextOwner !== prevOwner);\n};\n\nReactRef.detachRefs = function(\n  instance: ReactInstance,\n  element: ReactElement | string | number | null | false,\n): void {\n  if (element === null || typeof element !== 'object') {\n    return;\n  }\n  var ref = element.ref;\n  if (ref != null) {\n    detachRef(ref, instance, element._owner);\n  }\n};\n\nmodule.exports = ReactRef;\n"]}]