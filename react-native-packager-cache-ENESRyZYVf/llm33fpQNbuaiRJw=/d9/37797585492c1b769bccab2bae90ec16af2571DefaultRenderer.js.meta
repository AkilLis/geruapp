["285b84d62f7fa96068ee280e177c6ed1102f7640","a92151b6a91d996b8debc26f7f064f4d9e721b9f",["react","react-native","react-native-experimental-navigation","./TabBar","./NavBar","./Actions","./Util"],[87,184,251,430,527,625,723],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native-router-flux/src/DefaultRenderer.js"],"names":["SCREEN_WIDTH","get","width","SCREEN_HEIGHT","height","NavigationAnimatedView","AnimatedView","NavigationCard","Card","NavigationCardStackPanResponder","CardStackPanResponder","NavigationCardStackStyleInterpolator","CardStackStyleInterpolator","styles","create","animatedView","flex","backgroundColor","sceneStyle","fadeInScene","props","position","scene","index","inputRange","opacity","interpolate","outputRange","scale","translateY","translateX","transform","leftToRight","topToBottom","DefaultRenderer","navigationState","dispatchFocusAction","nextProps","onNavigate","console","error","SceneComponent","component","tabs","optionals","selected","children","applyAnimation","style","duration","undefined","pos","navState","setValue","timing","toValue","start","renderHeader","renderCard","direction","forVertical","forHorizontal","focus","key","state","child","hasOwnProperty","call","hideNavBar","renderNavigationBar","HeaderComponent","navBar","navBarProps","onRight","onLeft","leftTitle","leftButtonImage","leftButton","rightTitle","rightButtonImage","rightButton","getTitle","opts","title","animation","getSceneStyle","getPanHandlers","panHandlers","animationStyle","isActive","computedProps","hideTabBar","animType","chooseInterpolator","renderScene","propTypes","object","isRequired","func","childContextTypes","any"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Pavel Aksonov\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport React, {\n  PureComponent,\n  PropTypes,\n} from 'react';\nimport {\n  Animated,\n  View,\n  StyleSheet,\n  Dimensions,\n} from 'react-native';\nimport NavigationExperimental from 'react-native-experimental-navigation';\n\nimport TabBar from './TabBar';\nimport NavBar from './NavBar';\nimport Actions from './Actions';\nimport { deepestExplicitValueForKey } from './Util';\n\nconst SCREEN_WIDTH = Dimensions.get('window').width;\nconst SCREEN_HEIGHT = Dimensions.get('window').height;\n\nconst {\n  AnimatedView: NavigationAnimatedView,\n  Card: NavigationCard,\n} = NavigationExperimental;\n\nconst {\n  CardStackPanResponder: NavigationCardStackPanResponder,\n  CardStackStyleInterpolator: NavigationCardStackStyleInterpolator,\n} = NavigationCard;\n\nconst styles = StyleSheet.create({\n  animatedView: {\n    flex: 1,\n    backgroundColor: 'transparent',\n  },\n  sceneStyle: {\n    flex: 1,\n  },\n});\n\nfunction fadeInScene(/* NavigationSceneRendererProps */ props) {\n  const {\n    position,\n    scene,\n  } = props;\n\n  const index = scene.index;\n  const inputRange = [index - 1, index, index + 1];\n\n  const opacity = position.interpolate({\n    inputRange,\n    outputRange: [0, 1, 0.3],\n  });\n\n  const scale = position.interpolate({\n    inputRange,\n    outputRange: [1, 1, 0.95],\n  });\n\n  const translateY = 0;\n  const translateX = 0;\n\n  return {\n    opacity,\n    transform: [\n      { scale },\n      { translateX },\n      { translateY },\n    ],\n  };\n}\n\nfunction leftToRight(/* NavigationSceneRendererProps */ props) {\n  const {\n    position,\n    scene,\n  } = props;\n\n  const index = scene.index;\n  const inputRange = [index - 1, index, index + 1];\n\n  const translateX = position.interpolate({\n    inputRange,\n    outputRange: [-SCREEN_WIDTH, 0, 0],\n  });\n\n  return {\n    transform: [\n      { translateX },\n    ],\n  };\n}\n\nfunction topToBottom(/* NavigationSceneRendererProps */ props) {\n  const {\n    position,\n    scene,\n  } = props;\n\n  const index = scene.index;\n  const inputRange = [index - 1, index, index + 1];\n\n  const translateY = position.interpolate({\n    inputRange,\n    outputRange: [-SCREEN_HEIGHT * 3, 0, 0],\n  });\n\n  return {\n    transform: [\n      { translateY },\n    ],\n  };\n}\n\nexport default class DefaultRenderer extends PureComponent {\n\n  static propTypes = {\n    navigationState: PropTypes.object.isRequired,\n    onNavigate: PropTypes.func.isRequired,\n  };\n\n  static childContextTypes = {\n    navigationState: PropTypes.any,\n  };\n\n  static getPanHandlers(direction, props) {\n    return direction === 'vertical' ?\n      NavigationCardStackPanResponder.forVertical(props) :\n      NavigationCardStackPanResponder.forHorizontal(props);\n  }\n\n  static dispatchFocusAction({ navigationState }) {\n    if (!navigationState || navigationState.component || navigationState.tabs) {\n      return;\n    }\n    const scene = navigationState.children[navigationState.index];\n    Actions.focus({ scene });\n  }\n\n  static chooseInterpolator(direction, props) {\n    switch (direction) {\n      case 'vertical':\n        return NavigationCardStackStyleInterpolator.forVertical(props);\n      case 'fade':\n        return fadeInScene(props);\n      case 'leftToRight':\n        return leftToRight(props);\n      case 'topToBottom':\n        return topToBottom(props);\n      default:\n        return NavigationCardStackStyleInterpolator.forHorizontal(props);\n    }\n  }\n\n  static renderScene(/* NavigationSceneRendererProps */ props) {\n    return (\n      <DefaultRenderer\n        key={props.scene.navigationState.key}\n        onNavigate={props.onNavigate}\n        navigationState={props.scene.navigationState}\n      />\n    );\n  }\n\n  static renderHeader(/* NavigationSceneRendererProps */ props) {\n    const state = props.navigationState;\n    const child = state.children[state.index];\n    let selected = state.children[state.index];\n    while ({}.hasOwnProperty.call(selected, 'children')) {\n      selected = selected.children[selected.index];\n    }\n    if (child !== selected) {\n      // console.log(`SKIPPING renderHeader because ${child.key} !== ${selected.key}`);\n      return null;\n    }\n    const hideNavBar = deepestExplicitValueForKey(state, 'hideNavBar');\n    if (hideNavBar) {\n      // console.log(`SKIPPING renderHeader because ${child.key} hideNavBar === true`);\n      return null;\n    }\n\n    // console.log(`renderHeader for ${child.key}`);\n\n    if (selected.component && selected.component.renderNavigationBar) {\n      return selected.component.renderNavigationBar({ ...props, ...selected });\n    }\n\n    const HeaderComponent = selected.navBar || child.navBar || state.navBar || NavBar;\n    const navBarProps = { ...state, ...child, ...selected };\n\n    if (selected.component && selected.component.onRight) {\n      navBarProps.onRight = selected.component.onRight;\n    }\n\n    if (selected.component && selected.component.onLeft) {\n      navBarProps.onLeft = selected.component.onLeft;\n    }\n\n    if ((navBarProps.leftTitle || navBarProps.leftButtonImage) && navBarProps.onLeft) {\n      delete navBarProps.leftButton;\n    }\n\n    if ((navBarProps.rightTitle || navBarProps.rightButtonImage) && navBarProps.onRight) {\n      delete navBarProps.rightButton;\n    }\n\n    if (navBarProps.rightButton) {\n      delete navBarProps.rightTitle;\n      delete navBarProps.onRight;\n      delete navBarProps.rightButtonImage;\n    }\n\n    if (navBarProps.leftButton) {\n      delete navBarProps.leftTitle;\n      delete navBarProps.onLeft;\n      delete navBarProps.leftButtonImage;\n    }\n    delete navBarProps.style;\n\n    const getTitle = selected.getTitle || (opts => opts.title);\n    return <HeaderComponent {...props} {...navBarProps} getTitle={getTitle} />;\n  }\n\n  static renderCard(/* NavigationSceneRendererProps */ props) {\n    const { key,\n      direction,\n      animation,\n      getSceneStyle,\n    } = props.scene.navigationState;\n\n    const state = props.navigationState;\n    const child = state.children[state.index];\n    let selected = state.children[state.index];\n    while ({}.hasOwnProperty.call(selected, 'children')) {\n      selected = selected.children[selected.index];\n    }\n\n    const { getPanHandlers } = selected;\n    let { panHandlers } = selected;\n    let { animationStyle } = props.scene.navigationState;\n\n    const isActive = child === selected;\n    const computedProps = { isActive };\n    if (isActive) {\n      computedProps.hideNavBar = deepestExplicitValueForKey(props.navigationState, 'hideNavBar');\n      computedProps.hideTabBar = deepestExplicitValueForKey(props.navigationState, 'hideTabBar');\n    }\n\n    const style = getSceneStyle ? getSceneStyle(props, computedProps) : null;\n\n    // direction overrides animation if both are supplied\n    const animType = (animation && !direction) ? animation : direction;\n\n    if (typeof (animationStyle) === 'undefined') {\n      animationStyle = DefaultRenderer.chooseInterpolator(animType, props);\n    }\n\n    if (typeof (animationStyle) === 'function') {\n      animationStyle = animationStyle(props);\n    }\n\n    if (typeof (panHandlers) === 'undefined') {\n      panHandlers = getPanHandlers ?\n        getPanHandlers(props, direction) :\n        DefaultRenderer.getPanHandlers(direction, props);\n    }\n    return (\n      <NavigationCard\n        {...props}\n        key={`card_${key}`}\n        style={[animationStyle, style]}\n        panHandlers={panHandlers}\n        renderScene={DefaultRenderer.renderScene}\n      />\n    );\n  }\n\n  getChildContext() {\n    return {\n      navigationState: this.props.navigationState,\n    };\n  }\n\n  componentDidMount() {\n    DefaultRenderer.dispatchFocusAction(this.props);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.navigationState !== this.props.navigationState) {\n      DefaultRenderer.dispatchFocusAction(nextProps);\n    }\n  }\n\n  render() {\n    const { navigationState, onNavigate } = this.props;\n\n    if (!navigationState || !onNavigate) {\n      console.error('navigationState and onNavigate property should be not null');\n      return null;\n    }\n\n    let SceneComponent = navigationState.component;\n\n    if (navigationState.tabs && !SceneComponent) {\n      SceneComponent = TabBar;\n    }\n\n    if (SceneComponent) {\n      return (\n        <View\n          style={[styles.sceneStyle, navigationState.sceneStyle]}\n        >\n          <SceneComponent {...this.props} {...navigationState} />\n        </View>\n      );\n    }\n\n    const optionals = {};\n    const selected = navigationState.children[navigationState.index];\n    const applyAnimation = selected.applyAnimation || navigationState.applyAnimation;\n    const style = selected.style || navigationState.style;\n\n    if (applyAnimation) {\n      optionals.applyAnimation = applyAnimation;\n    } else {\n      let duration = selected.duration;\n      if (duration === null || duration === undefined) duration = navigationState.duration;\n      if (duration !== null && duration !== undefined) {\n        optionals.applyAnimation = (pos, navState) => {\n          if (duration === 0) {\n            pos.setValue(navState.index);\n          } else {\n            Animated.timing(pos, { toValue: navState.index, duration }).start();\n          }\n        };\n      }\n    }\n\n    // console.log(`NavigationAnimatedView for ${navigationState.key}`);\n\n    return (\n      <NavigationAnimatedView\n        navigationState={navigationState}\n        style={[styles.animatedView, style]}\n        renderOverlay={DefaultRenderer.renderHeader}\n        renderScene={DefaultRenderer.renderCard}\n        {...optionals}\n      />\n    );\n  }\n}\n"]}]