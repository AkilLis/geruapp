["57fa48d81cd4e8c423282a8c719cc43d843663fe","8461b46e5d7bae28f91c1b7e76a38e5c5d4f6482",["./assert","./isTypeName","./isFunction","./getTypeName","./isIdentity","./isArray","./create","./is","./forbidNewOperator","./isUnion","./isNil"],[21,59,101,144,187,226,261,291,332,378,412],{"version":3,"sources":["/var/www/geruapp/node_modules/tcomb/lib/union.js"],"names":["assert","require","isTypeName","isFunction","getTypeName","isIdentity","isArray","create","is","forbidNewOperator","isUnion","isNil","getDefaultName","types","map","join","union","name","process","env","NODE_ENV","every","length","stringify","displayName","identity","Union","value","path","type","dispatch","meta","kind","x","some","i","len","t","update","instance","patch","module","exports"],"mappings":"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","sourcesContent":["var assert = require('./assert');\nvar isTypeName = require('./isTypeName');\nvar isFunction = require('./isFunction');\nvar getTypeName = require('./getTypeName');\nvar isIdentity = require('./isIdentity');\nvar isArray = require('./isArray');\nvar create = require('./create');\nvar is = require('./is');\nvar forbidNewOperator = require('./forbidNewOperator');\nvar isUnion = require('./isUnion');\nvar isNil = require('./isNil');\n\nfunction getDefaultName(types) {\n  return types.map(getTypeName).join(' | ');\n}\n\nfunction union(types, name) {\n\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isArray(types) && types.every(isFunction) && types.length >= 2, function () { return 'Invalid argument types ' + assert.stringify(types) + ' supplied to union(types, [name]) combinator (expected an array of at least 2 types)'; });\n    assert(isTypeName(name), function () { return 'Invalid argument name ' + assert.stringify(name) + ' supplied to union(types, [name]) combinator (expected a string)'; });\n  }\n\n  var displayName = name || getDefaultName(types);\n  var identity = types.every(isIdentity);\n\n  function Union(value, path) {\n\n    if (process.env.NODE_ENV === 'production') {\n      if (identity) {\n        return value;\n      }\n    }\n\n    var type = Union.dispatch(value);\n    if (!type && Union.is(value)) {\n      return value;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (identity) {\n        forbidNewOperator(this, Union);\n      }\n      path = path || [displayName];\n      assert(isFunction(type), function () { return 'Invalid value ' + assert.stringify(value) + ' supplied to ' + path.join('/') + ' (no constructor returned by dispatch)'; });\n      path[path.length - 1] += '(' + getTypeName(type) + ')';\n    }\n\n    return create(type, value, path);\n  }\n\n  Union.meta = {\n    kind: 'union',\n    types: types,\n    name: name,\n    identity: identity\n  };\n\n  Union.displayName = displayName;\n\n  Union.is = function (x) {\n    return types.some(function (type) {\n      return is(x, type);\n    });\n  };\n\n  Union.dispatch = function (x) { // default dispatch implementation\n    for (var i = 0, len = types.length; i < len; i++ ) {\n      var type = types[i];\n      if (isUnion(type)) { // handle union of unions\n        var t = type.dispatch(x);\n        if (!isNil(t)) {\n          return t;\n        }\n      }\n      else if (is(x, type)) {\n        return type;\n      }\n    }\n  };\n\n  Union.update = function (instance, patch) {\n    return Union(assert.update(instance, patch));\n  };\n\n  return Union;\n}\n\nunion.getDefaultName = getDefaultName;\nmodule.exports = union;\n\n"]}]