["35cbc0228759891d0a65f5772a6991025823aed0","99bd18915708e54453a305f93b29147b3f3e3af6",["react","prop-types","react-native"],[120,215,325],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native-progress/withAnimation.js"],"names":["withAnimation","WrappedComponent","indeterminateProgress","wrappedComponentName","displayName","name","props","progressValue","Math","min","max","progress","rotationValue","state","Value","rotation","addListener","event","value","indeterminate","spin","spring","toValue","start","removeAllListeners","endState","finished","setValue","animated","bounciness","timing","direction","duration","easing","linear","isInteraction","propTypes","bool","oneOf","number","isRequired","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Animated,\n  Easing,\n} from 'react-native';\n\nexport default function withAnimation(WrappedComponent, indeterminateProgress) {\n  const wrappedComponentName = WrappedComponent.displayName\n    || WrappedComponent.name\n    || 'Component';\n\n  return class AnimatedComponent extends Component {\n    static displayName = `withAnimation(${wrappedComponentName})`;\n    static propTypes = {\n      animated: PropTypes.bool,\n      direction: PropTypes.oneOf(['clockwise', 'counter-clockwise']),\n      indeterminate: PropTypes.bool,\n      progress: PropTypes.number.isRequired,\n    };\n\n    static defaultProps = {\n      animated: true,\n      indeterminate: false,\n      progress: 0,\n    };\n\n    constructor(props) {\n      super(props);\n\n      this.progressValue = Math.min(Math.max(props.progress, 0), 1);\n      this.rotationValue = 0;\n      this.state = {\n        progress: new Animated.Value(this.progressValue),\n        rotation: new Animated.Value(this.rotationValue),\n      };\n    }\n\n    componentDidMount() {\n      this.state.progress.addListener((event) => { this.progressValue = event.value; });\n      this.state.rotation.addListener((event) => { this.rotationValue = event.value; });\n      if (this.props.indeterminate) {\n        this.spin();\n        if (indeterminateProgress) {\n          Animated.spring(this.state.progress, {\n            toValue: indeterminateProgress,\n          }).start();\n        }\n      }\n    }\n\n    componentWillUnmount() {\n      this.state.progress.removeAllListeners();\n      this.state.rotation.removeAllListeners();\n    }\n\n    componentWillReceiveProps(props) {\n      if (props.indeterminate !== this.props.indeterminate) {\n        if (props.indeterminate) {\n          this.spin();\n        } else {\n          Animated.spring(this.state.rotation, {\n            toValue: (this.rotationValue > 0.5 ? 1 : 0),\n          }).start((endState) => {\n            if (endState.finished) {\n              this.state.rotation.setValue(0);\n            }\n          });\n        }\n      }\n      const progress = (props.indeterminate\n        ? indeterminateProgress || 0\n        : Math.min(Math.max(props.progress, 0), 1)\n      );\n      if (progress !== this.progressValue) {\n        if (props.animated) {\n          Animated.spring(this.state.progress, {\n            toValue: progress,\n            bounciness: 0,\n          }).start();\n        } else {\n          this.state.progress.setValue(progress);\n        }\n      }\n    }\n\n    spin() {\n      this.state.rotation.setValue(0);\n      Animated.timing(this.state.rotation, {\n        toValue: this.props.direction === 'counter-clockwise' ? -1 : 1,\n        duration: 1000,\n        easing: Easing.linear,\n        isInteraction: false,\n      }).start((endState) => {\n        if (endState.finished) {\n          this.spin();\n        }\n      });\n    }\n\n\n    render() {\n      return (\n        <WrappedComponent\n          {...this.props}\n          progress={this.props.animated ? this.state.progress : this.props.progress}\n          rotation={this.state.rotation}\n        />\n      );\n    }\n  };\n}\n"]}]