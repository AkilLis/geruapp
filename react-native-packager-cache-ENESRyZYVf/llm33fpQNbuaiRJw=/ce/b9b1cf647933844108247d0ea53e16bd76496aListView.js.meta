["cd55939f6026d90ca9daa96018f85b1824c69f9e","b0e98d81f2de0b2b9dca307b2deef0f2ce8e0d0c",["ListViewDataSource","Platform","React","ReactNative","NativeModules","ScrollView","ScrollResponder","StaticRenderer","react-timer-mixin","View","react-clone-referenced-element","isEmpty","merge","fbjs/lib/warning","fbjs/lib/invariant"],[49,95,128,164,215,276,321,370,414,455,502,559,591,6623,6895],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native/Libraries/Lists/ListView/ListView.js"],"names":["ListViewDataSource","require","Platform","React","ReactNative","RCTScrollViewManager","ScrollViewManager","ScrollView","ScrollResponder","StaticRenderer","TimerMixin","View","cloneReferencedElement","isEmpty","merge","PropTypes","DEFAULT_PAGE_SIZE","DEFAULT_INITIAL_ROWS","DEFAULT_SCROLL_RENDER_AHEAD","DEFAULT_END_REACHED_THRESHOLD","DEFAULT_SCROLL_CALLBACK_THROTTLE","ListView","createClass","_childFrames","_sentEndForContentLength","_scrollComponent","_prevRenderedRowsCount","_visibleRows","scrollProperties","mixins","Mixin","statics","DataSource","propTypes","dataSource","instanceOf","isRequired","renderSeparator","func","renderRow","initialListSize","number","onEndReached","onEndReachedThreshold","pageSize","renderFooter","renderHeader","renderSectionHeader","renderScrollComponent","scrollRenderAheadDistance","onChangeVisibleRows","removeClippedSubviews","bool","stickySectionHeadersEnabled","stickyHeaderIndices","arrayOf","enableEmptySections","getMetrics","contentLength","totalRows","props","getRowAndSectionCount","getRowCount","renderedRows","state","curRenderedRowsCount","visibleRows","Object","keys","length","getScrollResponder","getScrollableNode","findNodeHandle","scrollTo","scrollToEnd","options","console","warn","setNativeProps","getDefaultProps","OS","getInitialState","highlightedRow","getInnerViewNode","componentWillMount","visibleLength","offset","componentDidMount","requestAnimationFrame","_measureAndUpdateScrollProps","componentWillReceiveProps","nextProps","setState","Math","min","max","_renderMoreRowsIfNeeded","componentDidUpdate","_onRowHighlighted","sectionID","rowID","render","bodyComponents","allRowIDs","rowIdentities","rowCount","stickySectionHeaderIndices","header","footer","totalIndex","sectionIdx","sectionIdentities","rowIDs","undefined","warning","invariant","element","getSectionHeaderData","push","cloneElement","key","rowIdx","comboID","shouldUpdateRow","rowShouldUpdate","row","bind","getRowData","adjacentRowHighlighted","separator","scrollEventThrottle","onScroll","_onScroll","concat","onKeyboardWillShow","onKeyboardWillHide","onKeyboardDidShow","onKeyboardDidHide","ref","_setScrollComponentRef","onContentSizeChange","_onContentSizeChange","onLayout","_onLayout","scrollComponent","calculateChildFrames","_updateVisibleRows","width","height","horizontal","event","nativeEvent","layout","_maybeCallOnEndReached","_getDistanceFromEnd","distanceFromEnd","_pageInNewRows","rowsToRender","updatedFrames","forEach","newFrame","index","isVertical","visibleMin","visibleMax","visibilityChanged","changedRows","visibleSection","frame","rowVisible","y","x","e","layoutMeasurement","contentSize","contentOffset","updatedChildFrames","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ListView\n * @flow\n */\n'use strict';\n\nvar ListViewDataSource = require('ListViewDataSource');\nvar Platform = require('Platform');\nvar React = require('React');\nvar ReactNative = require('ReactNative');\nvar RCTScrollViewManager = require('NativeModules').ScrollViewManager;\nvar ScrollView = require('ScrollView');\nvar ScrollResponder = require('ScrollResponder');\nvar StaticRenderer = require('StaticRenderer');\nvar TimerMixin = require('react-timer-mixin');\nvar View = require('View');\n\nvar cloneReferencedElement = require('react-clone-referenced-element');\nvar isEmpty = require('isEmpty');\nvar merge = require('merge');\n\nvar PropTypes = React.PropTypes;\n\nvar DEFAULT_PAGE_SIZE = 1;\nvar DEFAULT_INITIAL_ROWS = 10;\nvar DEFAULT_SCROLL_RENDER_AHEAD = 1000;\nvar DEFAULT_END_REACHED_THRESHOLD = 1000;\nvar DEFAULT_SCROLL_CALLBACK_THROTTLE = 50;\n\n\n/**\n * ListView - A core component designed for efficient display of vertically\n * scrolling lists of changing data. The minimal API is to create a\n * [`ListView.DataSource`](docs/listviewdatasource.html), populate it with a simple\n * array of data blobs, and instantiate a `ListView` component with that data\n * source and a `renderRow` callback which takes a blob from the data array and\n * returns a renderable component.\n *\n * Minimal example:\n *\n * ```\n * class MyComponent extends Component {\n *   constructor() {\n *     super();\n *     const ds = new ListView.DataSource({rowHasChanged: (r1, r2) => r1 !== r2});\n *     this.state = {\n *       dataSource: ds.cloneWithRows(['row 1', 'row 2']),\n *     };\n *   }\n *\n *   render() {\n *     return (\n *       <ListView\n *         dataSource={this.state.dataSource}\n *         renderRow={(rowData) => <Text>{rowData}</Text>}\n *       />\n *     );\n *   }\n * }\n * ```\n *\n * ListView also supports more advanced features, including sections with sticky\n * section headers, header and footer support, callbacks on reaching the end of\n * the available data (`onEndReached`) and on the set of rows that are visible\n * in the device viewport change (`onChangeVisibleRows`), and several\n * performance optimizations.\n *\n * There are a few performance operations designed to make ListView scroll\n * smoothly while dynamically loading potentially very large (or conceptually\n * infinite) data sets:\n *\n *  * Only re-render changed rows - the rowHasChanged function provided to the\n *    data source tells the ListView if it needs to re-render a row because the\n *    source data has changed - see ListViewDataSource for more details.\n *\n *  * Rate-limited row rendering - By default, only one row is rendered per\n *    event-loop (customizable with the `pageSize` prop). This breaks up the\n *    work into smaller chunks to reduce the chance of dropping frames while\n *    rendering rows.\n */\n\nvar ListView = React.createClass({\n  _childFrames: ([]: Array<Object>),\n  _sentEndForContentLength: (null: ?number),\n  _scrollComponent: (null: any),\n  _prevRenderedRowsCount: 0,\n  _visibleRows: ({}: Object),\n  scrollProperties: ({}: Object),\n\n  mixins: [ScrollResponder.Mixin, TimerMixin],\n\n  statics: {\n    DataSource: ListViewDataSource,\n  },\n\n  /**\n   * You must provide a renderRow function. If you omit any of the other render\n   * functions, ListView will simply skip rendering them.\n   *\n   * - renderRow(rowData, sectionID, rowID, highlightRow);\n   * - renderSectionHeader(sectionData, sectionID);\n   */\n  propTypes: {\n    ...ScrollView.propTypes,\n    /**\n     * An instance of [ListView.DataSource](docs/listviewdatasource.html) to use\n     */\n    dataSource: PropTypes.instanceOf(ListViewDataSource).isRequired,\n    /**\n     * (sectionID, rowID, adjacentRowHighlighted) => renderable\n     *\n     * If provided, a renderable component to be rendered as the separator\n     * below each row but not the last row if there is a section header below.\n     * Take a sectionID and rowID of the row above and whether its adjacent row\n     * is highlighted.\n     */\n    renderSeparator: PropTypes.func,\n    /**\n     * (rowData, sectionID, rowID, highlightRow) => renderable\n     *\n     * Takes a data entry from the data source and its ids and should return\n     * a renderable component to be rendered as the row. By default the data\n     * is exactly what was put into the data source, but it's also possible to\n     * provide custom extractors. ListView can be notified when a row is\n     * being highlighted by calling `highlightRow(sectionID, rowID)`. This\n     * sets a boolean value of adjacentRowHighlighted in renderSeparator, allowing you\n     * to control the separators above and below the highlighted row. The highlighted\n     * state of a row can be reset by calling highlightRow(null).\n     */\n    renderRow: PropTypes.func.isRequired,\n    /**\n     * How many rows to render on initial component mount. Use this to make\n     * it so that the first screen worth of data appears at one time instead of\n     * over the course of multiple frames.\n     */\n    initialListSize: PropTypes.number.isRequired,\n    /**\n     * Called when all rows have been rendered and the list has been scrolled\n     * to within onEndReachedThreshold of the bottom. The native scroll\n     * event is provided.\n     */\n    onEndReached: PropTypes.func,\n    /**\n     * Threshold in pixels (virtual, not physical) for calling onEndReached.\n     */\n    onEndReachedThreshold: PropTypes.number.isRequired,\n    /**\n     * Number of rows to render per event loop. Note: if your 'rows' are actually\n     * cells, i.e. they don't span the full width of your view (as in the\n     * ListViewGridLayoutExample), you should set the pageSize to be a multiple\n     * of the number of cells per row, otherwise you're likely to see gaps at\n     * the edge of the ListView as new pages are loaded.\n     */\n    pageSize: PropTypes.number.isRequired,\n    /**\n     * () => renderable\n     *\n     * The header and footer are always rendered (if these props are provided)\n     * on every render pass. If they are expensive to re-render, wrap them\n     * in StaticContainer or other mechanism as appropriate. Footer is always\n     * at the bottom of the list, and header at the top, on every render pass.\n     */\n    renderFooter: PropTypes.func,\n    renderHeader: PropTypes.func,\n    /**\n     * (sectionData, sectionID) => renderable\n     *\n     * If provided, a header is rendered for this section.\n     */\n    renderSectionHeader: PropTypes.func,\n    /**\n     * (props) => renderable\n     *\n     * A function that returns the scrollable component in which the list rows\n     * are rendered. Defaults to returning a ScrollView with the given props.\n     */\n    renderScrollComponent: React.PropTypes.func.isRequired,\n    /**\n     * How early to start rendering rows before they come on screen, in\n     * pixels.\n     */\n    scrollRenderAheadDistance: React.PropTypes.number.isRequired,\n    /**\n     * (visibleRows, changedRows) => void\n     *\n     * Called when the set of visible rows changes. `visibleRows` maps\n     * { sectionID: { rowID: true }} for all the visible rows, and\n     * `changedRows` maps { sectionID: { rowID: true | false }} for the rows\n     * that have changed their visibility, with true indicating visible, and\n     * false indicating the view has moved out of view.\n     */\n    onChangeVisibleRows: React.PropTypes.func,\n    /**\n     * A performance optimization for improving scroll perf of\n     * large lists, used in conjunction with overflow: 'hidden' on the row\n     * containers. This is enabled by default.\n     */\n    removeClippedSubviews: React.PropTypes.bool,\n    /**\n     * Makes the sections headers sticky. The sticky behavior means that it\n     * will scroll with the content at the top of the section until it reaches\n     * the top of the screen, at which point it will stick to the top until it\n     * is pushed off the screen by the next section header. This property is\n     * not supported in conjunction with `horizontal={true}`. Only enabled by\n     * default on iOS because of typical platform standards.\n     */\n    stickySectionHeadersEnabled: React.PropTypes.bool,\n    /**\n     * An array of child indices determining which children get docked to the\n     * top of the screen when scrolling. For example, passing\n     * `stickyHeaderIndices={[0]}` will cause the first child to be fixed to the\n     * top of the scroll view. This property is not supported in conjunction\n     * with `horizontal={true}`.\n     */\n    stickyHeaderIndices: PropTypes.arrayOf(PropTypes.number).isRequired,\n    /**\n     * Flag indicating whether empty section headers should be rendered. In the future release\n     * empty section headers will be rendered by default, and the flag will be deprecated.\n     * If empty sections are not desired to be rendered their indices should be excluded from sectionID object.\n     */\n    enableEmptySections: PropTypes.bool,\n  },\n\n  /**\n   * Exports some data, e.g. for perf investigations or analytics.\n   */\n  getMetrics: function() {\n    return {\n      contentLength: this.scrollProperties.contentLength,\n      totalRows: (this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount()),\n      renderedRows: this.state.curRenderedRowsCount,\n      visibleRows: Object.keys(this._visibleRows).length,\n    };\n  },\n\n  /**\n   * Provides a handle to the underlying scroll responder.\n   * Note that `this._scrollComponent` might not be a `ScrollView`, so we\n   * need to check that it responds to `getScrollResponder` before calling it.\n   */\n  getScrollResponder: function() {\n    if (this._scrollComponent && this._scrollComponent.getScrollResponder) {\n      return this._scrollComponent.getScrollResponder();\n    }\n  },\n\n  getScrollableNode: function() {\n    if (this._scrollComponent && this._scrollComponent.getScrollableNode) {\n      return this._scrollComponent.getScrollableNode();\n    } else {\n      return ReactNative.findNodeHandle(this._scrollComponent);\n    }\n  },\n\n  /**\n   * Scrolls to a given x, y offset, either immediately or with a smooth animation.\n   *\n   * See `ScrollView#scrollTo`.\n   */\n  scrollTo: function(...args: Array<mixed>) {\n    if (this._scrollComponent && this._scrollComponent.scrollTo) {\n      this._scrollComponent.scrollTo(...args);\n    }\n  },\n\n  /**\n   * If this is a vertical ListView scrolls to the bottom.\n   * If this is a horizontal ListView scrolls to the right.\n   *\n   * Use `scrollToEnd({animated: true})` for smooth animated scrolling,\n   * `scrollToEnd({animated: false})` for immediate scrolling.\n   * If no options are passed, `animated` defaults to true.\n   *\n   * See `ScrollView#scrollToEnd`.\n   */\n  scrollToEnd: function(options?: ?{ animated?: ?boolean }) {\n    if (this._scrollComponent) {\n      if (this._scrollComponent.scrollToEnd) {\n        this._scrollComponent.scrollToEnd(options);\n      } else {\n        console.warn(\n          'The scroll component used by the ListView does not support ' +\n          'scrollToEnd. Check the renderScrollComponent prop of your ListView.'\n        );\n      }\n    }\n  },\n\n  setNativeProps: function(props: Object) {\n    if (this._scrollComponent) {\n      this._scrollComponent.setNativeProps(props);\n    }\n  },\n\n  /**\n   * React life cycle hooks.\n   */\n\n  getDefaultProps: function() {\n    return {\n      initialListSize: DEFAULT_INITIAL_ROWS,\n      pageSize: DEFAULT_PAGE_SIZE,\n      renderScrollComponent: props => <ScrollView {...props} />,\n      scrollRenderAheadDistance: DEFAULT_SCROLL_RENDER_AHEAD,\n      onEndReachedThreshold: DEFAULT_END_REACHED_THRESHOLD,\n      stickySectionHeadersEnabled: Platform.OS === 'ios',\n      stickyHeaderIndices: [],\n    };\n  },\n\n  getInitialState: function() {\n    return {\n      curRenderedRowsCount: this.props.initialListSize,\n      highlightedRow: ({} : Object),\n    };\n  },\n\n  getInnerViewNode: function() {\n    return this._scrollComponent.getInnerViewNode();\n  },\n\n  componentWillMount: function() {\n    // this data should never trigger a render pass, so don't put in state\n    this.scrollProperties = {\n      visibleLength: null,\n      contentLength: null,\n      offset: 0\n    };\n    this._childFrames = [];\n    this._visibleRows = {};\n    this._prevRenderedRowsCount = 0;\n    this._sentEndForContentLength = null;\n  },\n\n  componentDidMount: function() {\n    // do this in animation frame until componentDidMount actually runs after\n    // the component is laid out\n    this.requestAnimationFrame(() => {\n      this._measureAndUpdateScrollProps();\n    });\n  },\n\n  componentWillReceiveProps: function(nextProps: Object) {\n    if (this.props.dataSource !== nextProps.dataSource ||\n        this.props.initialListSize !== nextProps.initialListSize) {\n      this.setState((state, props) => {\n        this._prevRenderedRowsCount = 0;\n        return {\n          curRenderedRowsCount: Math.min(\n            Math.max(\n              state.curRenderedRowsCount,\n              props.initialListSize\n            ),\n            props.enableEmptySections ? props.dataSource.getRowAndSectionCount() : props.dataSource.getRowCount()\n          ),\n        };\n      }, () => this._renderMoreRowsIfNeeded());\n    }\n  },\n\n  componentDidUpdate: function() {\n    this.requestAnimationFrame(() => {\n      this._measureAndUpdateScrollProps();\n    });\n  },\n\n  _onRowHighlighted: function(sectionID: string, rowID: string) {\n    this.setState({highlightedRow: {sectionID, rowID}});\n  },\n\n  render: function() {\n    var bodyComponents = [];\n\n    var dataSource = this.props.dataSource;\n    var allRowIDs = dataSource.rowIdentities;\n    var rowCount = 0;\n    var stickySectionHeaderIndices = [];\n\n    const {renderSectionHeader} = this.props;\n\n    var header = this.props.renderHeader && this.props.renderHeader();\n    var footer = this.props.renderFooter && this.props.renderFooter();\n    var totalIndex = header ? 1 : 0;\n\n    for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {\n      var sectionID = dataSource.sectionIdentities[sectionIdx];\n      var rowIDs = allRowIDs[sectionIdx];\n      if (rowIDs.length === 0) {\n        if (this.props.enableEmptySections === undefined) {\n          var warning = require('fbjs/lib/warning');\n          warning(false, 'In next release empty section headers will be rendered.'\n                  + ' In this release you can use \\'enableEmptySections\\' flag to render empty section headers.');\n          continue;\n        } else {\n          var invariant = require('fbjs/lib/invariant');\n          invariant(\n            this.props.enableEmptySections,\n            'In next release \\'enableEmptySections\\' flag will be deprecated, empty section headers will always be rendered.'\n            + ' If empty section headers are not desirable their indices should be excluded from sectionIDs object.'\n            + ' In this release \\'enableEmptySections\\' may only have value \\'true\\' to allow empty section headers rendering.');\n        }\n      }\n\n      if (renderSectionHeader) {\n        const element = renderSectionHeader(\n          dataSource.getSectionHeaderData(sectionIdx),\n          sectionID\n        );\n        if (element) {\n          bodyComponents.push(React.cloneElement(element, {key: 's_' + sectionID}));\n          if (this.props.stickySectionHeadersEnabled) {\n            stickySectionHeaderIndices.push(totalIndex);\n          }\n          totalIndex++;\n        }\n      }\n\n      for (var rowIdx = 0; rowIdx < rowIDs.length; rowIdx++) {\n        var rowID = rowIDs[rowIdx];\n        var comboID = sectionID + '_' + rowID;\n        var shouldUpdateRow = rowCount >= this._prevRenderedRowsCount &&\n          dataSource.rowShouldUpdate(sectionIdx, rowIdx);\n        var row =\n          <StaticRenderer\n            key={'r_' + comboID}\n            shouldUpdate={!!shouldUpdateRow}\n            render={this.props.renderRow.bind(\n              null,\n              dataSource.getRowData(sectionIdx, rowIdx),\n              sectionID,\n              rowID,\n              this._onRowHighlighted\n            )}\n          />;\n        bodyComponents.push(row);\n        totalIndex++;\n\n        if (this.props.renderSeparator &&\n            (rowIdx !== rowIDs.length - 1 || sectionIdx === allRowIDs.length - 1)) {\n          var adjacentRowHighlighted =\n            this.state.highlightedRow.sectionID === sectionID && (\n              this.state.highlightedRow.rowID === rowID ||\n              this.state.highlightedRow.rowID === rowIDs[rowIdx + 1]\n            );\n          var separator = this.props.renderSeparator(\n            sectionID,\n            rowID,\n            adjacentRowHighlighted\n          );\n          if (separator) {\n            bodyComponents.push(\n              <View key={'s_' + comboID}>\n                {separator}\n              </View>\n            );\n            totalIndex++;\n          }\n        }\n        if (++rowCount === this.state.curRenderedRowsCount) {\n          break;\n        }\n      }\n      if (rowCount >= this.state.curRenderedRowsCount) {\n        break;\n      }\n    }\n\n    var {\n      renderScrollComponent,\n      ...props\n    } = this.props;\n    if (!props.scrollEventThrottle) {\n      props.scrollEventThrottle = DEFAULT_SCROLL_CALLBACK_THROTTLE;\n    }\n    if (props.removeClippedSubviews === undefined) {\n      props.removeClippedSubviews = true;\n    }\n    Object.assign(props, {\n      onScroll: this._onScroll,\n      stickyHeaderIndices: this.props.stickyHeaderIndices.concat(stickySectionHeaderIndices),\n\n      // Do not pass these events downstream to ScrollView since they will be\n      // registered in ListView's own ScrollResponder.Mixin\n      onKeyboardWillShow: undefined,\n      onKeyboardWillHide: undefined,\n      onKeyboardDidShow: undefined,\n      onKeyboardDidHide: undefined,\n    });\n\n    return cloneReferencedElement(renderScrollComponent(props), {\n      ref: this._setScrollComponentRef,\n      onContentSizeChange: this._onContentSizeChange,\n      onLayout: this._onLayout,\n    }, header, bodyComponents, footer);\n  },\n\n  /**\n   * Private methods\n   */\n\n  _measureAndUpdateScrollProps: function() {\n    var scrollComponent = this.getScrollResponder();\n    if (!scrollComponent || !scrollComponent.getInnerViewNode) {\n      return;\n    }\n\n    // RCTScrollViewManager.calculateChildFrames is not available on\n    // every platform\n    RCTScrollViewManager && RCTScrollViewManager.calculateChildFrames &&\n      RCTScrollViewManager.calculateChildFrames(\n        ReactNative.findNodeHandle(scrollComponent),\n        this._updateVisibleRows,\n      );\n  },\n\n  _setScrollComponentRef: function(scrollComponent: Object) {\n    this._scrollComponent = scrollComponent;\n  },\n\n  _onContentSizeChange: function(width: number, height: number) {\n    var contentLength = !this.props.horizontal ? height : width;\n    if (contentLength !== this.scrollProperties.contentLength) {\n      this.scrollProperties.contentLength = contentLength;\n      this._updateVisibleRows();\n      this._renderMoreRowsIfNeeded();\n    }\n    this.props.onContentSizeChange && this.props.onContentSizeChange(width, height);\n  },\n\n  _onLayout: function(event: Object) {\n    var {width, height} = event.nativeEvent.layout;\n    var visibleLength = !this.props.horizontal ? height : width;\n    if (visibleLength !== this.scrollProperties.visibleLength) {\n      this.scrollProperties.visibleLength = visibleLength;\n      this._updateVisibleRows();\n      this._renderMoreRowsIfNeeded();\n    }\n    this.props.onLayout && this.props.onLayout(event);\n  },\n\n  _maybeCallOnEndReached: function(event?: Object) {\n    if (this.props.onEndReached &&\n        this.scrollProperties.contentLength !== this._sentEndForContentLength &&\n        this._getDistanceFromEnd(this.scrollProperties) < this.props.onEndReachedThreshold &&\n        this.state.curRenderedRowsCount === (this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount())) {\n      this._sentEndForContentLength = this.scrollProperties.contentLength;\n      this.props.onEndReached(event);\n      return true;\n    }\n    return false;\n  },\n\n  _renderMoreRowsIfNeeded: function() {\n    if (this.scrollProperties.contentLength === null ||\n      this.scrollProperties.visibleLength === null ||\n      this.state.curRenderedRowsCount === (this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount())) {\n      this._maybeCallOnEndReached();\n      return;\n    }\n\n    var distanceFromEnd = this._getDistanceFromEnd(this.scrollProperties);\n    if (distanceFromEnd < this.props.scrollRenderAheadDistance) {\n      this._pageInNewRows();\n    }\n  },\n\n  _pageInNewRows: function() {\n    this.setState((state, props) => {\n      var rowsToRender = Math.min(\n        state.curRenderedRowsCount + props.pageSize,\n        (props.enableEmptySections ? props.dataSource.getRowAndSectionCount() : props.dataSource.getRowCount())\n      );\n      this._prevRenderedRowsCount = state.curRenderedRowsCount;\n      return {\n        curRenderedRowsCount: rowsToRender\n      };\n    }, () => {\n      this._measureAndUpdateScrollProps();\n      this._prevRenderedRowsCount = this.state.curRenderedRowsCount;\n    });\n  },\n\n  _getDistanceFromEnd: function(scrollProperties: Object) {\n    return scrollProperties.contentLength - scrollProperties.visibleLength - scrollProperties.offset;\n  },\n\n  _updateVisibleRows: function(updatedFrames?: Array<Object>) {\n    if (!this.props.onChangeVisibleRows) {\n      return; // No need to compute visible rows if there is no callback\n    }\n    if (updatedFrames) {\n      updatedFrames.forEach((newFrame) => {\n        this._childFrames[newFrame.index] = merge(newFrame);\n      });\n    }\n    var isVertical = !this.props.horizontal;\n    var dataSource = this.props.dataSource;\n    var visibleMin = this.scrollProperties.offset;\n    var visibleMax = visibleMin + this.scrollProperties.visibleLength;\n    var allRowIDs = dataSource.rowIdentities;\n\n    var header = this.props.renderHeader && this.props.renderHeader();\n    var totalIndex = header ? 1 : 0;\n    var visibilityChanged = false;\n    var changedRows = {};\n    for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {\n      var rowIDs = allRowIDs[sectionIdx];\n      if (rowIDs.length === 0) {\n        continue;\n      }\n      var sectionID = dataSource.sectionIdentities[sectionIdx];\n      if (this.props.renderSectionHeader) {\n        totalIndex++;\n      }\n      var visibleSection = this._visibleRows[sectionID];\n      if (!visibleSection) {\n        visibleSection = {};\n      }\n      for (var rowIdx = 0; rowIdx < rowIDs.length; rowIdx++) {\n        var rowID = rowIDs[rowIdx];\n        var frame = this._childFrames[totalIndex];\n        totalIndex++;\n        if (this.props.renderSeparator &&\n           (rowIdx !== rowIDs.length - 1 || sectionIdx === allRowIDs.length - 1)){\n          totalIndex++;\n        }\n        if (!frame) {\n          break;\n        }\n        var rowVisible = visibleSection[rowID];\n        var min = isVertical ? frame.y : frame.x;\n        var max = min + (isVertical ? frame.height : frame.width);\n        if ((!min && !max) || (min === max)) {\n          break;\n        }\n        if (min > visibleMax || max < visibleMin) {\n          if (rowVisible) {\n            visibilityChanged = true;\n            delete visibleSection[rowID];\n            if (!changedRows[sectionID]) {\n              changedRows[sectionID] = {};\n            }\n            changedRows[sectionID][rowID] = false;\n          }\n        } else if (!rowVisible) {\n          visibilityChanged = true;\n          visibleSection[rowID] = true;\n          if (!changedRows[sectionID]) {\n            changedRows[sectionID] = {};\n          }\n          changedRows[sectionID][rowID] = true;\n        }\n      }\n      if (!isEmpty(visibleSection)) {\n        this._visibleRows[sectionID] = visibleSection;\n      } else if (this._visibleRows[sectionID]) {\n        delete this._visibleRows[sectionID];\n      }\n    }\n    visibilityChanged && this.props.onChangeVisibleRows(this._visibleRows, changedRows);\n  },\n\n  _onScroll: function(e: Object) {\n    var isVertical = !this.props.horizontal;\n    this.scrollProperties.visibleLength = e.nativeEvent.layoutMeasurement[\n      isVertical ? 'height' : 'width'\n    ];\n    this.scrollProperties.contentLength = e.nativeEvent.contentSize[\n      isVertical ? 'height' : 'width'\n    ];\n    this.scrollProperties.offset = e.nativeEvent.contentOffset[\n      isVertical ? 'y' : 'x'\n    ];\n    this._updateVisibleRows(e.nativeEvent.updatedChildFrames);\n    if (!this._maybeCallOnEndReached(e)) {\n      this._renderMoreRowsIfNeeded();\n    }\n\n    if (this.props.onEndReached &&\n        this._getDistanceFromEnd(this.scrollProperties) > this.props.onEndReachedThreshold) {\n      // Scrolled out of the end zone, so it should be able to trigger again.\n      this._sentEndForContentLength = null;\n    }\n\n    this.props.onScroll && this.props.onScroll(e);\n  },\n});\n\nmodule.exports = ListView;\n"]}]