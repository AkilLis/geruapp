["083029e2c572a8cd214643fa86f11013147ea12b","a4826f604a7cd60314d4ce7cc9001ffcffc446c4",["MetroListView","Platform","React","VirtualizedSectionList"],[44,85,118,165],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native/Libraries/Lists/SectionList.js"],"names":["MetroListView","require","Platform","React","VirtualizedSectionList","defaultProps","stickySectionHeadersEnabled","OS","SectionList","List","props","legacyImplementation","PureComponent","module","exports"],"mappings":";AAWA;;AAEA,IAAMA,gBAAgBC,QAAQ,eAAR,CAAtB;AACA,IAAMC,WAAWD,QAAQ,UAAR,CAAjB;AACA,IAAME,QAAQF,QAAQ,OAAR,CAAd;AACA,IAAMG,yBAAyBH,QAAQ,wBAAR,CAA/B;;AA4GA,IAAMI,wCACDD,uBAAuBC,YADtB;AAEJC,+BAA6BJ,SAASK,EAAT,KAAgB;AAFzC,EAAN;;IA8DMC,W;;;;;;;;;;6BAMK;AACP,UAAMC,OAAO,KAAKC,KAAL,CAAWC,oBAAX,GAAkCX,aAAlC,GAAkDI,sBAA/D;AACA,aAAO,oBAAC,IAAD,EAAU,KAAKM,KAAf,CAAP;AACD;;;EAROP,MAAMS,a;;AADVJ,W,CAIGH,Y,GAA6BA,Y;;;AAQtCQ,OAAOC,OAAP,GAAiBN,WAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SectionList\n * @flow\n */\n'use strict';\n\nconst MetroListView = require('MetroListView');\nconst Platform = require('Platform');\nconst React = require('React');\nconst VirtualizedSectionList = require('VirtualizedSectionList');\n\nimport type {ViewToken} from 'ViewabilityHelper';\nimport type {Props as VirtualizedSectionListProps} from 'VirtualizedSectionList';\n\ntype Item = any;\n\ntype SectionBase<SectionItemT> = {\n  // Must be provided directly on each section.\n  data: Array<SectionItemT>,\n  key: string,\n\n  // Optional props will override list-wide props just for this section.\n  renderItem?: ?(info: {item: SectionItemT, index: number}) => ?React.Element<any>,\n  ItemSeparatorComponent?: ?ReactClass<any>,\n  keyExtractor?: (item: SectionItemT) => string,\n\n  // TODO: support more optional/override props\n  // onViewableItemsChanged?: ...\n};\n\ntype RequiredProps<SectionT: SectionBase<any>> = {\n  sections: Array<SectionT>,\n};\n\ntype OptionalProps<SectionT: SectionBase<any>> = {\n  /**\n   * Default renderer for every item in every section. Can be over-ridden on a per-section basis.\n   */\n  renderItem: (info: {item: Item, index: number}) => ?React.Element<any>,\n  /**\n   * Rendered in between adjacent Items within each section.\n   */\n  ItemSeparatorComponent?: ?ReactClass<any>,\n  /**\n   * Rendered at the very beginning of the list.\n   */\n  ListHeaderComponent?: ?ReactClass<any>,\n  /**\n   * Rendered at the very end of the list.\n   */\n  ListFooterComponent?: ?ReactClass<any>,\n  /**\n   * Rendered in between each section.\n   */\n  SectionSeparatorComponent?: ?ReactClass<any>,\n  /**\n   * A marker property for telling the list to re-render (since it implements `PureComponent`). If\n   * any of your `renderItem`, Header, Footer, etc. functions depend on anything outside of the\n   * `data` prop, stick it here and treat it immutably.\n   */\n  extraData?: any,\n  /**\n   * How many items to render in the initial batch. This should be enough to fill the screen but not\n   * much more. Note these items will never be unmounted as part of the windowed rendering in order\n   * to improve perceived performance of scroll-to-top actions.\n   */\n  initialNumToRender: number,\n  /**\n   * Used to extract a unique key for a given item at the specified index. Key is used for caching\n   * and as the react key to track item re-ordering. The default extractor checks item.key, then\n   * falls back to using the index, like react does.\n   */\n  keyExtractor: (item: Item, index: number) => string,\n  /**\n   * Called once when the scroll position gets within `onEndReachedThreshold` of the rendered\n   * content.\n   */\n  onEndReached?: ?(info: {distanceFromEnd: number}) => void,\n  /**\n   * How far from the end (in units of visible length of the list) the bottom edge of the\n   * list must be from the end of the content to trigger the `onEndReached` callback.\n   * Thus a value of 0.5 will trigger `onEndReached` when the end of the content is\n   * within half the visible length of the list.\n   */\n  onEndReachedThreshold?: ?number,\n  /**\n   * If provided, a standard RefreshControl will be added for \"Pull to Refresh\" functionality. Make\n   * sure to also set the `refreshing` prop correctly.\n   */\n  onRefresh?: ?() => void,\n  /**\n   * Called when the viewability of rows changes, as defined by the\n   * `viewabilityConfig` prop.\n   */\n  onViewableItemsChanged?: ?(info: {\n    viewableItems: Array<ViewToken>,\n    changed: Array<ViewToken>,\n  }) => void,\n  /**\n   * Set this true while waiting for new data from a refresh.\n   */\n  refreshing?: ?boolean,\n  /**\n   * Rendered at the top of each section. Sticky headers are not yet supported.\n   */\n  renderSectionHeader?: ?(info: {section: SectionT}) => ?React.Element<any>,\n  /**\n   * Makes section headers stick to the top of the screen until the next one pushes it off. Only\n   * enabled by default on iOS because that is the platform standard there.\n   */\n  stickySectionHeadersEnabled?: boolean,\n};\n\ntype Props<SectionT> = RequiredProps<SectionT>\n  & OptionalProps<SectionT>\n  & VirtualizedSectionListProps<SectionT>;\n\nconst defaultProps = {\n  ...VirtualizedSectionList.defaultProps,\n  stickySectionHeadersEnabled: Platform.OS === 'ios',\n};\n\ntype DefaultProps = typeof defaultProps;\n\n/**\n * A performant interface for rendering sectioned lists, supporting the most handy features:\n *\n *  - Fully cross-platform.\n *  - Configurable viewability callbacks.\n *  - List header support.\n *  - List footer support.\n *  - Item separator support.\n *  - Section header support.\n *  - Section separator support.\n *  - Heterogeneous data and item rendering support.\n *  - Pull to Refresh.\n *  - Scroll loading.\n *\n * If you don't need section support and want a simpler interface, use\n * [`<FlatList>`](/react-native/docs/flatlist.html).\n *\n * If you need _sticky_ section header support, use `ListView` for now.\n *\n * Simple Examples:\n *\n *     <SectionList\n *       renderItem={({item}) => <ListItem title={item.title}}\n *       renderSectionHeader={({section}) => <H1 title={section.key} />}\n *       sections={[ // homogenous rendering between sections\n *         {data: [...], key: ...},\n *         {data: [...], key: ...},\n *         {data: [...], key: ...},\n *       ]}\n *     />\n *\n *     <SectionList\n *       sections={[ // heterogeneous rendering between sections\n *         {data: [...], key: ..., renderItem: ...},\n *         {data: [...], key: ..., renderItem: ...},\n *         {data: [...], key: ..., renderItem: ...},\n *       ]}\n *     />\n *\n * This is a convenience wrapper around [`<VirtualizedList>`](/react-native/docs/virtualizedlist.html),\n * and thus inherits the following caveats:\n *\n * - Internal state is not preserved when content scrolls out of the render window. Make sure all\n *   your data is captured in the item data or external stores like Flux, Redux, or Relay.\n * - This is a `PureComponent` which means that it will not re-render if `props` remain shallow-\n *   equal. Make sure that everything your `renderItem` function depends on is passed as a prop that\n *   is not `===` after updates, otherwise your UI may not update on changes. This includes the\n *   `data` prop and parent component state.\n * - In order to constrain memory and enable smooth scrolling, content is rendered asynchronously\n *   offscreen. This means it's possible to scroll faster than the fill rate ands momentarily see\n *   blank content. This is a tradeoff that can be adjusted to suit the needs of each application,\n *   and we are working on improving it behind the scenes.\n * - By default, the list looks for a `key` prop on each item and uses that for the React key.\n *   Alternatively, you can provide a custom `keyExtractor` prop.\n */\nclass SectionList<SectionT: SectionBase<any>>\n  extends React.PureComponent<DefaultProps, Props<SectionT>, void>\n{\n  props: Props<SectionT>;\n  static defaultProps: DefaultProps = defaultProps;\n\n  render() {\n    const List = this.props.legacyImplementation ? MetroListView : VirtualizedSectionList;\n    return <List {...this.props} />;\n  }\n}\n\nmodule.exports = SectionList;\n"]}]