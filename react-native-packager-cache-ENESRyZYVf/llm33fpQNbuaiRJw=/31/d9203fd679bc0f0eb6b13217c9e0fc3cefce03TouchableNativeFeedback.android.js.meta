["94da1c0b9e420a9f0ce20063f107bf82343a878c","cf0d5fd5099126883db9c5a52274a7b72c4a53c3",["Platform","React","ReactNative","Touchable","TouchableWithoutFeedback","UIManager","ensurePositiveDelayProps","processColor"],[39,72,108,148,201,254,308,364],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native/Libraries/Components/Touchable/TouchableNativeFeedback.android.js"],"names":["Platform","require","React","ReactNative","Touchable","TouchableWithoutFeedback","UIManager","ensurePositiveDelayProps","processColor","PropTypes","rippleBackgroundPropType","shape","type","oneOf","color","number","borderless","bool","themeAttributeBackgroundPropType","attribute","string","isRequired","backgroundPropType","oneOfType","PRESS_RETENTION_OFFSET","top","left","right","bottom","TouchableNativeFeedback","createClass","propTypes","background","useForeground","statics","SelectableBackground","SelectableBackgroundBorderless","Ripple","canUseNativeForeground","OS","Version","mixins","Mixin","getDefaultProps","getInitialState","touchableGetInitialState","componentDidMount","props","componentWillReceiveProps","nextProps","touchableHandleActivePressIn","e","onPressIn","_dispatchPressedStateChange","_dispatchHotspotUpdate","pressInLocation","locationX","locationY","touchableHandleActivePressOut","onPressOut","touchableHandlePress","onPress","touchableHandleLongPress","onLongPress","touchableGetPressRectOffset","pressRetentionOffset","touchableGetHitSlop","hitSlop","touchableGetHighlightDelayMS","delayPressIn","touchableGetLongPressDelayMS","delayLongPress","touchableGetPressOutDelayMS","delayPressOut","_handleResponderMove","touchableHandleResponderMove","nativeEvent","destX","destY","dispatchViewManagerCommand","findNodeHandle","RCTView","Commands","hotspotUpdate","pressed","setPressed","render","child","Children","only","children","TOUCH_TARGET_DEBUG","displayName","Array","isArray","push","renderDebugView","console","warn","drawableProp","childProps","accessible","accessibilityLabel","accessibilityComponentType","accessibilityTraits","testID","onLayout","touchableHandleStartShouldSetResponder","touchableHandleResponderTerminationRequest","touchableHandleResponderGrant","touchableHandleResponderRelease","touchableHandleResponderTerminate","cloneElement","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule TouchableNativeFeedback\n */\n'use strict';\n\nvar Platform = require('Platform');\nvar React = require('React');\nvar ReactNative = require('ReactNative');\nvar Touchable = require('Touchable');\nvar TouchableWithoutFeedback = require('TouchableWithoutFeedback');\nvar UIManager = require('UIManager');\n\nvar ensurePositiveDelayProps = require('ensurePositiveDelayProps');\nvar processColor = require('processColor');\n\nvar PropTypes = React.PropTypes;\n\nvar rippleBackgroundPropType = PropTypes.shape({\n  type: React.PropTypes.oneOf(['RippleAndroid']),\n  color: PropTypes.number,\n  borderless: PropTypes.bool,\n});\n\nvar themeAttributeBackgroundPropType = PropTypes.shape({\n  type: React.PropTypes.oneOf(['ThemeAttrAndroid']),\n  attribute: PropTypes.string.isRequired,\n});\n\nvar backgroundPropType = PropTypes.oneOfType([\n  rippleBackgroundPropType,\n  themeAttributeBackgroundPropType,\n]);\n\ntype Event = Object;\n\nvar PRESS_RETENTION_OFFSET = {top: 20, left: 20, right: 20, bottom: 30};\n\n/**\n * A wrapper for making views respond properly to touches (Android only).\n * On Android this component uses native state drawable to display touch\n * feedback.\n *\n * At the moment it only supports having a single View instance as a child\n * node, as it's implemented by replacing that View with another instance of\n * RCTView node with some additional properties set.\n *\n * Background drawable of native feedback touchable can be customized with\n * `background` property.\n *\n * Example:\n *\n * ```\n * renderButton: function() {\n *   return (\n *     <TouchableNativeFeedback\n *         onPress={this._onPressButton}\n *         background={TouchableNativeFeedback.SelectableBackground()}>\n *       <View style={{width: 150, height: 100, backgroundColor: 'red'}}>\n *         <Text style={{margin: 30}}>Button</Text>\n *       </View>\n *     </TouchableNativeFeedback>\n *   );\n * },\n * ```\n */\n\nvar TouchableNativeFeedback = React.createClass({\n  propTypes: {\n    ...TouchableWithoutFeedback.propTypes,\n\n    /**\n     * Determines the type of background drawable that's going to be used to\n     * display feedback. It takes an object with `type` property and extra data\n     * depending on the `type`. It's recommended to use one of the static\n     * methods to generate that dictionary.\n     */\n    background: backgroundPropType,\n\n    /**\n     * Set to true to add the ripple effect to the foreground of the view, instead of the\n     * background. This is useful if one of your child views has a background of its own, or you're\n     * e.g. displaying images, and you don't want the ripple to be covered by them.\n     *\n     * Check TouchableNativeFeedback.canUseNativeForeground() first, as this is only available on\n     * Android 6.0 and above. If you try to use this on older versions you will get a warning and\n     * fallback to background.\n     */\n    useForeground: PropTypes.bool,\n  },\n\n  statics: {\n    /**\n     * Creates an object that represents android theme's default background for\n     * selectable elements (?android:attr/selectableItemBackground).\n     */\n    SelectableBackground: function() {\n      return {type: 'ThemeAttrAndroid', attribute: 'selectableItemBackground'};\n    },\n    /**\n     * Creates an object that represent android theme's default background for borderless\n     * selectable elements (?android:attr/selectableItemBackgroundBorderless).\n     * Available on android API level 21+.\n     */\n    SelectableBackgroundBorderless: function() {\n      return {type: 'ThemeAttrAndroid', attribute: 'selectableItemBackgroundBorderless'};\n    },\n    /**\n     * Creates an object that represents ripple drawable with specified color (as a\n     * string). If property `borderless` evaluates to true the ripple will\n     * render outside of the view bounds (see native actionbar buttons as an\n     * example of that behavior). This background type is available on Android\n     * API level 21+.\n     *\n     * @param color The ripple color\n     * @param borderless If the ripple can render outside it's bounds\n     */\n    Ripple: function(color: string, borderless: boolean) {\n      return {type: 'RippleAndroid', color: processColor(color), borderless: borderless};\n    },\n\n    canUseNativeForeground: function() {\n      return Platform.OS === 'android' && Platform.Version >= 23;\n    }\n  },\n\n  mixins: [Touchable.Mixin],\n\n  getDefaultProps: function() {\n    return {\n      background: this.SelectableBackground(),\n    };\n  },\n\n  getInitialState: function() {\n    return this.touchableGetInitialState();\n  },\n\n  componentDidMount: function() {\n    ensurePositiveDelayProps(this.props);\n  },\n\n  componentWillReceiveProps: function(nextProps) {\n    ensurePositiveDelayProps(nextProps);\n  },\n\n  /**\n   * `Touchable.Mixin` self callbacks. The mixin will invoke these if they are\n   * defined on your component.\n   */\n  touchableHandleActivePressIn: function(e: Event) {\n    this.props.onPressIn && this.props.onPressIn(e);\n    this._dispatchPressedStateChange(true);\n    this._dispatchHotspotUpdate(this.pressInLocation.locationX, this.pressInLocation.locationY);\n  },\n\n  touchableHandleActivePressOut: function(e: Event) {\n    this.props.onPressOut && this.props.onPressOut(e);\n    this._dispatchPressedStateChange(false);\n  },\n\n  touchableHandlePress: function(e: Event) {\n    this.props.onPress && this.props.onPress(e);\n  },\n\n  touchableHandleLongPress: function(e: Event) {\n    this.props.onLongPress && this.props.onLongPress(e);\n  },\n\n  touchableGetPressRectOffset: function() {\n    // Always make sure to predeclare a constant!\n    return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;\n  },\n\n  touchableGetHitSlop: function() {\n    return this.props.hitSlop;\n  },\n\n  touchableGetHighlightDelayMS: function() {\n    return this.props.delayPressIn;\n  },\n\n  touchableGetLongPressDelayMS: function() {\n    return this.props.delayLongPress;\n  },\n\n  touchableGetPressOutDelayMS: function() {\n    return this.props.delayPressOut;\n  },\n\n  _handleResponderMove: function(e) {\n    this.touchableHandleResponderMove(e);\n    this._dispatchHotspotUpdate(e.nativeEvent.locationX, e.nativeEvent.locationY);\n  },\n\n  _dispatchHotspotUpdate: function(destX, destY) {\n    UIManager.dispatchViewManagerCommand(\n      ReactNative.findNodeHandle(this),\n      UIManager.RCTView.Commands.hotspotUpdate,\n      [destX || 0, destY || 0]\n    );\n  },\n\n  _dispatchPressedStateChange: function(pressed) {\n    UIManager.dispatchViewManagerCommand(\n      ReactNative.findNodeHandle(this),\n      UIManager.RCTView.Commands.setPressed,\n      [pressed]\n    );\n  },\n\n  render: function() {\n    const child = React.Children.only(this.props.children);\n    let children = child.props.children;\n    if (Touchable.TOUCH_TARGET_DEBUG && child.type.displayName === 'View') {\n      if (!Array.isArray(children)) {\n        children = [children];\n      }\n      children.push(Touchable.renderDebugView({color: 'brown', hitSlop: this.props.hitSlop}));\n    }\n    if (this.props.useForeground && !TouchableNativeFeedback.canUseNativeForeground()) {\n      console.warn(\n        'Requested foreground ripple, but it is not available on this version of Android. ' +\n        'Consider calling TouchableNativeFeedback.canUseNativeForeground() and using a different ' +\n        'Touchable if the result is false.');\n    }\n    const drawableProp =\n      this.props.useForeground && TouchableNativeFeedback.canUseNativeForeground()\n        ? 'nativeForegroundAndroid'\n        : 'nativeBackgroundAndroid';\n    var childProps = {\n      ...child.props,\n      [drawableProp]: this.props.background,\n      accessible: this.props.accessible !== false,\n      accessibilityLabel: this.props.accessibilityLabel,\n      accessibilityComponentType: this.props.accessibilityComponentType,\n      accessibilityTraits: this.props.accessibilityTraits,\n      children,\n      testID: this.props.testID,\n      onLayout: this.props.onLayout,\n      hitSlop: this.props.hitSlop,\n      onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,\n      onResponderTerminationRequest: this.touchableHandleResponderTerminationRequest,\n      onResponderGrant: this.touchableHandleResponderGrant,\n      onResponderMove: this._handleResponderMove,\n      onResponderRelease: this.touchableHandleResponderRelease,\n      onResponderTerminate: this.touchableHandleResponderTerminate,\n    };\n\n    // We need to clone the actual element so that the ripple background drawable\n    // can be applied directly to the background of this element rather than to\n    // a wrapper view as done in other Touchable*\n    return React.cloneElement(\n      child,\n      childProps\n    );\n  }\n});\n\nmodule.exports = TouchableNativeFeedback;\n"]}]