["a2bfaf832c846e7a666b96da52aea484b81c9f5a","81471b04a5f9b18bc330cb73d28d1ad2485fb7ea",["ReactFiberErrorLogger","ReactFiberReconciler","ReactGenericBatching","ReactNativeAttributePayload","ReactNativeComponentTree","ReactNativeFiberErrorDialog","ReactNativeFiberHostComponent","ReactNativeInjection","ReactNativeTagHandles","ReactNativeViewConfigRegistry","ReactPortal","UIManager","deepFreezeAndThrowOnMutationInDev","fbjs/lib/emptyObject","findNodeHandle","fbjs/lib/invariant","takeSnapshot","ReactFiberDevToolsHook"],[53,114,174,241,312,383,459,528,589,659,719,759,822,886,941,984,1034,1075],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native/Libraries/Renderer/src/renderers/native/ReactNativeFiber.js"],"names":["ReactFiberErrorLogger","require","ReactFiberReconciler","ReactGenericBatching","ReactNativeAttributePayload","ReactNativeComponentTree","ReactNativeFiberErrorDialog","ReactNativeFiberHostComponent","ReactNativeInjection","ReactNativeTagHandles","ReactNativeViewConfigRegistry","ReactPortal","UIManager","deepFreezeAndThrowOnMutationInDev","emptyObject","findNodeHandle","invariant","takeSnapshot","injectInternals","precacheFiberNode","uncacheFiberNode","updateFiberProps","inject","recursivelyUncacheFiberNode","node","_nativeTag","_children","forEach","NativeRenderer","appendChild","parentInstance","child","setChildren","children","push","manageChildren","length","appendInitialChild","commitTextUpdate","textInstance","oldText","newText","updateView","text","commitMount","instance","type","newProps","internalInstanceHandle","commitUpdate","updatePayloadTODO","oldProps","viewConfig","updatePayload","diff","validAttributes","uiViewClassName","createInstance","props","rootContainerInstance","hostContext","tag","allocateTag","get","__DEV__","key","hasOwnProperty","create","createView","component","createTextInstance","finalizeInitialChildren","nativeTags","map","getRootHostContext","getChildHostContext","getPublicInstance","insertBefore","beforeChild","beforeChildIndex","indexOf","index","splice","prepareForCommit","prepareUpdate","removeChild","resetAfterCommit","resetTextContent","shouldDeprioritizeSubtree","scheduleAnimationCallback","global","requestAnimationFrame","scheduleDeferredCallback","requestIdleCallback","shouldSetTextContent","useSyncScheduling","injection","injectFiberBatchedUpdates","batchedUpdates","roots","Map","injectFindNode","fiber","findHostInstance","injectFindRootNodeID","injectDialog","showDialog","ReactNative","componentOrHandle","render","element","containerTag","callback","root","createContainer","set","updateContainer","getPublicRootInstance","unmountComponentAtNode","delete","unmountComponentAtNodeAndRemoveContainer","removeRootView","unstable_createPortal","createPortal","unstable_batchedUpdates","findFiberByHostInstance","getClosestInstanceFromNode","findHostInstanceByFiber","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactNativeFiber\n * @flow\n */\n\n'use strict';\n\nconst ReactFiberErrorLogger = require('ReactFiberErrorLogger');\nconst ReactFiberReconciler = require('ReactFiberReconciler');\nconst ReactGenericBatching = require('ReactGenericBatching');\nconst ReactNativeAttributePayload = require('ReactNativeAttributePayload');\nconst ReactNativeComponentTree = require('ReactNativeComponentTree');\nconst ReactNativeFiberErrorDialog = require('ReactNativeFiberErrorDialog');\nconst ReactNativeFiberHostComponent = require('ReactNativeFiberHostComponent');\nconst ReactNativeInjection = require('ReactNativeInjection');\nconst ReactNativeTagHandles = require('ReactNativeTagHandles');\nconst ReactNativeViewConfigRegistry = require('ReactNativeViewConfigRegistry');\nconst ReactPortal = require('ReactPortal');\nconst UIManager = require('UIManager');\n\nconst deepFreezeAndThrowOnMutationInDev = require('deepFreezeAndThrowOnMutationInDev');\nconst emptyObject = require('fbjs/lib/emptyObject');\nconst findNodeHandle = require('findNodeHandle');\nconst invariant = require('fbjs/lib/invariant');\nconst takeSnapshot = require('takeSnapshot');\n\nconst {injectInternals} = require('ReactFiberDevToolsHook');\n\nimport type {Element} from 'React';\nimport type {Fiber} from 'ReactFiber';\nimport type {\n  ReactNativeBaseComponentViewConfig,\n} from 'ReactNativeViewConfigRegistry';\nimport type {ReactNodeList} from 'ReactTypes';\nconst {\n  precacheFiberNode,\n  uncacheFiberNode,\n  updateFiberProps,\n} = ReactNativeComponentTree;\n\nReactNativeInjection.inject();\n\ntype Container = number;\nexport type Instance = {\n  _children: Array<Instance | number>,\n  _nativeTag: number,\n  viewConfig: ReactNativeBaseComponentViewConfig,\n};\ntype Props = Object;\ntype TextInstance = number;\n\nfunction recursivelyUncacheFiberNode(node: Instance | TextInstance) {\n  if (typeof node === 'number') {\n    // Leaf node (eg text)\n    uncacheFiberNode(node);\n  } else {\n    uncacheFiberNode((node: any)._nativeTag);\n\n    (node: any)._children.forEach(recursivelyUncacheFiberNode);\n  }\n}\n\nconst NativeRenderer = ReactFiberReconciler({\n  appendChild(\n    parentInstance: Instance | Container,\n    child: Instance | TextInstance,\n  ): void {\n    if (typeof parentInstance === 'number') {\n      // Root container\n      UIManager.setChildren(\n        parentInstance, // containerTag\n        [(child: any)._nativeTag], // reactTags\n      );\n    } else {\n      const children = parentInstance._children;\n\n      children.push(child);\n\n      UIManager.manageChildren(\n        parentInstance._nativeTag, // containerTag\n        [], // moveFromIndices\n        [], // moveToIndices\n        [(child: any)._nativeTag], // addChildReactTags\n        [children.length - 1], // addAtIndices\n        [], // removeAtIndices\n      );\n    }\n  },\n\n  appendInitialChild(\n    parentInstance: Instance,\n    child: Instance | TextInstance,\n  ): void {\n    parentInstance._children.push(child);\n  },\n\n  commitTextUpdate(\n    textInstance: TextInstance,\n    oldText: string,\n    newText: string,\n  ): void {\n    UIManager.updateView(\n      textInstance, // reactTag\n      'RCTRawText', // viewName\n      {text: newText}, // props\n    );\n  },\n\n  commitMount(\n    instance: Instance,\n    type: string,\n    newProps: Props,\n    internalInstanceHandle: Object,\n  ): void {\n    // Noop\n  },\n\n  commitUpdate(\n    instance: Instance,\n    updatePayloadTODO: Object,\n    type: string,\n    oldProps: Props,\n    newProps: Props,\n    internalInstanceHandle: Object,\n  ): void {\n    const viewConfig = instance.viewConfig;\n\n    updateFiberProps(instance._nativeTag, newProps);\n\n    const updatePayload = ReactNativeAttributePayload.diff(\n      oldProps,\n      newProps,\n      viewConfig.validAttributes,\n    );\n\n    UIManager.updateView(\n      (instance: any)._nativeTag, // reactTag\n      viewConfig.uiViewClassName, // viewName\n      updatePayload, // props\n    );\n  },\n\n  createInstance(\n    type: string,\n    props: Props,\n    rootContainerInstance: Container,\n    hostContext: {},\n    internalInstanceHandle: Object,\n  ): Instance {\n    const tag = ReactNativeTagHandles.allocateTag();\n    const viewConfig = ReactNativeViewConfigRegistry.get(type);\n\n    if (__DEV__) {\n      for (const key in viewConfig.validAttributes) {\n        if (props.hasOwnProperty(key)) {\n          deepFreezeAndThrowOnMutationInDev(props[key]);\n        }\n      }\n    }\n\n    const updatePayload = ReactNativeAttributePayload.create(\n      props,\n      viewConfig.validAttributes,\n    );\n\n    UIManager.createView(\n      tag, // reactTag\n      viewConfig.uiViewClassName, // viewName\n      rootContainerInstance, // rootTag\n      updatePayload, // props\n    );\n\n    const component = new ReactNativeFiberHostComponent(tag, viewConfig);\n\n    precacheFiberNode(internalInstanceHandle, tag);\n    updateFiberProps(tag, props);\n\n    // Not sure how to avoid this cast. Flow is okay if the component is defined\n    // in the same file but if it's external it can't see the types.\n    return ((component: any): Instance);\n  },\n\n  createTextInstance(\n    text: string,\n    rootContainerInstance: Container,\n    hostContext: {},\n    internalInstanceHandle: Object,\n  ): TextInstance {\n    const tag = ReactNativeTagHandles.allocateTag();\n\n    UIManager.createView(\n      tag, // reactTag\n      'RCTRawText', // viewName\n      rootContainerInstance, // rootTag\n      {text: text}, // props\n    );\n\n    precacheFiberNode(internalInstanceHandle, tag);\n\n    return tag;\n  },\n\n  finalizeInitialChildren(\n    parentInstance: Instance,\n    type: string,\n    props: Props,\n    rootContainerInstance: Container,\n  ): boolean {\n    // Don't send a no-op message over the bridge.\n    if (parentInstance._children.length === 0) {\n      return false;\n    }\n\n    // Map from child objects to native tags.\n    // Either way we need to pass a copy of the Array to prevent it from being frozen.\n    const nativeTags = parentInstance._children.map(\n      child =>\n        typeof child === 'number'\n          ? child // Leaf node (eg text)\n          : child._nativeTag,\n    );\n\n    UIManager.setChildren(\n      parentInstance._nativeTag, // containerTag\n      nativeTags, // reactTags\n    );\n\n    return false;\n  },\n\n  getRootHostContext(): {} {\n    return emptyObject;\n  },\n\n  getChildHostContext(): {} {\n    return emptyObject;\n  },\n\n  getPublicInstance(instance) {\n    return instance;\n  },\n\n  insertBefore(\n    parentInstance: Instance | Container,\n    child: Instance | TextInstance,\n    beforeChild: Instance | TextInstance,\n  ): void {\n    // TODO (bvaughn): Remove this check when...\n    // We create a wrapper object for the container in ReactNative render()\n    // Or we refactor to remove wrapper objects entirely.\n    // For more info on pros/cons see PR #8560 description.\n    invariant(\n      typeof parentInstance !== 'number',\n      'Container does not support insertBefore operation',\n    );\n\n    const children = (parentInstance: any)._children;\n\n    const beforeChildIndex = children.indexOf(beforeChild);\n    const index = children.indexOf(child);\n\n    // Move existing child or add new child?\n    if (index >= 0) {\n      children.splice(index, 1);\n      children.splice(beforeChildIndex, 0, child);\n\n      UIManager.manageChildren(\n        (parentInstance: any)._nativeTag, // containerID\n        [index], // moveFromIndices\n        [beforeChildIndex], // moveToIndices\n        [], // addChildReactTags\n        [], // addAtIndices\n        [], // removeAtIndices\n      );\n    } else {\n      children.splice(beforeChildIndex, 0, child);\n\n      UIManager.manageChildren(\n        (parentInstance: any)._nativeTag, // containerID\n        [], // moveFromIndices\n        [], // moveToIndices\n        [(child: any)._nativeTag], // addChildReactTags\n        [beforeChildIndex], // addAtIndices\n        [], // removeAtIndices\n      );\n    }\n  },\n\n  prepareForCommit(): void {\n    // Noop\n  },\n\n  prepareUpdate(\n    instance: Instance,\n    type: string,\n    oldProps: Props,\n    newProps: Props,\n    rootContainerInstance: Container,\n    hostContext: {},\n  ): null | Object {\n    return emptyObject;\n  },\n\n  removeChild(\n    parentInstance: Instance | Container,\n    child: Instance | TextInstance,\n  ): void {\n    recursivelyUncacheFiberNode(child);\n\n    if (typeof parentInstance === 'number') {\n      UIManager.manageChildren(\n        parentInstance, // containerID\n        [], // moveFromIndices\n        [], // moveToIndices\n        [], // addChildReactTags\n        [], // addAtIndices\n        [0], // removeAtIndices\n      );\n    } else {\n      const children = parentInstance._children;\n      const index = children.indexOf(child);\n\n      children.splice(index, 1);\n\n      UIManager.manageChildren(\n        parentInstance._nativeTag, // containerID\n        [], // moveFromIndices\n        [], // moveToIndices\n        [], // addChildReactTags\n        [], // addAtIndices\n        [index], // removeAtIndices\n      );\n    }\n  },\n\n  resetAfterCommit(): void {\n    // Noop\n  },\n\n  resetTextContent(instance: Instance): void {\n    // Noop\n  },\n\n  shouldDeprioritizeSubtree(type: string, props: Props): boolean {\n    return false;\n  },\n\n  scheduleAnimationCallback: global.requestAnimationFrame,\n\n  scheduleDeferredCallback: global.requestIdleCallback,\n\n  shouldSetTextContent(props: Props): boolean {\n    // TODO (bvaughn) Revisit this decision.\n    // Always returning false simplifies the createInstance() implementation,\n    // But creates an additional child Fiber for raw text children.\n    // No additional native views are created though.\n    // It's not clear to me which is better so I'm deferring for now.\n    // More context @ github.com/facebook/react/pull/8560#discussion_r92111303\n    return false;\n  },\n\n  useSyncScheduling: true,\n});\n\nReactGenericBatching.injection.injectFiberBatchedUpdates(\n  NativeRenderer.batchedUpdates,\n);\n\nconst roots = new Map();\n\nfindNodeHandle.injection.injectFindNode((fiber: Fiber) =>\n  NativeRenderer.findHostInstance(fiber));\nfindNodeHandle.injection.injectFindRootNodeID(instance => instance);\n\n\n// Intercept lifecycle errors and ensure they are shown with the correct stack\n// trace within the native redbox component.\nReactFiberErrorLogger.injection.injectDialog(\n  ReactNativeFiberErrorDialog.showDialog,\n);\n\nconst ReactNative = {\n  // External users of findNodeHandle() expect the host tag number return type.\n  // The injected findNodeHandle() strategy returns the instance wrapper though.\n  // See NativeMethodsMixin#setNativeProps for more info on why this is done.\n  findNodeHandle(componentOrHandle: any): ?number {\n    const instance: any = findNodeHandle(componentOrHandle);\n    if (instance == null || typeof instance === 'number') {\n      return instance;\n    }\n    return instance._nativeTag;\n  },\n\n  render(element: Element<any>, containerTag: any, callback: ?Function) {\n    let root = roots.get(containerTag);\n\n    if (!root) {\n      // TODO (bvaughn): If we decide to keep the wrapper component,\n      // We could create a wrapper for containerTag as well to reduce special casing.\n      root = NativeRenderer.createContainer(containerTag);\n      roots.set(containerTag, root);\n    }\n    NativeRenderer.updateContainer(element, root, null, callback);\n\n    return NativeRenderer.getPublicRootInstance(root);\n  },\n\n  takeSnapshot,\n\n  unmountComponentAtNode(containerTag: number) {\n    const root = roots.get(containerTag);\n    if (root) {\n      // TODO: Is it safe to reset this now or should I wait since this unmount could be deferred?\n      NativeRenderer.updateContainer(null, root, null, () => {\n        roots.delete(containerTag);\n      });\n    }\n  },\n\n  unmountComponentAtNodeAndRemoveContainer(containerTag: number) {\n    ReactNative.unmountComponentAtNode(containerTag);\n\n    // Call back into native to remove all of the subviews from this container\n    UIManager.removeRootView(containerTag);\n  },\n\n  unstable_createPortal(\n    children: ReactNodeList,\n    containerTag: number,\n    key: ?string = null,\n  ) {\n    return ReactPortal.createPortal(children, containerTag, null, key);\n  },\n\n  unstable_batchedUpdates: ReactGenericBatching.batchedUpdates,\n};\n\nif (typeof injectInternals === 'function') {\n  injectInternals({\n    findFiberByHostInstance: ReactNativeComponentTree.getClosestInstanceFromNode,\n    findHostInstanceByFiber: NativeRenderer.findHostInstance,\n  });\n}\n\nmodule.exports = ReactNative;\n"]}]