["d419e10359c20744ef2e397c4ca03d124af9dcc8","2cd60fd452354295ac034dfcef68877957727eb3",["react-native","./NavigationAbstractPanResponder","clamp"],[39,110,168],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native-experimental-navigation/NavigationCardStackPanResponder.js"],"names":["Animated","require","NavigationAbstractPanResponder","clamp","ANIMATION_DURATION","POSITION_THRESHOLD","RESPOND_THRESHOLD","RESPOND_POSITION_MAX_HORIZONTAL","RESPOND_POSITION_MAX_VERTICAL","DISTANCE_THRESHOLD","Directions","Actions","BACK","type","NavigationCardStackPanResponder","direction","props","_isResponding","_isVertical","VERTICAL","_props","_startValue","event","gesture","navigationState","index","scene","layout","isVertical","currentDragDistance","currentDragPosition","maxDragDistance","height","__getValue","width","positionMax","Math","abs","position","stopAnimation","value","axis","distance","setValue","_reset","onNavigate","timing","toValue","duration","start","createPanHandlers","responder","panHandlers","forHorizontal","HORIZONTAL","forVertical","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule NavigationCardStackPanResponder\n * @flow\n * @typechecks\n */\n'use strict';\n\nconst Animated = require('react-native').Animated;\nconst NavigationAbstractPanResponder = require('./NavigationAbstractPanResponder');\n\nconst clamp = require('clamp');\n\nimport type {\n  NavigationPanPanHandlers,\n  NavigationSceneRendererProps,\n} from 'NavigationTypeDefinition';\n\n/**\n * The duration of the card animation in milliseconds.\n */\nconst ANIMATION_DURATION = 250;\n\n/**\n * The threshold to invoke the `onNavigate` action.\n * For instance, `1 / 3` means that moving greater than 1 / 3 of the width of\n * the view will navigate.\n */\nconst POSITION_THRESHOLD = 1 / 3;\n\n/**\n * The threshold (in pixels) to start the gesture action.\n */\nconst RESPOND_THRESHOLD = 15;\n\n/**\n * The distance from the edge of the navigator which gesture response can start for.\n * For horizontal scroll views, a distance of 30 from the left of the screen is the\n * standard maximum position to start touch responsiveness.\n */\nconst RESPOND_POSITION_MAX_HORIZONTAL = 30;\nconst RESPOND_POSITION_MAX_VERTICAL = null;\n\n/**\n * The threshold (in pixels) to finish the gesture action.\n */\nconst DISTANCE_THRESHOLD = 100;\n\n/**\n * Primitive gesture directions.\n */\nconst Directions = {\n  'HORIZONTAL': 'horizontal',\n  'VERTICAL': 'vertical',\n};\n\nexport type NavigationGestureDirection =  'horizontal' | 'vertical';\n\n/**\n * Primitive gesture actions.\n */\nconst Actions = {\n  // The gesture to navigate backward.\n  // This is done by swiping from the left to the right or from the top to the\n  // bottom.\n  BACK: {type: 'back'},\n};\n\n/**\n * Pan responder that handles gesture for a card in the cards stack.\n *\n *     +------------+\n *   +-+            |\n * +-+ |            |\n * | | |            |\n * | | |  Focused   |\n * | | |   Card     |\n * | | |            |\n * +-+ |            |\n *   +-+            |\n *     +------------+\n */\nclass NavigationCardStackPanResponder extends NavigationAbstractPanResponder {\n\n  _isResponding: boolean;\n  _isVertical: boolean;\n  _props: NavigationSceneRendererProps;\n  _startValue: number;\n\n  constructor(\n    direction: NavigationGestureDirection,\n    props: NavigationSceneRendererProps,\n  ) {\n    super();\n    this._isResponding = false;\n    this._isVertical = direction === Directions.VERTICAL;\n    this._props = props;\n    this._startValue = 0;\n  }\n\n  onMoveShouldSetPanResponder(event: any, gesture: any): boolean {\n    const props = this._props;\n\n    if (props.navigationState.index !== props.scene.index) {\n      return false;\n    }\n\n    const layout = props.layout;\n    const isVertical = this._isVertical;\n    const index = props.navigationState.index;\n    const currentDragDistance = gesture[isVertical ? 'dy' : 'dx'];\n    const currentDragPosition = gesture[isVertical ? 'moveY' : 'moveX'];\n    const maxDragDistance = isVertical ?\n      layout.height.__getValue() :\n      layout.width.__getValue();\n\n    const positionMax = isVertical ?\n      RESPOND_POSITION_MAX_VERTICAL :\n      RESPOND_POSITION_MAX_HORIZONTAL;\n\n    if (positionMax != null && currentDragPosition > positionMax) {\n      return false;\n    }\n\n    return (\n      Math.abs(currentDragDistance) > RESPOND_THRESHOLD &&\n      maxDragDistance > 0 &&\n      index > 0\n    );\n  }\n\n  onPanResponderGrant(): void {\n    this._isResponding = false;\n    this._props.position.stopAnimation((value: number) => {\n      this._isResponding = true;\n      this._startValue = value;\n    });\n  }\n\n  onPanResponderMove(event: any, gesture: any): void {\n    if (!this._isResponding) {\n      return;\n    }\n\n    const props = this._props;\n    const layout = props.layout;\n    const isVertical = this._isVertical;\n    const axis = isVertical ? 'dy' : 'dx';\n    const index = props.navigationState.index;\n    const distance = isVertical ?\n      layout.height.__getValue() :\n      layout.width.__getValue();\n\n    const value = clamp(\n      index - 1,\n      this._startValue - (gesture[axis] / distance),\n      index\n    );\n\n    props.position.setValue(value);\n  }\n\n  onPanResponderRelease(event: any, gesture: any): void {\n    if (!this._isResponding) {\n      return;\n    }\n\n    this._isResponding = false;\n\n    const props = this._props;\n    const isVertical = this._isVertical;\n    const axis = isVertical ? 'dy' : 'dx';\n    const index = props.navigationState.index;\n    const distance = gesture[axis];\n\n    props.position.stopAnimation((value: number) => {\n      this._reset();\n       if (distance > DISTANCE_THRESHOLD  || value <= index - POSITION_THRESHOLD) {\n        props.onNavigate(Actions.BACK);\n      }\n    });\n  }\n\n  onPanResponderTerminate(): void {\n    this._isResponding = false;\n    this._reset();\n  }\n\n  _reset(): void {\n    const props = this._props;\n    Animated.timing(\n      props.position,\n      {\n        toValue: props.navigationState.index,\n        duration: ANIMATION_DURATION,\n      }\n    ).start();\n  }\n}\n\nfunction createPanHandlers(\n  direction: NavigationGestureDirection,\n  props: NavigationSceneRendererProps,\n): NavigationPanPanHandlers {\n  const responder = new NavigationCardStackPanResponder(direction, props);\n  return responder.panHandlers;\n}\n\nfunction forHorizontal(\n  props: NavigationSceneRendererProps,\n): NavigationPanPanHandlers {\n  return createPanHandlers(Directions.HORIZONTAL, props);\n}\n\nfunction forVertical(\n  props: NavigationSceneRendererProps,\n): NavigationPanPanHandlers {\n  return createPanHandlers(Directions.VERTICAL, props);\n}\n\nmodule.exports = {\n  // constants\n  ANIMATION_DURATION,\n  DISTANCE_THRESHOLD,\n  POSITION_THRESHOLD,\n  RESPOND_THRESHOLD,\n\n  // enums\n  Actions,\n  Directions,\n\n  // methods.\n  forHorizontal,\n  forVertical,\n};\n"]}]