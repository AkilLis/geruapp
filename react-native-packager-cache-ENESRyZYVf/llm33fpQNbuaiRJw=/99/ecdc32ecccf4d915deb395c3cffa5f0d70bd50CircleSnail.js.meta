["3654915a84660fa442db9d682e951682329720e0","02f161cf1d175a15caaa6b8f0c2a27000e2c62da",["react","prop-types","react-native","./Shapes/Arc"],[87,182,292,329],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native-progress/CircleSnail.js"],"names":["AnimatedArc","createAnimatedComponent","MIN_ARC_ANGLE","MAX_ARC_ANGLE","Math","PI","CircleSnail","props","state","startAngle","Value","endAngle","rotation","colorIndex","animating","animate","spin","stopAnimations","iteration","sequence","timing","toValue","duration","isInteraction","easing","inOut","quad","start","endState","finished","Array","isArray","color","setState","length","spinDuration","linear","setValue","stopAnimation","children","direction","hidesWhenStopped","size","style","thickness","restProps","radius","offset","top","left","directionFactor","backgroundColor","overflow","transform","rotate","interpolate","inputRange","outputRange","propTypes","bool","oneOfType","string","arrayOf","node","oneOf","number","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Animated,\n  ART,\n  Easing,\n  View,\n} from 'react-native';\n\nimport Arc from './Shapes/Arc';\n\nconst AnimatedArc = Animated.createAnimatedComponent(Arc);\n\nconst MIN_ARC_ANGLE = 0.1;\nconst MAX_ARC_ANGLE = 1.5 * Math.PI;\n\nexport default class CircleSnail extends Component {\n  static propTypes = {\n    animating: PropTypes.bool,\n    color: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.arrayOf(PropTypes.string),\n    ]),\n    children: PropTypes.node,\n    direction: PropTypes.oneOf(['clockwise', 'counter-clockwise']),\n    duration: PropTypes.number,\n    hidesWhenStopped: PropTypes.bool,\n    size: PropTypes.number,\n    spinDuration: PropTypes.number,\n    style: View.propTypes.style,\n    thickness: PropTypes.number,\n  };\n\n  static defaultProps = {\n    animating: true,\n    color: 'rgba(0, 122, 255, 1)',\n    direction: 'counter-clockwise',\n    hidesWhenStopped: false,\n    size: 40,\n    thickness: 3,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      startAngle: new Animated.Value(-MIN_ARC_ANGLE),\n      endAngle: new Animated.Value(0),\n      rotation: new Animated.Value(0),\n      colorIndex: 0,\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.animating) {\n      this.animate();\n      this.spin();\n    }\n  }\n\n  componentWillReceiveProps(props) {\n    if (props.animating !== this.props.animating) {\n      if (props.animating) {\n        this.animate();\n        this.spin();\n      } else {\n        this.stopAnimations();\n      }\n    }\n  }\n\n  animate(iteration = 1) {\n    Animated.sequence([\n      Animated.timing(this.state.startAngle, {\n        toValue: (-MAX_ARC_ANGLE * iteration) - MIN_ARC_ANGLE,\n        duration: this.props.duration || 1000,\n        isInteraction: false,\n        easing: Easing.inOut(Easing.quad),\n      }),\n      Animated.timing(this.state.endAngle, {\n        toValue: -MAX_ARC_ANGLE * iteration,\n        duration: this.props.duration || 1000,\n        isInteraction: false,\n        easing: Easing.inOut(Easing.quad),\n      }),\n    ]).start((endState) => {\n      if (endState.finished) {\n        if (Array.isArray(this.props.color)) {\n          this.setState({\n            colorIndex: iteration % this.props.color.length,\n          });\n        }\n        this.animate(iteration + 1);\n      }\n    });\n  }\n\n  spin() {\n    Animated.timing(this.state.rotation, {\n      toValue: 1,\n      duration: this.props.spinDuration || 5000,\n      easing: Easing.linear,\n      isInteraction: false,\n    }).start((endState) => {\n      if (endState.finished) {\n        this.state.rotation.setValue(0);\n        this.spin();\n      }\n    });\n  }\n\n  stopAnimations() {\n    this.state.startAngle.stopAnimation();\n    this.state.endAngle.stopAnimation();\n    this.state.rotation.stopAnimation();\n  }\n\n  render() {\n    const {\n      animating,\n      children,\n      color,\n      direction,\n      hidesWhenStopped,\n      size,\n      style,\n      thickness,\n      ...restProps\n    } = this.props;\n\n    if (!animating && hidesWhenStopped) {\n      return null;\n    }\n\n    const radius = (size / 2) - thickness;\n    const offset = {\n      top: thickness,\n      left: thickness,\n    };\n\n    const directionFactor = direction === 'counter-clockwise' ? -1 : 1;\n\n    return (\n      <Animated.View\n        {...restProps}\n        style={[\n          style,\n          {\n            backgroundColor: 'transparent',\n            overflow: 'hidden',\n            transform: [{\n              rotate: this.state.rotation.interpolate({\n                inputRange: [0, 1],\n                outputRange: ['0deg', `${directionFactor * 360}deg`],\n              }),\n            }],\n          },\n        ]}\n      >\n        <ART.Surface\n          width={size}\n          height={size}\n        >\n          <AnimatedArc\n            direction={direction === 'counter-clockwise' ? 'clockwise' : 'counter-clockwise'}\n            radius={radius}\n            stroke={Array.isArray(color) ? color[this.state.colorIndex] : color}\n            offset={offset}\n            startAngle={this.state.startAngle}\n            endAngle={this.state.endAngle}\n            strokeCap=\"round\"\n            strokeWidth={thickness}\n          />\n        </ART.Surface>\n        {children}\n      </Animated.View>\n    );\n  }\n}\n"]}]