["43102a2440d92c9924aa8f80ba914e19792578cf","8051d625b60d9d8324c5c857d74a8839b41cce9c",["redux","react-redux","../authActions","../../global/globalActions","react-native-router-flux","../../components/Header","../components/ErrorAlert","../components/LoginForm","react","react-native","Dimensions","../authConstants"],[103,140,184,303,446,498,614,738,855,952,996,1110],{"version":3,"sources":["/var/www/geruapp/src/auth/components/LoginRender.js"],"names":["authActions","globalActions","get","height","width","styles","create","container","flexDirection","flex","inputs","marginTop","marginBottom","marginLeft","marginRight","forgotContainer","justifyContent","mapDispatchToProps","dispatch","actions","LoginRender","props","errorAlert","state","value","username","auth","form","fields","email","password","passwordAgain","nextprops","setState","onAuthFormFieldChange","messageType","forgotPassword","forgotPasswordState","ForgotPassword","alreadyHaveAccount","loginState","Login","register","registerState","Register","formType","loginButtonText","onButtonPress","displayPasswordCheckbox","leftMessageType","rightMessageType","passwordCheckbox","leftMessage","getMessage","rightMessage","self","checkError","error","isFetching","global","showState","currentState","getState","onChange","bind"],"mappings":"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","sourcesContent":["/**\n * # Login.js\n *\n * This class is a little complicated as it handles multiple states.\n *\n */\n'use strict'\n/**\n * ## Imports\n *\n * Redux\n */\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\n\n/**\n * The actions we need\n */\nimport * as authActions from '../authActions'\nimport * as globalActions from '../../global/globalActions'\n\n/**\n * Router actions\n */\nimport { Actions } from 'react-native-router-flux'\n\nimport Header from '../../components/Header'\n/**\n * The ErrorAlert displays an alert for both ios & android\n */\nimport ErrorAlert from '../components/ErrorAlert'\n/**\n *  The LoginForm does the heavy lifting of displaying the fields for\n * textinput and displays the error messages\n */\nimport LoginForm from '../components/LoginForm'\n/**\n * The itemCheckbox will toggle the display of the password fields\n */\n/**\n * The necessary React components\n */\nimport React, {Component} from 'react'\nimport\n{\n  StyleSheet,\n  ScrollView,\n  Text,\n  TouchableHighlight,\n  View\n}\nfrom 'react-native'\n\nimport Dimensions from 'Dimensions'\nvar {height, width} = Dimensions.get('window') // Screen dimensions in current orientation\n\n/**\n * The states were interested in\n */\nimport {\n  LOGIN,\n  REGISTER,\n  FORGOT_PASSWORD\n} from '../authConstants'\n\n/**\n * ## Styles\n */\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'column',\n    flex: 1\n  },\n  inputs: {\n    marginTop: 10,\n    marginBottom: 10,\n    marginLeft: 10,\n    marginRight: 10\n  },\n  forgotContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginTop: 10,\n    marginLeft: 10,\n    marginRight: 10\n  }\n})\n/**\n * ## Redux boilerplate\n */\n\nfunction mapDispatchToProps (dispatch) {\n  return {\n    actions: bindActionCreators({ ...authActions, ...globalActions }, dispatch)\n  }\n}\n/**\n * ### Translations\n */\nclass LoginRender extends Component {\n  constructor (props) {\n    super(props)\n    this.errorAlert = new ErrorAlert()\n    this.state = {\n      value: {\n        username: this.props.auth.form.fields.username,\n        email: this.props.auth.form.fields.email,\n        password: this.props.auth.form.fields.password,\n        passwordAgain: this.props.auth.form.fields.passwordAgain\n      }\n    }\n  }\n\n  /**\n   * ### componentWillReceiveProps\n   * As the properties are validated they will be set here.\n   */\n  componentWillReceiveProps (nextprops) {\n    this.setState({\n      value: {\n        username: nextprops.auth.form.fields.username,\n        email: nextprops.auth.form.fields.email,\n        password: nextprops.auth.form.fields.password,\n        passwordAgain: nextprops.auth.form.fields.passwordAgain\n      }\n    })\n  }\n\n  /**\n   * ### onChange\n   *\n   * As the user enters keys, this is called for each key stroke.\n   * Rather then publish the rules for each of the fields, I find it\n   * better to display the rules required as long as the field doesn't\n   * meet the requirements.\n   * *Note* that the fields are validated by the authReducer\n   */\n  onChange (value) {\n    if (value.username !== '') {\n      this.props.actions.onAuthFormFieldChange('username', value.username)\n    }\n    if (value.email !== '') {\n      this.props.actions.onAuthFormFieldChange('email', value.email)\n    }\n    if (value.password !== '') {\n      this.props.actions.onAuthFormFieldChange('password', value.password)\n    }\n    if (value.passwordAgain !== '') {\n      this.props.actions.onAuthFormFieldChange('passwordAgain', value.passwordAgain)\n    }\n    this.setState(\n      {value}\n    )\n  }\n  /**\n  *  Get the appropriate message for the current action\n  *  @param messageType FORGOT_PASSWORD, or LOGIN, or REGISTER\n  *  @param actions the action for the message type\n  */\n  getMessage (messageType, actions) {\n    let forgotPassword =\n      <TouchableHighlight\n        onPress={() => {\n          actions.forgotPasswordState()\n          Actions.ForgotPassword()\n        }} >\n        <Text>Нууц үгээ мартсан</Text>\n      </TouchableHighlight>\n\n    let alreadyHaveAccount =\n      <TouchableHighlight\n        onPress={() => {\n          actions.loginState()\n          Actions.Login()\n        }} >\n        <Text>Нэвтрэх</Text>\n      </TouchableHighlight>\n\n    let register =\n      <TouchableHighlight\n        onPress={() => {\n          actions.registerState()\n          Actions.Register()\n        }} >\n        <Text>Бүртгүүлэх</Text>\n      </TouchableHighlight>\n\n    switch (messageType) {\n      case FORGOT_PASSWORD:\n        return forgotPassword\n      case LOGIN:\n        return alreadyHaveAccount\n      case REGISTER:\n        return register\n    }\n  }\n\n  /**\n   * ### render\n   * Setup some default presentations and render\n   */\n  render () {\n    var formType = this.props.formType\n    var loginButtonText = this.props.loginButtonText\n    var onButtonPress = this.props.onButtonPress\n    var displayPasswordCheckbox = this.props.displayPasswordCheckbox\n    var leftMessageType = this.props.leftMessageType\n    var rightMessageType = this.props.rightMessageType\n\n    var passwordCheckbox = <Text />\n    let leftMessage = this.getMessage(leftMessageType, this.props.actions)\n    let rightMessage = this.getMessage(rightMessageType, this.props.actions)\n\n    let self = this\n\n    // display the login / register / change password screens\n    this.errorAlert.checkError(this.props.auth.form.error)\n\n    /**\n     * Toggle the display of the Password and PasswordAgain fields\n     */\n    \n\n    /**\n     * The LoginForm is now defined with the required fields.  Just\n     * surround it with the Header and the navigation messages\n     * Note how the button too is disabled if we're fetching. The\n     * header props are mostly for support of Hot reloading.\n     * See the docs for Header for more info.\n     */\n\n    return (\n      <View style={styles.container}>\n        <ScrollView horizontal={false} width={width} height={height}>\n          <View>\n            <Header isFetching={this.props.auth.form.isFetching}\n              showState={this.props.global.showState}\n              currentState={this.props.global.currentState}\n              onGetState={this.props.actions.getState}\n              onSetState={this.props.actions.setState} />\n\n            <View style={styles.inputs}>\n              <LoginForm\n                formType={formType}\n                form={this.props.auth.form}\n                value={this.state.value}\n                onChange={self.onChange.bind(self)} />\n              \n            </View>\n\n            <View >\n              <View style={styles.forgotContainer}>\n                {leftMessage}\n                {rightMessage}\n              </View>\n            </View>\n\n          </View>\n        </ScrollView>\n      </View>\n    )\n  }\n}\nexport default connect(null, mapDispatchToProps)(LoginRender)\n"]}]