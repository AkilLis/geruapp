["53b70b05981da553e663d481f322d66614020abc","3f0316cd74e07262432230d41e26e8cc1089f9f9",["fbjs/lib/invariant"],[41],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native/Libraries/Renderer/src/renderers/shared/shared/event/EventPluginRegistry.js"],"names":["invariant","require","eventPluginOrder","namesToPlugins","recomputePluginOrdering","pluginName","pluginModule","pluginIndex","indexOf","EventPluginRegistry","plugins","extractEvents","publishedEvents","eventTypes","eventName","publishEventForPlugin","dispatchConfig","eventNameDispatchConfigs","hasOwnProperty","phasedRegistrationNames","phaseName","phasedRegistrationName","publishRegistrationName","registrationName","registrationNameModules","registrationNameDependencies","dependencies","__DEV__","lowerCasedName","toLowerCase","possibleRegistrationNames","ondblclick","injectEventPluginOrder","injectedEventPluginOrder","Array","prototype","slice","call","injectEventPluginsByName","injectedNamesToPlugins","isOrderingDirty","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EventPluginRegistry\n * @flow\n */\n\n'use strict';\n\nimport type {DispatchConfig} from 'ReactSyntheticEventType';\n\nimport type {AnyNativeEvent, PluginName, PluginModule} from 'PluginModuleType';\n\ntype NamesToPlugins = {[key: PluginName]: PluginModule<AnyNativeEvent>};\n\ntype EventPluginOrder = null | Array<PluginName>;\n\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * Injectable ordering of event plugins.\n */\nvar eventPluginOrder: EventPluginOrder = null;\n\n/**\n * Injectable mapping from names to event plugin modules.\n */\nvar namesToPlugins: NamesToPlugins = {};\n\n/**\n * Recomputes the plugin list using the injected plugins and plugin ordering.\n *\n * @private\n */\nfunction recomputePluginOrdering(): void {\n  if (!eventPluginOrder) {\n    // Wait until an `eventPluginOrder` is injected.\n    return;\n  }\n  for (var pluginName in namesToPlugins) {\n    var pluginModule = namesToPlugins[pluginName];\n    var pluginIndex = eventPluginOrder.indexOf(pluginName);\n    invariant(\n      pluginIndex > -1,\n      'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +\n        'the plugin ordering, `%s`.',\n      pluginName,\n    );\n    if (EventPluginRegistry.plugins[pluginIndex]) {\n      continue;\n    }\n    invariant(\n      pluginModule.extractEvents,\n      'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +\n        'method, but `%s` does not.',\n      pluginName,\n    );\n    EventPluginRegistry.plugins[pluginIndex] = pluginModule;\n    var publishedEvents = pluginModule.eventTypes;\n    for (var eventName in publishedEvents) {\n      invariant(\n        publishEventForPlugin(\n          publishedEvents[eventName],\n          pluginModule,\n          eventName,\n        ),\n        'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',\n        eventName,\n        pluginName,\n      );\n    }\n  }\n}\n\n/**\n * Publishes an event so that it can be dispatched by the supplied plugin.\n *\n * @param {object} dispatchConfig Dispatch configuration for the event.\n * @param {object} PluginModule Plugin publishing the event.\n * @return {boolean} True if the event was successfully published.\n * @private\n */\nfunction publishEventForPlugin(\n  dispatchConfig: DispatchConfig,\n  pluginModule: PluginModule<AnyNativeEvent>,\n  eventName: string,\n): boolean {\n  invariant(\n    !EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName),\n    'EventPluginHub: More than one plugin attempted to publish the same ' +\n      'event name, `%s`.',\n    eventName,\n  );\n  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;\n\n  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;\n  if (phasedRegistrationNames) {\n    for (var phaseName in phasedRegistrationNames) {\n      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {\n        var phasedRegistrationName = phasedRegistrationNames[phaseName];\n        publishRegistrationName(\n          phasedRegistrationName,\n          pluginModule,\n          eventName,\n        );\n      }\n    }\n    return true;\n  } else if (dispatchConfig.registrationName) {\n    publishRegistrationName(\n      dispatchConfig.registrationName,\n      pluginModule,\n      eventName,\n    );\n    return true;\n  }\n  return false;\n}\n\n/**\n * Publishes a registration name that is used to identify dispatched events.\n *\n * @param {string} registrationName Registration name to add.\n * @param {object} PluginModule Plugin publishing the event.\n * @private\n */\nfunction publishRegistrationName(\n  registrationName: string,\n  pluginModule: PluginModule<AnyNativeEvent>,\n  eventName: string,\n): void {\n  invariant(\n    !EventPluginRegistry.registrationNameModules[registrationName],\n    'EventPluginHub: More than one plugin attempted to publish the same ' +\n      'registration name, `%s`.',\n    registrationName,\n  );\n  EventPluginRegistry.registrationNameModules[registrationName] = pluginModule;\n  EventPluginRegistry.registrationNameDependencies[\n    registrationName\n  ] = pluginModule.eventTypes[eventName].dependencies;\n\n  if (__DEV__) {\n    var lowerCasedName = registrationName.toLowerCase();\n    EventPluginRegistry.possibleRegistrationNames[\n      lowerCasedName\n    ] = registrationName;\n\n    if (registrationName === 'onDoubleClick') {\n      EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;\n    }\n  }\n}\n\n/**\n * Registers plugins so that they can extract and dispatch events.\n *\n * @see {EventPluginHub}\n */\nvar EventPluginRegistry = {\n  /**\n   * Ordered list of injected plugins.\n   */\n  plugins: [],\n\n  /**\n   * Mapping from event name to dispatch config\n   */\n  eventNameDispatchConfigs: {},\n\n  /**\n   * Mapping from registration name to plugin module\n   */\n  registrationNameModules: {},\n\n  /**\n   * Mapping from registration name to event name\n   */\n  registrationNameDependencies: {},\n\n  /**\n   * Mapping from lowercase registration names to the properly cased version,\n   * used to warn in the case of missing event handlers. Available\n   * only in __DEV__.\n   * @type {Object}\n   */\n  possibleRegistrationNames: __DEV__ ? {} : (null: any),\n  // Trust the developer to only use possibleRegistrationNames in __DEV__\n\n  /**\n   * Injects an ordering of plugins (by plugin name). This allows the ordering\n   * to be decoupled from injection of the actual plugins so that ordering is\n   * always deterministic regardless of packaging, on-the-fly injection, etc.\n   *\n   * @param {array} InjectedEventPluginOrder\n   * @internal\n   * @see {EventPluginHub.injection.injectEventPluginOrder}\n   */\n  injectEventPluginOrder: function(\n    injectedEventPluginOrder: EventPluginOrder,\n  ): void {\n    invariant(\n      !eventPluginOrder,\n      'EventPluginRegistry: Cannot inject event plugin ordering more than ' +\n        'once. You are likely trying to load more than one copy of React.',\n    );\n    // Clone the ordering so it cannot be dynamically mutated.\n    eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);\n    recomputePluginOrdering();\n  },\n\n  /**\n   * Injects plugins to be used by `EventPluginHub`. The plugin names must be\n   * in the ordering injected by `injectEventPluginOrder`.\n   *\n   * Plugins can be injected as part of page initialization or on-the-fly.\n   *\n   * @param {object} injectedNamesToPlugins Map from names to plugin modules.\n   * @internal\n   * @see {EventPluginHub.injection.injectEventPluginsByName}\n   */\n  injectEventPluginsByName: function(\n    injectedNamesToPlugins: NamesToPlugins,\n  ): void {\n    var isOrderingDirty = false;\n    for (var pluginName in injectedNamesToPlugins) {\n      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {\n        continue;\n      }\n      var pluginModule = injectedNamesToPlugins[pluginName];\n      if (\n        !namesToPlugins.hasOwnProperty(pluginName) ||\n        namesToPlugins[pluginName] !== pluginModule\n      ) {\n        invariant(\n          !namesToPlugins[pluginName],\n          'EventPluginRegistry: Cannot inject two different event plugins ' +\n            'using the same name, `%s`.',\n          pluginName,\n        );\n        namesToPlugins[pluginName] = pluginModule;\n        isOrderingDirty = true;\n      }\n    }\n    if (isOrderingDirty) {\n      recomputePluginOrdering();\n    }\n  },\n};\n\nmodule.exports = EventPluginRegistry;\n"]}]