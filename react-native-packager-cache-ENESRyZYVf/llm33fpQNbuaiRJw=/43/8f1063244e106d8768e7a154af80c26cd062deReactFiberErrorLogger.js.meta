["6332767a95f2c875fecfa8e3a5e4bc5ee32fcc30","35cf5d888aa883ccc260595714cbacc1d5088458",["fbjs/lib/invariant"],[41],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native/Libraries/Renderer/src/renderers/shared/fiber/ReactFiberErrorLogger.js"],"names":["invariant","require","defaultShowDialog","showDialog","logCapturedError","capturedError","logError","__DEV__","componentName","componentStack","error","errorBoundaryName","errorBoundaryFound","willRetry","message","name","stack","errorSummary","componentNameMessage","formattedCallStack","slice","length","trim","split","map","line","join","errorBoundaryMessage","console","exports","injection","injectDialog","fn"],"mappings":";;AAYA;;AAEA,IAAMA,YAAYC,QAAQ,oBAAR,CAAlB;;AAIA,IAAMC,oBAAoB,SAApBA,iBAAoB;AAAA,SAAM,IAAN;AAAA,CAA1B;;AAEA,IAAIC,aAAaD,iBAAjB;;AAEA,SAASE,gBAAT,CAA0BC,aAA1B,EAA8D;AAC5D,MAAMC,WAAWH,WAAWE,aAAX,CAAjB;;AAIA,MAAIC,aAAa,KAAjB,EAAwB;AACtB;AACD;;AAED,MAAIC,OAAJ,EAAa;AAAA,QAETC,aAFS,GAQPH,aARO,CAETG,aAFS;AAAA,QAGTC,cAHS,GAQPJ,aARO,CAGTI,cAHS;AAAA,QAITC,KAJS,GAQPL,aARO,CAITK,KAJS;AAAA,QAKTC,iBALS,GAQPN,aARO,CAKTM,iBALS;AAAA,QAMTC,kBANS,GAQPP,aARO,CAMTO,kBANS;AAAA,QAOTC,SAPS,GAQPR,aARO,CAOTQ,SAPS;AAAA,QAWTC,OAXS,GAcPJ,KAdO,CAWTI,OAXS;AAAA,QAYTC,IAZS,GAcPL,KAdO,CAYTK,IAZS;AAAA,QAaTC,KAbS,GAcPN,KAdO,CAaTM,KAbS;;;AAgBX,QAAMC,eAAeH,UAAaC,IAAb,UAAsBD,OAAtB,GAAkCC,IAAvD;;AAEA,QAAMG,uBAAuBV,qDACUA,aADV,SAEzB,yDAFJ;;AAQA,QAAIW,qBAAqBH,MAAMI,KAAN,CAAY,CAAZ,EAAeH,aAAaI,MAA5B,MACvBJ,YADuB,GAErBD,MAAMI,KAAN,CAAYH,aAAaI,MAAzB,CAFqB,GAGrBL,KAHJ;AAIAG,yBAAqBA,mBAClBG,IADkB,GAElBC,KAFkB,CAEZ,IAFY,EAGlBC,GAHkB,CAGd;AAAA,wBAAiBC,KAAKH,IAAL,EAAjB;AAAA,KAHc,EAIlBI,IAJkB,EAArB;;AAMA,QAAIC,6BAAJ;;AAEA,QAAIf,sBAAsBD,iBAA1B,EAA6C;AAC3C,UAAIE,SAAJ,EAAe;AACbc,+BAAuB,8GACqBhB,iBADrB,OAAvB;AAED,OAHD,MAGO;AACLgB,+BAAuB,4DAA0DhB,iBAA1D,mFAAvB;AAED;AACF,KARD,MAQO;AAELgB,6BAAuB,sFAAvB;AACD;;AAEDC,YAAQlB,KAAR,CACKQ,oBAAH,iDAAmES,oBAAnE,aACKV,YADL,4CAE8BR,cAF9B,4CAG8BU,kBAH9B,CADF;AAMD;;AAED,MAAI,CAACZ,OAAL,EAAc;AAAA,QACLG,MADK,GACIL,aADJ,CACLK,KADK;;AAEZkB,YAAQlB,KAAR,iEACgEA,OAAMM,KADtE;AAGD;AACF;;AAEDa,QAAQC,SAAR,GAAoB;AAKlBC,cALkB,wBAKLC,EALK,EAK8B;AAC9ChC,cACEG,eAAeD,iBADjB,EAEE,yCAFF;AAIAF,cACE,OAAOgC,EAAP,KAAc,UADhB,EAEE,2CAFF;AAIA7B,iBAAa6B,EAAb;AACD;AAfiB,CAApB;;AAkBAH,QAAQzB,gBAAR,GAA2BA,gBAA3B","sourcesContent":["/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactFiberErrorLogger\n * @flow\n */\n\n'use strict';\n\nconst invariant = require('fbjs/lib/invariant');\n\nimport type {CapturedError} from 'ReactFiberScheduler';\n\nconst defaultShowDialog = () => true;\n\nlet showDialog = defaultShowDialog;\n\nfunction logCapturedError(capturedError: CapturedError): void {\n  const logError = showDialog(capturedError);\n\n  // Allow injected showDialog() to prevent default console.error logging.\n  // This enables renderers like ReactNative to better manage redbox behavior.\n  if (logError === false) {\n    return;\n  }\n\n  if (__DEV__) {\n    const {\n      componentName,\n      componentStack,\n      error,\n      errorBoundaryName,\n      errorBoundaryFound,\n      willRetry,\n    } = capturedError;\n\n    const {\n      message,\n      name,\n      stack,\n    } = error;\n\n    const errorSummary = message ? `${name}: ${message}` : name;\n\n    const componentNameMessage = componentName\n      ? `React caught an error thrown by ${componentName}.`\n      : 'React caught an error thrown by one of your components.';\n\n    // Error stack varies by browser, eg:\n    // Chrome prepends the Error name and type.\n    // Firefox, Safari, and IE don't indent the stack lines.\n    // Format it in a consistent way for error logging.\n    let formattedCallStack = stack.slice(0, errorSummary.length) ===\n      errorSummary\n      ? stack.slice(errorSummary.length)\n      : stack;\n    formattedCallStack = formattedCallStack\n      .trim()\n      .split('\\n')\n      .map(line => `\\n    ${line.trim()}`)\n      .join();\n\n    let errorBoundaryMessage;\n    // errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.\n    if (errorBoundaryFound && errorBoundaryName) {\n      if (willRetry) {\n        errorBoundaryMessage = `React will try to recreate this component tree from scratch ` +\n          `using the error boundary you provided, ${errorBoundaryName}.`;\n      } else {\n        errorBoundaryMessage = `This error was initially handled by the error boundary ${errorBoundaryName}. ` +\n          `Recreating the tree from scratch failed so React will unmount the tree.`;\n      }\n    } else {\n      // TODO Link to unstable_handleError() documentation once it exists.\n      errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.';\n    }\n\n    console.error(\n      `${componentNameMessage} You should fix this error in your code. ${errorBoundaryMessage}\\n\\n` +\n        `${errorSummary}\\n\\n` +\n        `The error is located at: ${componentStack}\\n\\n` +\n        `The error was thrown at: ${formattedCallStack}`,\n    );\n  }\n\n  if (!__DEV__) {\n    const {error} = capturedError;\n    console.error(\n      `React caught an error thrown by one of your components.\\n\\n${error.stack}`,\n    );\n  }\n}\n\nexports.injection = {\n  /**\n   * Display custom dialogÂ for lifecycle errors.\n   * Return false to prevent default behavior of logging to console.error.\n   */\n  injectDialog(fn: (e: CapturedError) => boolean) {\n    invariant(\n      showDialog === defaultShowDialog,\n      'The custom dialog was already injected.',\n    );\n    invariant(\n      typeof fn === 'function',\n      'Injected showDialog() must be a function.',\n    );\n    showDialog = fn;\n  },\n};\n\nexports.logCapturedError = logCapturedError;\n"]}]