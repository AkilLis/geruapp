["2a3cf182a13367203e99168988c20dae2ce7db1f","b1e653cccf1fca6534e3489fa3dc9545f75d988a",["./assert","./isTypeName","./isFunction","./getTypeName","./isIdentity","./create","./is","./isArray"],[21,59,101,144,187,225,255,286],{"version":3,"sources":["/var/www/geruapp/node_modules/tcomb/lib/list.js"],"names":["assert","require","isTypeName","isFunction","getTypeName","isIdentity","create","is","isArray","getDefaultName","type","list","name","process","env","NODE_ENV","stringify","displayName","typeNameCache","identity","List","value","path","join","idempotent","ret","i","len","length","actual","instance","concat","push","Object","freeze","meta","kind","x","every","e","update","patch","module","exports"],"mappings":"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","sourcesContent":["var assert = require('./assert');\nvar isTypeName = require('./isTypeName');\nvar isFunction = require('./isFunction');\nvar getTypeName = require('./getTypeName');\nvar isIdentity = require('./isIdentity');\nvar create = require('./create');\nvar is = require('./is');\nvar isArray = require('./isArray');\n\nfunction getDefaultName(type) {\n  return 'Array<' + getTypeName(type) + '>';\n}\n\nfunction list(type, name) {\n\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isFunction(type), function () { return 'Invalid argument type ' + assert.stringify(type) + ' supplied to list(type, [name]) combinator (expected a type)'; });\n    assert(isTypeName(name), function () { return 'Invalid argument name ' + assert.stringify(name) + ' supplied to list(type, [name]) combinator (expected a string)'; });\n  }\n\n  var displayName = name || getDefaultName(type);\n  var typeNameCache = getTypeName(type);\n  var identity = isIdentity(type); // the list is identity iif type is identity\n\n  function List(value, path) {\n\n    if (process.env.NODE_ENV === 'production') {\n      if (identity) {\n        return value; // just trust the input if elements must not be hydrated\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      path = path || [displayName];\n      assert(isArray(value), function () { return 'Invalid value ' + assert.stringify(value) + ' supplied to ' + path.join('/') + ' (expected an array of ' + typeNameCache + ')'; });\n    }\n\n    var idempotent = true; // will remain true if I can reutilise the input\n    var ret = []; // make a temporary copy, will be discarded if idempotent remains true\n    for (var i = 0, len = value.length; i < len; i++ ) {\n      var actual = value[i];\n      var instance = create(type, actual, ( process.env.NODE_ENV !== 'production' ? path.concat(i + ': ' + typeNameCache) : null ));\n      idempotent = idempotent && ( actual === instance );\n      ret.push(instance);\n    }\n\n    if (idempotent) { // implements idempotency\n      ret = value;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      Object.freeze(ret);\n    }\n\n    return ret;\n  }\n\n  List.meta = {\n    kind: 'list',\n    type: type,\n    name: name,\n    identity: identity\n  };\n\n  List.displayName = displayName;\n\n  List.is = function (x) {\n    return isArray(x) && x.every(function (e) {\n      return is(e, type);\n    });\n  };\n\n  List.update = function (instance, patch) {\n    return List(assert.update(instance, patch));\n  };\n\n  return List;\n}\n\nlist.getDefaultName = getDefaultName;\nmodule.exports = list;\n"]}]