["3129f1efca2c118c61a0f73309dd409059ee0ab1","0cd2dbd01de5c9f48be43eb10e5a56df4cd62d56",["react","prop-types","react-native","./Shapes/Arc","./withAnimation"],[123,218,328,365,467],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native-progress/Circle.js"],"names":["CIRCLE","Math","PI","AnimatedSurface","createAnimatedComponent","Surface","AnimatedArc","styles","create","container","backgroundColor","overflow","ProgressCircle","props","context","progressValue","animated","progress","addListener","event","value","showsText","forceUpdate","borderColor","borderWidth","color","children","direction","formatText","indeterminate","rotation","size","style","strokeCap","textStyle","thickness","unfilledColor","restProps","border","radius","offset","top","left","textOffset","textSize","Shape","angle","multiply","transform","rotate","interpolate","inputRange","outputRange","position","width","height","borderRadius","alignItems","justifyContent","fontSize","fontWeight","propTypes","bool","string","number","PropTypes","node","oneOf","func","oneOfType","instanceOf","Value","defaultProps","round"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Animated,\n  ART,\n  StyleSheet,\n  Text,\n  View,\n} from 'react-native';\n\nimport Arc from './Shapes/Arc';\nimport withAnimation from './withAnimation';\n\nconst CIRCLE = Math.PI * 2;\n\nconst AnimatedSurface = Animated.createAnimatedComponent(ART.Surface);\nconst AnimatedArc = Animated.createAnimatedComponent(Arc);\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'transparent',\n    overflow: 'hidden',\n  },\n});\n\nexport class ProgressCircle extends Component {\n  static propTypes = {\n    animated: PropTypes.bool,\n    borderColor: PropTypes.string,\n    borderWidth: PropTypes.number,\n    color: PropTypes.string,\n    children: React.PropTypes.node,\n    direction: PropTypes.oneOf(['clockwise', 'counter-clockwise']),\n    formatText: PropTypes.func,\n    indeterminate: PropTypes.bool,\n    progress: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.instanceOf(Animated.Value),\n    ]),\n    rotation: PropTypes.instanceOf(Animated.Value),\n    showsText: PropTypes.bool,\n    size: PropTypes.number,\n    style: View.propTypes.style,\n    textStyle: Text.propTypes.style,\n    thickness: PropTypes.number,\n    unfilledColor: PropTypes.string,\n  };\n\n  static defaultProps = {\n    borderWidth: 1,\n    color: 'rgba(0, 122, 255, 1)',\n    direction: 'clockwise',\n    formatText: progress => `${Math.round(progress * 100)}%`,\n    progress: 0,\n    showsText: false,\n    size: 40,\n    thickness: 3,\n  };\n\n  constructor(props, context) {\n    super(props, context);\n\n    this.progressValue = 0;\n  }\n\n  componentWillMount() {\n    if (this.props.animated) {\n      this.props.progress.addListener((event) => {\n        this.progressValue = event.value;\n        if (this.props.showsText || this.progressValue === 1) {\n          this.forceUpdate();\n        }\n      });\n    }\n  }\n\n  render() {\n    const {\n      animated,\n      borderColor,\n      borderWidth,\n      color,\n      children,\n      direction,\n      formatText,\n      indeterminate,\n      progress,\n      rotation,\n      showsText,\n      size,\n      style,\n      strokeCap,\n      textStyle,\n      thickness,\n      unfilledColor,\n      ...restProps\n    } = this.props;\n\n    const border = borderWidth || (indeterminate ? 1 : 0);\n\n    const radius = (size / 2) - border;\n    const offset = {\n      top: border,\n      left: border,\n    };\n    const textOffset = border + thickness;\n    const textSize = size - (textOffset * 2);\n\n    const Surface = rotation ? AnimatedSurface : ART.Surface;\n    const Shape = animated ? AnimatedArc : Arc;\n    const progressValue = animated ? this.progressValue : progress;\n    const angle = animated ? Animated.multiply(progress, CIRCLE) : progress * CIRCLE;\n\n    return (\n      <View style={[styles.container, style]} {...restProps}>\n        <Surface\n          width={size}\n          height={size}\n          style={{\n            transform: [{\n              rotate: indeterminate && rotation\n                ? rotation.interpolate({\n                  inputRange: [0, 1],\n                  outputRange: ['0deg', '360deg'],\n                })\n                : '0deg',\n            }],\n          }}\n        >\n          {unfilledColor && progressValue !== 1 ? (\n            <Shape\n              radius={radius}\n              offset={offset}\n              startAngle={angle}\n              endAngle={CIRCLE}\n              direction={direction}\n              stroke={unfilledColor}\n              strokeWidth={thickness}\n            />\n          ) : false}\n          {!indeterminate ? (\n            <Shape\n              radius={radius}\n              offset={offset}\n              startAngle={0}\n              endAngle={angle}\n              direction={direction}\n              stroke={color}\n              strokeWidth={thickness}\n            />\n          ) : false}\n          {border ? (\n            <Arc\n              radius={size / 2}\n              startAngle={0}\n              endAngle={(indeterminate ? 1.8 : 2) * Math.PI}\n              stroke={borderColor || color}\n              strokeCap={strokeCap}\n              strokeWidth={border}\n            />\n          ) : false}\n        </Surface>\n        {!indeterminate && showsText ? (\n          <View\n            style={{\n              position: 'absolute',\n              left: textOffset,\n              top: textOffset,\n              width: textSize,\n              height: textSize,\n              borderRadius: textSize / 2,\n              alignItems: 'center',\n              justifyContent: 'center',\n            }}\n          >\n            <Text\n              style={[{\n                color,\n                fontSize: textSize / 4.5,\n                fontWeight: '300',\n              }, textStyle]}\n            >\n              {formatText(progressValue)}\n            </Text>\n          </View>\n        ) : false}\n        {children}\n      </View>\n    );\n  }\n}\n\nexport default withAnimation(ProgressCircle);\n"]}]