["ac5ff9c4ecbedf332d2c6ea07479939bec59dfa4","82775e96f4622ad900a9035de447c22b65524cc1",["react","react-native"],[87,184],{"version":3,"sources":["/var/www/geruapp/src/components/react-native-animated-overlay/index.js"],"names":["screen","get","AnimatedOverlay","props","animatedValue","Value","animate","bind","prevProps","prevState","setValue","timing","toValue","duration","easing","cubic","start","isOpen","heightTransaction","height","interpolate","inputRange","outputRange","width","opacity","bottom","styles","container","style","children","propTypes","bool","defaultProps","create","position","zIndex","left","right","backgroundColor","overlayContainer","flex","padding"],"mappings":";;;;AAAA;;;;AACA;;AAWA,IAAMA,SAAS,wBAAWC,GAAX,CAAe,QAAf,CAAf;;IAEqBC,e;;;AACnB,2BAAYC,KAAZ,EAAmB;AAAA;;AAAA,8IACXA,KADW;;AAOjB,UAAKC,aAAL,GAAqB,IAAI,sBAASC,KAAb,CAAmB,CAAnB,CAArB;AACD,UAAKC,OAAL,GAAe,MAAKA,OAAL,CAAaC,IAAb,OAAf;AARkB;AASlB;;;;wCA2CmB,CAEnB;;;uCAEkBC,S,EAAWC,S,EAAW;AACvC,WAAKH,OAAL;AACD;;;8BAES;AACV,WAAKF,aAAL,CAAmBM,QAAnB,CAA4B,CAA5B;AACA,4BAASC,MAAT,CACA,KAAKP,aADL,EAEA;AACGQ,iBAAS,CADZ;AAEGC,kBAAU,GAFb;AAGGC,gBAAQ,oBAAOC;AAHlB,OAFA,EAMGC,KANH;AAOC;;;6BAES;AAAA,UAGVC,MAHU,GAIP,KAAKd,KAJE,CAGVc,MAHU;;;AAMX,UAAIC,oBAAoBD,SAASjB,OAAOmB,MAAhB,GAAyB,CAAjD;;AAEA,UAAMA,SAAS,KAAKf,aAAL,CAAmBgB,WAAnB,CAA+B;AAC1CC,oBAAY,CAAC,CAAD,EAAI,CAAJ,CAD8B;AAE1CC,qBAAa,CAAC,CAAD,EAAIJ,iBAAJ;AAF6B,OAA/B,CAAf;;AAKA,UAAMK,QAAQ,KAAKnB,aAAL,CAAmBgB,WAAnB,CAA+B;AACzCC,oBAAY,CAAC,CAAD,EAAI,CAAJ,CAD6B;AAEzCC,qBAAa,CAAC,EAAD,EAAKtB,OAAOuB,KAAZ;AAF4B,OAA/B,CAAd;;AAKA,UAAMC,UAAU,KAAKpB,aAAL,CAAmBgB,WAAnB,CAA+B;AAC3CC,oBAAY,CAAC,CAAD,EAAI,CAAJ,CAD+B;AAE3CC,qBAAa,CAAC,CAAD,EAAI,CAAJ;AAF8B,OAA/B,CAAhB;;AAKC,UAAIG,SAASR,SAAS,CAAT,GAAa,CAAC,EAA3B;;AAKA,aACM;AAAA,8BAAU,IAAV;AAAA,UAAe,OAAO,CAAC,EAAEE,cAAF,EAAUI,YAAV,EAAiBC,gBAAjB,EAA0BC,cAA1B,EAAD,EACGC,OAAOC,SADV,EAEG,KAAKxB,KAAL,CAAWyB,KAFd,CAAtB;AAMK,aAAKzB,KAAL,CAAW0B;AANhB,OADN;AAWC;;;;;kBA/GkB3B,e;;;AAkHrBA,gBAAgB4B,SAAhB,GAA4B;AAC3Bb,UAAQ,iBAAUc;AADS,CAA5B;;AAIA7B,gBAAgB8B,YAAhB,GAA+B;AAC9Bf,UAAQ;AADsB,CAA/B;;AAIA,IAAIS,SAAS,wBAAWO,MAAX,CAAkB;AAC3BN,aAAW;AACPO,cAAU,UADH;AAEPC,YAAQ,CAFD;AAGPV,YAAQ,CAHD;AAIPW,UAAM,CAJC;AAKPC,WAAO,CALA;;AAOPC,qBAAiB;AAPV,GADgB;;AAW3BC,oBAAkB;AAChBC,UAAM,CADU;AAEhBC,aAAS,EAFO;AAGhBH,qBAAiB;AAHD;AAXS,CAAlB,CAAb","sourcesContent":["import React, { PropTypes, Component } from 'react'\nimport { \n\tStyleSheet,\n\tView, \n\tText,\n\tAnimated,\n\tEasing,\n\tDimensions,\n\tBackAndroid,\n  TouchableOpacity\n} from 'react-native'\n\nconst screen = Dimensions.get('window')\n\nexport default class AnimatedOverlay extends Component {\n  constructor(props) {\n    super(props)\n  \n    /*this.state = {\n    \topen: this.props.isOpen\n    }*/\n\n    this.animatedValue = new Animated.Value(0)\n\t  this.animate = this.animate.bind(this)\n  }\n\n  /*componentWillMount() {\n     this.handleOpenning(this.props)\n  }*/\n\n  /*componentWillReceiveProps(nextProps) {\n  \t this.handleOpenning(nextProps)\n  }\n\n  handleOpenning(state) {\n    if (typeof props.isOpen == \"undefined\") return\n    if (props.isOpen)\n      this.open()\n    else\n      this.close()\n  }\n\n  open() {*/\n    /*if (!this.state.isAnimateOpen && (!this.state.isOpen || this.state.isAnimateClose)) {\n      this.onViewLayoutCalculated = () => {*/\n        /*this.setState({});\n        this.animateOpen();*/\n        /*if(this.props.backButtonClose && Platform.OS === 'android') \n        \tBackAndroid.addEventListener('hardwareBackPress', this.onBackPress)\n        delete this.onViewLayoutCalculated\n      }\n      \n    }*/\n    \t/*this.setState({\n      \t\topen : true\n      \t})\n  }*/\n\n  /*close () {\n    if (this.props.isDisabled) return;\n    if (!this.state.isAnimateClose && (this.state.isOpen || this.state.isAnimateOpen)) {\n      this.animateClose();\n      if(this.props.backButtonClose && Platform.OS === 'android') BackAndroid.removeEventListener('hardwareBackPress', this.onBackPress)\n    }\n  }*/\n\n\n  componentDidMount() {\n     //this.animate()\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n  \t this.animate()\n  }\n\n  animate() {\n\t this.animatedValue.setValue(0)\n\t Animated.timing(\n\t this.animatedValue,\n\t {\n\t    toValue: 1,\n\t    duration: 400,\n\t    easing: Easing.cubic\n\t }).start()\n  }\n\n  render () {\n\n  \tlet {\n\t\tisOpen,\n\t} = this.props\n\n\tlet heightTransaction = isOpen ? screen.height : 0\n\n\tconst height = this.animatedValue.interpolate({\n\t    inputRange: [0, 1],\n\t    outputRange: [0, heightTransaction]\n\t})\n\n\tconst width = this.animatedValue.interpolate({\n\t    inputRange: [0, 1],\n\t    outputRange: [60, screen.width]\n\t})\n\n\tconst opacity = this.animatedValue.interpolate({\n\t    inputRange: [0, 1],\n\t    outputRange: [0, 1]\n\t})\n\n  let bottom = isOpen ? 0 : -50\n\n\t//let borderRadius = open ? 0 : 0\n\t//let top = open: \n\n  return (\n       \t<Animated.View style={[{ height, width, opacity, bottom }, \n                                 styles.container, \n                                 this.props.style]}>\n          {/*<TouchableOpacity style={styles.overlayContainer}\n                            activeOpacity={0.9}\n          >*/}\n       \t\t   {this.props.children}\n          {/*</TouchableOpacity>*/}\n       \t</Animated.View>\n    )\n  }\n}\n\nAnimatedOverlay.propTypes = {\n\tisOpen: PropTypes.bool\n}\n\nAnimatedOverlay.defaultProps = {\n\tisOpen: false,\n}\n\nlet styles = StyleSheet.create({\n    container: {\n        position: 'absolute',\n        zIndex: 3,\n        bottom: 0,\n        left: 0,\n        right: 0,\n        //backgroundColor: '#aecaec',\n        backgroundColor: 'transparent',\n    },\n\n    overlayContainer: {\n      flex: 1,\n      padding: 40,\n      backgroundColor: 'rgba(0, 0, 0, 0.5)'\n    }\n})\n"]}]