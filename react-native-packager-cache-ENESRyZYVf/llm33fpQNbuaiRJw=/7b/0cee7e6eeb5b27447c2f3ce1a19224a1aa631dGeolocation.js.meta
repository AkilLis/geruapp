["f1c7e311759cfd869cf75a03dbb9df6c4ee54088","195e32320a9223605ebd9a0955a30d9d78d145d5",["NativeEventEmitter","NativeModules","fbjs/lib/invariant","logError","fbjs/lib/warning"],[49,106,166,212,247],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native/Libraries/Geolocation/Geolocation.js"],"names":["NativeEventEmitter","require","RCTLocationObserver","LocationObserver","invariant","logError","warning","LocationEventEmitter","subscriptions","updatesEnabled","Geolocation","getCurrentPosition","geo_success","geo_error","geo_options","watchPosition","success","error","options","startObserving","watchID","length","push","addListener","clearWatch","sub","remove","sub1","undefined","noWatchers","ii","stopObserving","module","exports"],"mappings":";AAWA;;AAEA,IAAMA,qBAAqBC,QAAQ,oBAAR,CAA3B;AACA,IAAMC,sBAAsBD,QAAQ,eAAR,EAAyBE,gBAArD;;AAEA,IAAMC,YAAYH,QAAQ,oBAAR,CAAlB;AACA,IAAMI,WAAWJ,QAAQ,UAAR,CAAjB;AACA,IAAMK,UAAUL,QAAQ,kBAAR,CAAhB;;AAEA,IAAMM,uBAAuB,IAAIP,kBAAJ,CAAuBE,mBAAvB,CAA7B;;AAEA,IAAIM,gBAAgB,EAApB;AACA,IAAIC,iBAAiB,KAArB;;AAmCA,IAAIC,cAAc;AAQhBC,sBAAoB,4BAClBC,WADkB,EAElBC,SAFkB,EAGlBC,WAHkB,EAIlB;AACAV,cACE,OAAOQ,WAAP,KAAuB,UADzB,EAEE,4CAFF;AAIAV,wBAAoBS,kBAApB,CACEG,eAAe,EADjB,EAEEF,WAFF,EAGEC,aAAaR,QAHf;AAKD,GAtBe;;AA4BhBU,iBAAe,uBAASC,OAAT,EAA4BC,KAA5B,EAA8CC,OAA9C,EAA4E;AACzF,QAAI,CAACT,cAAL,EAAqB;AACnBP,0BAAoBiB,cAApB,CAAmCD,WAAW,EAA9C;AACAT,uBAAiB,IAAjB;AACD;AACD,QAAIW,UAAUZ,cAAca,MAA5B;AACAb,kBAAcc,IAAd,CAAmB,CACjBf,qBAAqBgB,WAArB,CACE,sBADF,EAEEP,OAFF,CADiB,EAKjBC,QAAQV,qBAAqBgB,WAArB,CACN,kBADM,EAENN,KAFM,CAAR,GAGI,IARa,CAAnB;AAUA,WAAOG,OAAP;AACD,GA7Ce;;AA+ChBI,cAAY,oBAASJ,OAAT,EAA0B;AACpC,QAAIK,MAAMjB,cAAcY,OAAd,CAAV;AACA,QAAI,CAACK,GAAL,EAAU;AAGR;AACD;;AAEDA,QAAI,CAAJ,EAAOC,MAAP;;AAEA,QAAIC,OAAOF,IAAI,CAAJ,CAAX,CAAmBE,QAAQA,KAAKD,MAAL,EAAR;AACnBlB,kBAAcY,OAAd,IAAyBQ,SAAzB;AACA,QAAIC,aAAa,IAAjB;AACA,SAAK,IAAIC,KAAK,CAAd,EAAiBA,KAAKtB,cAAca,MAApC,EAA4CS,IAA5C,EAAkD;AAChD,UAAItB,cAAcsB,EAAd,CAAJ,EAAuB;AACrBD,qBAAa,KAAb;AACD;AACF;AACD,QAAIA,UAAJ,EAAgB;AACdnB,kBAAYqB,aAAZ;AACD;AACF,GApEe;;AAsEhBA,iBAAe,yBAAW;AACxB,QAAItB,cAAJ,EAAoB;AAClBP,0BAAoB6B,aAApB;AACAtB,uBAAiB,KAAjB;AACA,WAAK,IAAIqB,KAAK,CAAd,EAAiBA,KAAKtB,cAAca,MAApC,EAA4CS,IAA5C,EAAkD;AAChD,YAAIL,MAAMjB,cAAcsB,EAAd,CAAV;AACA,YAAIL,GAAJ,EAAS;AACPnB,kBAAQ,mDAAR;AACAmB,cAAI,CAAJ,EAAOC,MAAP;;AAEA,cAAIC,OAAOF,IAAI,CAAJ,CAAX,CAAmBE,QAAQA,KAAKD,MAAL,EAAR;AACpB;AACF;AACDlB,sBAAgB,EAAhB;AACD;AACF;AArFe,CAAlB;;AAwFAwB,OAAOC,OAAP,GAAiBvB,WAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Geolocation\n * @flow\n */\n'use strict';\n\nconst NativeEventEmitter = require('NativeEventEmitter');\nconst RCTLocationObserver = require('NativeModules').LocationObserver;\n\nconst invariant = require('fbjs/lib/invariant');\nconst logError = require('logError');\nconst warning = require('fbjs/lib/warning');\n\nconst LocationEventEmitter = new NativeEventEmitter(RCTLocationObserver);\n\nvar subscriptions = [];\nvar updatesEnabled = false;\n\ntype GeoOptions = {\n  timeout: number,\n  maximumAge: number,\n  enableHighAccuracy: bool,\n  distanceFilter: number,\n}\n\n/**\n * The Geolocation API extends the web spec:\n * https://developer.mozilla.org/en-US/docs/Web/API/Geolocation\n *\n * As a browser polyfill, this API is available through the `navigator.geolocation`\n * global - you do not need to `import` it.\n *\n * ### iOS\n * You need to include the `NSLocationWhenInUseUsageDescription` key\n * in Info.plist to enable geolocation when using the app. Geolocation is\n * enabled by default when you create a project with `react-native init`.\n *\n * In order to enable geolocation in the background, you need to include the\n * 'NSLocationAlwaysUsageDescription' key in Info.plist and add location as\n * a background mode in the 'Capabilities' tab in Xcode.\n *\n * ### Android\n * To request access to location, you need to add the following line to your\n * app's `AndroidManifest.xml`:\n *\n * `<uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />`\n *\n * Android API >= 18 Positions will also contain a `mocked` boolean to indicate if position\n * was created from a mock provider.\n *\n */\nvar Geolocation = {\n\n  /*\n   * Invokes the success callback once with the latest location info.  Supported\n   * options: timeout (ms), maximumAge (ms), enableHighAccuracy (bool)\n   * On Android, if the location is cached this can return almost immediately,\n   * or it will request an update which might take a while.\n   */\n  getCurrentPosition: function(\n    geo_success: Function,\n    geo_error?: Function,\n    geo_options?: GeoOptions\n  ) {\n    invariant(\n      typeof geo_success === 'function',\n      'Must provide a valid geo_success callback.'\n    );\n    RCTLocationObserver.getCurrentPosition(\n      geo_options || {},\n      geo_success,\n      geo_error || logError\n    );\n  },\n\n  /*\n   * Invokes the success callback whenever the location changes.  Supported\n   * options: timeout (ms), maximumAge (ms), enableHighAccuracy (bool), distanceFilter(m)\n   */\n  watchPosition: function(success: Function, error?: Function, options?: GeoOptions): number {\n    if (!updatesEnabled) {\n      RCTLocationObserver.startObserving(options || {});\n      updatesEnabled = true;\n    }\n    var watchID = subscriptions.length;\n    subscriptions.push([\n      LocationEventEmitter.addListener(\n        'geolocationDidChange',\n        success\n      ),\n      error ? LocationEventEmitter.addListener(\n        'geolocationError',\n        error\n      ) : null,\n    ]);\n    return watchID;\n  },\n\n  clearWatch: function(watchID: number) {\n    var sub = subscriptions[watchID];\n    if (!sub) {\n      // Silently exit when the watchID is invalid or already cleared\n      // This is consistent with timers\n      return;\n    }\n\n    sub[0].remove();\n    // array element refinements not yet enabled in Flow\n    var sub1 = sub[1]; sub1 && sub1.remove();\n    subscriptions[watchID] = undefined;\n    var noWatchers = true;\n    for (var ii = 0; ii < subscriptions.length; ii++) {\n      if (subscriptions[ii]) {\n        noWatchers = false; // still valid subscriptions\n      }\n    }\n    if (noWatchers) {\n      Geolocation.stopObserving();\n    }\n  },\n\n  stopObserving: function() {\n    if (updatesEnabled) {\n      RCTLocationObserver.stopObserving();\n      updatesEnabled = false;\n      for (var ii = 0; ii < subscriptions.length; ii++) {\n        var sub = subscriptions[ii];\n        if (sub) {\n          warning('Called stopObserving with existing subscriptions.');\n          sub[0].remove();\n          // array element refinements not yet enabled in Flow\n          var sub1 = sub[1]; sub1 && sub1.remove();\n        }\n      }\n      subscriptions = [];\n    }\n  }\n};\n\nmodule.exports = Geolocation;\n"]}]