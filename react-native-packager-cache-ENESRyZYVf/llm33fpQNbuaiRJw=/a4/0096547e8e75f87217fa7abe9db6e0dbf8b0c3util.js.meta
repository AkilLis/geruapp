["f5a8e5c1d0d95d44bb79697c68a54053368043a9","617abc38e62f3121fa36d0210e046c85c3b58555",["tcomb-validation"],[380],{"version":3,"sources":["/var/www/geruapp/node_modules/tcomb-form-native/lib/util.js"],"names":["getOptionsOfEnum","getTypeInfo","humanize","merge","move","getTypeFromUnion","getComponentOptions","type","enums","meta","map","Object","keys","value","text","innerType","isMaybe","isSubtype","kind","innerGetValidationErrorMessage","Function","is","getValidationErrorMessage","path","context","result","validate","isValid","i","len","errors","length","expected","message","undefined","underscored","s","trim","replace","toLowerCase","capitalize","charAt","toUpperCase","slice","a","b","arr","fromIndex","toIndex","element","splice","UIDGenerator","seed","counter","containsUnion","getUnionConcreteType","concreteType","dispatch","process","env","NODE_ENV","assert","isType","stringify","getTypeName","maybe","name","subtype","predicate","getUnion","findIndex","options","defaultOptions","Nil","Array","union","index","types"],"mappings":"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","sourcesContent":["import t, { mixin } from 'tcomb-validation';\n\nexport function getOptionsOfEnum(type) {\n  const enums = type.meta.map;\n  return Object.keys(enums).map(value => {\n    return {\n      value,\n      text: enums[value]\n    };\n  });\n}\n\nexport function getTypeInfo(type) {\n  let innerType = type;\n  let isMaybe = false;\n  let isSubtype = false;\n  let kind;\n  let innerGetValidationErrorMessage;\n\n  while (innerType) {\n    kind = innerType.meta.kind;\n    if (t.Function.is(innerType.getValidationErrorMessage)) {\n      innerGetValidationErrorMessage = innerType.getValidationErrorMessage;\n    }\n    if (kind === 'maybe') {\n      isMaybe = true;\n      innerType = innerType.meta.type;\n      continue;\n    }\n    if (kind === 'subtype') {\n      isSubtype = true;\n      innerType = innerType.meta.type;\n      continue;\n    }\n    break;\n  }\n\n  const getValidationErrorMessage = innerGetValidationErrorMessage ? (value, path, context) => {\n    const result = t.validate(value, type, {path, context});\n    if (!result.isValid()) {\n      for (let i = 0, len = result.errors.length; i < len; i++ ) {\n        if (t.Function.is(result.errors[i].expected.getValidationErrorMessage)) {\n          return result.errors[i].message;\n        }\n      }\n      return innerGetValidationErrorMessage(value, path, context);\n    }\n  } : undefined;\n\n  return {\n    type,\n    isMaybe,\n    isSubtype,\n    innerType,\n    getValidationErrorMessage\n  };\n}\n\n// thanks to https://github.com/epeli/underscore.string\n\nfunction underscored(s) {\n  return s.trim().replace(/([a-z\\d])([A-Z]+)/g, '$1_$2').replace(/[-\\s]+/g, '_').toLowerCase();\n}\n\nfunction capitalize(s) {\n  return s.charAt(0).toUpperCase() + s.slice(1);\n}\n\nexport function humanize(s) {\n  return capitalize(underscored(s).replace(/_id$/, '').replace(/_/g, ' '));\n}\n\nexport function merge(a, b) {\n  return mixin(mixin({}, a), b, true);\n}\n\nexport function move(arr, fromIndex, toIndex) {\n  const element = arr.splice(fromIndex, 1)[0];\n  arr.splice(toIndex, 0, element);\n  return arr;\n}\n\nexport class UIDGenerator {\n\n  constructor(seed) {\n    this.seed = 'tfid-' + seed + '-';\n    this.counter = 0;\n  }\n\n  next() {\n    return this.seed + (this.counter++); // eslint-disable-line space-unary-ops\n  }\n\n}\n\nfunction containsUnion(type) {\n  switch (type.meta.kind) {\n  case 'union' :\n    return true;\n  case 'maybe' :\n  case 'subtype' :\n    return containsUnion(type.meta.type);\n  default :\n    return false;\n  }\n}\n\nfunction getUnionConcreteType(type, value) {\n  const kind = type.meta.kind;\n  if (kind === 'union') {\n    const concreteType = type.dispatch(value);\n    if (process.env.NODE_ENV !== 'production') {\n      t.assert(t.isType(concreteType), () => 'Invalid value ' + t.assert.stringify(value) + ' supplied to ' + t.getTypeName(type) + ' (no constructor returned by dispatch)' );\n    }\n    return concreteType;\n  } else if (kind === 'maybe') {\n    return t.maybe(getUnionConcreteType(type.meta.type, value), type.meta.name);\n  } else if (kind === 'subtype') {\n    return t.subtype(getUnionConcreteType(type.meta.type, value), type.meta.predicate, type.meta.name);\n  }\n}\n\nexport function getTypeFromUnion(type, value) {\n  if (containsUnion(type)) {\n    return getUnionConcreteType(type, value);\n  }\n  return type;\n}\n\nfunction getUnion(type) {\n  if (type.meta.kind === 'union') {\n    return type;\n  }\n  return getUnion(type.meta.type);\n}\n\nfunction findIndex(arr, element) {\n  for (let i = 0, len = arr.length; i < len; i++ ) {\n    if (arr[i] === element) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nexport function getComponentOptions(options, defaultOptions, value, type) {\n  if (t.Nil.is(options)) {\n    return defaultOptions;\n  }\n  if (t.Function.is(options)) {\n    return options(value);\n  }\n  if (t.Array.is(options) && containsUnion(type)) {\n    const union = getUnion(type);\n    const concreteType = union.dispatch(value);\n    const index = findIndex(union.meta.types, concreteType);\n    // recurse\n    return getComponentOptions(options[index], defaultOptions, value, concreteType);\n  }\n  return options;\n}\n\n\n"]}]