["e152f9791bed85359321701782d513df374aea4e","a0c30c94375e3a8980d35f38d54322d7fa130804",["BatchedBridge","fbjs/lib/invariant"],[44,87],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native/Libraries/Utilities/RCTLog.js"],"names":["BatchedBridge","require","invariant","levelsMap","log","info","warn","error","fatal","RCTLog","global","nativeLoggingHook","logToConsole","level","logFn","Object","keys","args","registerCallableModule","module","exports"],"mappings":";AAWA;;AAEA,IAAMA,gBAAgBC,QAAQ,eAAR,CAAtB;;AAEA,IAAMC,YAAYD,QAAQ,oBAAR,CAAlB;;AAEA,IAAME,YAAY;AAChBC,OAAK,KADW;AAEhBC,QAAM,MAFU;AAGhBC,QAAM,MAHU;AAIhBC,SAAO,OAJS;AAKhBC,SAAO;AALS,CAAlB;;IAQMC,M;;;;;;;wCAE8B;AAChC,UAAI,OAAOC,OAAOC,iBAAd,KAAoC,WAAxC,EAAqD;AAEnDF,eAAOG,YAAP;AACD;;AAED,aAAO,IAAP;AACD;;;iCAGmBC,K,EAAgB;AAAA;;AAClC,UAAMC,QAAQX,UAAUU,KAAV,CAAd;AACAX,gBACEY,KADF,EAEE,YAAYD,KAAZ,GAAoB,eAApB,GAAsCE,OAAOC,IAAP,CAAYb,SAAZ,CAFxC;;AAFkC,wCAANc,IAAM;AAANA,YAAM;AAAA;;AAOlC,2BAAQH,KAAR,kBAAkBG,IAAlB;;AAEA,aAAO,IAAP;AACD;;;;;AAGHjB,cAAckB,sBAAd,CACE,QADF,EAEET,MAFF;;AAKAU,OAAOC,OAAP,GAAiBX,MAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule RCTLog\n * @flow\n */\n'use strict';\n\nconst BatchedBridge = require('BatchedBridge');\n\nconst invariant = require('fbjs/lib/invariant');\n\nconst levelsMap = {\n  log: 'log',\n  info: 'info',\n  warn: 'warn',\n  error: 'error',\n  fatal: 'error',\n};\n\nclass RCTLog {\n  // level one of log, info, warn, error, mustfix\n  static logIfNoNativeHook(...args) {\n    if (typeof global.nativeLoggingHook === 'undefined') {\n      // We already printed in xcode, so only log here if using a js debugger\n      RCTLog.logToConsole(...args);\n    }\n\n    return true;\n  }\n\n  // Log to console regardless of nativeLoggingHook\n  static logToConsole(level, ...args) {\n    const logFn = levelsMap[level];\n    invariant(\n      logFn,\n      'Level \"' + level + '\" not one of ' + Object.keys(levelsMap)\n    );\n\n    console[logFn](...args);\n\n    return true;\n  }\n}\n\nBatchedBridge.registerCallableModule(\n  'RCTLog',\n  RCTLog\n);\n\nmodule.exports = RCTLog;\n"]}]