["f0d099731f07fe69e5cb3cff2be0ce0852ab9982","570ee75a67008f151b01579d031c5bab8c513776",["FormData","NativeEventEmitter","NativeModules","convertRequestBody"],[39,85,142,204],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native/Libraries/Network/RCTNetworking.android.js"],"names":["FormData","require","NativeEventEmitter","RCTNetworkingNative","Networking","convertRequestBody","convertHeadersMapToArray","headers","headerArray","name","push","_requestId","generateRequestId","RCTNetworking","method","trackingName","url","data","responseType","incrementalUpdates","timeout","callback","body","formData","map","part","requestId","sendRequest","abortRequest","clearCookies","module","exports"],"mappings":";AAWA;;AAIA,IAAMA,WAAWC,QAAQ,UAAR,CAAjB;AACA,IAAMC,qBAAqBD,QAAQ,oBAAR,CAA3B;AACA,IAAME,sBAAsBF,QAAQ,eAAR,EAAyBG,UAArD;AACA,IAAMC,qBAAqBJ,QAAQ,oBAAR,CAA3B;;AAQA,SAASK,wBAAT,CAAkCC,OAAlC,EAAkE;AAChE,MAAMC,cAAc,EAApB;AACA,OAAK,IAAMC,IAAX,IAAmBF,OAAnB,EAA4B;AAC1BC,gBAAYE,IAAZ,CAAiB,CAACD,IAAD,EAAOF,QAAQE,IAAR,CAAP,CAAjB;AACD;AACD,SAAOD,WAAP;AACD;;AAED,IAAIG,aAAa,CAAjB;AACA,SAASC,iBAAT,GAAqC;AACnC,SAAOD,YAAP;AACD;;IAMKE,a;;;AAEJ,2BAAc;AAAA;AAAA,qIACNV,mBADM;AAEb;;;;gCAGCW,M,EACAC,Y,EACAC,G,EACAT,O,EACAU,I,EACAC,Y,EACAC,kB,EACAC,O,EACAC,Q,EACA;AACA,UAAMC,OAAOjB,mBAAmBY,IAAnB,CAAb;AACA,UAAIK,QAAQA,KAAKC,QAAjB,EAA2B;AACzBD,aAAKC,QAAL,GAAgBD,KAAKC,QAAL,CAAcC,GAAd,CAAkB,UAACC,IAAD;AAAA,0CAC7BA,IAD6B;AAEhClB,qBAASD,yBAAyBmB,KAAKlB,OAA9B;AAFuB;AAAA,SAAlB,CAAhB;AAID;AACD,UAAMmB,YAAYd,mBAAlB;AACAT,0BAAoBwB,WAApB,CACEb,MADF,EAEEE,GAFF,EAGEU,SAHF,EAIEpB,yBAAyBC,OAAzB,CAJF,2BAKMe,IALN,IAKYP,0BALZ,KAMEG,YANF,EAOEC,kBAPF,EAQEC,OARF;AAUAC,eAASK,SAAT;AACD;;;iCAEYA,S,EAAmB;AAC9BvB,0BAAoByB,YAApB,CAAiCF,SAAjC;AACD;;;iCAEYL,Q,EAAoC;AAC/ClB,0BAAoB0B,YAApB,CAAiCR,QAAjC;AACD;;;EA5CyBnB,kB;;AA+C5B4B,OAAOC,OAAP,GAAiB,IAAIlB,aAAJ,EAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule RCTNetworking\n * @flow\n */\n'use strict';\n\n// Do not require the native RCTNetworking module directly! Use this wrapper module instead.\n// It will add the necessary requestId, so that you don't have to generate it yourself.\nconst FormData = require('FormData');\nconst NativeEventEmitter = require('NativeEventEmitter');\nconst RCTNetworkingNative = require('NativeModules').Networking;\nconst convertRequestBody = require('convertRequestBody');\n\nimport type {RequestBody} from 'convertRequestBody';\n\ntype Header = [string, string];\n\n// Convert FormData headers to arrays, which are easier to consume in\n// native on Android.\nfunction convertHeadersMapToArray(headers: Object): Array<Header> {\n  const headerArray = [];\n  for (const name in headers) {\n    headerArray.push([name, headers[name]]);\n  }\n  return headerArray;\n}\n\nlet _requestId = 1;\nfunction generateRequestId(): number {\n  return _requestId++;\n}\n\n/**\n * This class is a wrapper around the native RCTNetworking module. It adds a necessary unique\n * requestId to each network request that can be used to abort that request later on.\n */\nclass RCTNetworking extends NativeEventEmitter {\n\n  constructor() {\n    super(RCTNetworkingNative);\n  }\n\n  sendRequest(\n    method: string,\n    trackingName: string,\n    url: string,\n    headers: Object,\n    data: RequestBody,\n    responseType: 'text' | 'base64',\n    incrementalUpdates: boolean,\n    timeout: number,\n    callback: (requestId: number) => any\n  ) {\n    const body = convertRequestBody(data);\n    if (body && body.formData) {\n      body.formData = body.formData.map((part) => ({\n        ...part,\n        headers: convertHeadersMapToArray(part.headers),\n      }));\n    }\n    const requestId = generateRequestId();\n    RCTNetworkingNative.sendRequest(\n      method,\n      url,\n      requestId,\n      convertHeadersMapToArray(headers),\n      {...body, trackingName},\n      responseType,\n      incrementalUpdates,\n      timeout\n    );\n    callback(requestId);\n  }\n\n  abortRequest(requestId: number) {\n    RCTNetworkingNative.abortRequest(requestId);\n  }\n\n  clearCookies(callback: (result: boolean) => any) {\n    RCTNetworkingNative.clearCookies(callback);\n  }\n}\n\nmodule.exports = new RCTNetworking();\n"]}]