["62f2b51974c839767e997bfecbe96b96bf6b81a0","43581a45739f9b0ef507e8d44b2cf3cba7bfe9e2",["fbjs/lib/warning"],[39],{"version":3,"sources":["/var/www/geruapp/node_modules/react/lib/ReactNoopUpdateQueue.js"],"names":["warning","require","warnNoop","publicInstance","callerName","process","env","NODE_ENV","constructor","displayName","name","ReactNoopUpdateQueue","isMounted","enqueueForceUpdate","callback","enqueueReplaceState","completeState","enqueueSetState","partialState","module","exports"],"mappings":";;AAUA;;AAEA,IAAIA,UAAUC,QAAQ,kBAAR,CAAd;;AAEA,SAASC,QAAT,CAAkBC,cAAlB,EAAkCC,UAAlC,EAA8C;AAC5C,MAAIC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,QAAIC,cAAcL,eAAeK,WAAjC;AACAH,YAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCP,QAAQ,KAAR,EAAe,+DAA+D,gEAA/D,GAAkI,iEAAjJ,EAAoNI,UAApN,EAAgOA,UAAhO,EAA4OI,gBAAgBA,YAAYC,WAAZ,IAA2BD,YAAYE,IAAvD,KAAgE,YAA5S,CAAxC,GAAoW,KAAK,CAAzW;AACD;AACF;;AAKD,IAAIC,uBAAuB;AAQzBC,aAAW,mBAAUT,cAAV,EAA0B;AACnC,WAAO,KAAP;AACD,GAVwB;;AA2BzBU,sBAAoB,4BAAUV,cAAV,EAA0BW,QAA1B,EAAoCV,UAApC,EAAgD;AAClEF,aAASC,cAAT,EAAyB,aAAzB;AACD,GA7BwB;;AA4CzBY,uBAAqB,6BAAUZ,cAAV,EAA0Ba,aAA1B,EAAyCF,QAAzC,EAAmDV,UAAnD,EAA+D;AAClFF,aAASC,cAAT,EAAyB,cAAzB;AACD,GA9CwB;;AA4DzBc,mBAAiB,yBAAUd,cAAV,EAA0Be,YAA1B,EAAwCJ,QAAxC,EAAkDV,UAAlD,EAA8D;AAC7EF,aAASC,cAAT,EAAyB,UAAzB;AACD;AA9DwB,CAA3B;;AAiEAgB,OAAOC,OAAP,GAAiBT,oBAAjB","sourcesContent":["/**\n * Copyright 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nvar warning = require('fbjs/lib/warning');\n\nfunction warnNoop(publicInstance, callerName) {\n  if (process.env.NODE_ENV !== 'production') {\n    var constructor = publicInstance.constructor;\n    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op.\\n\\nPlease check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;\n  }\n}\n\n/**\n * This is the abstract API for an update queue.\n */\nvar ReactNoopUpdateQueue = {\n  /**\n   * Checks whether or not this composite component is mounted.\n   * @param {ReactClass} publicInstance The instance we want to test.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */\n  isMounted: function (publicInstance) {\n    return false;\n  },\n\n  /**\n   * Forces an update. This should only be invoked when it is known with\n   * certainty that we are **not** in a DOM transaction.\n   *\n   * You may want to call this when you know that some deeper aspect of the\n   * component's state has changed but `setState` was not called.\n   *\n   * This will not invoke `shouldComponentUpdate`, but it will invoke\n   * `componentWillUpdate` and `componentDidUpdate`.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} Name of the calling function in the public API.\n   * @internal\n   */\n  enqueueForceUpdate: function (publicInstance, callback, callerName) {\n    warnNoop(publicInstance, 'forceUpdate');\n  },\n\n  /**\n   * Replaces all of the state. Always use this or `setState` to mutate state.\n   * You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} completeState Next state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} Name of the calling function in the public API.\n   * @internal\n   */\n  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {\n    warnNoop(publicInstance, 'replaceState');\n  },\n\n  /**\n   * Sets a subset of the state. This only exists because _pendingState is\n   * internal. This provides a merging strategy that is not available to deep\n   * properties which is confusing. TODO: Expose pendingState or don't use it\n   * during the merge.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} partialState Next partial state to be merged with state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} Name of the calling function in the public API.\n   * @internal\n   */\n  enqueueSetState: function (publicInstance, partialState, callback, callerName) {\n    warnNoop(publicInstance, 'setState');\n  }\n};\n\nmodule.exports = ReactNoopUpdateQueue;"]}]