["91e5d32197d1237a30149170931f1d46e9a9a303","ad38470ed3f6409aadf0f768d57328d0da2ef071",["ReactNativeComponentTree","ReactNativeTagHandles","UIManager","fbjs/lib/invariant"],[56,121,171,210],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native/Libraries/Renderer/src/renderers/native/ReactNativeTextComponent.js"],"names":["ReactNativeComponentTree","require","ReactNativeTagHandles","UIManager","invariant","ReactNativeTextComponent","text","_currentElement","_stringText","_hostParent","_rootNodeID","prototype","mountComponent","transaction","hostParent","hostContainerInfo","context","isInAParentText","tag","allocateTag","nativeTopRootTag","_tag","createView","precacheNode","getHostNode","receiveComponent","nextText","nextStringText","updateView","unmountComponent","uncacheNode","module","exports"],"mappings":";;AAWA;;AAEA,IAAIA,2BAA2BC,QAAQ,0BAAR,CAA/B;AACA,IAAIC,wBAAwBD,QAAQ,uBAAR,CAA5B;AACA,IAAIE,YAAYF,QAAQ,WAAR,CAAhB;;AAEA,IAAIG,YAAYH,QAAQ,oBAAR,CAAhB;;AAEA,IAAII,2BAA2B,SAA3BA,wBAA2B,CAASC,IAAT,EAAe;AAE5C,OAAKC,eAAL,GAAuBD,IAAvB;AACA,OAAKE,WAAL,GAAmB,KAAKF,IAAxB;AACA,OAAKG,WAAL,GAAmB,IAAnB;AACA,OAAKC,WAAL,GAAmB,CAAnB;AACD,CAND;;AAQA,qBAAcL,yBAAyBM,SAAvC,EAAkD;AAChDC,kBAAgB,wBACdC,WADc,EAEdC,UAFc,EAGdC,iBAHc,EAIdC,OAJc,EAKd;AAEAZ,cACEY,QAAQC,eADV,EAEE,+DAFF,EAGE,KAAKT,WAHP;AAKA,SAAKC,WAAL,GAAmBK,UAAnB;AACA,QAAII,MAAMhB,sBAAsBiB,WAAtB,EAAV;AACA,SAAKT,WAAL,GAAmBQ,GAAnB;AACA,QAAIE,mBAAmBL,kBAAkBM,IAAzC;AACAlB,cAAUmB,UAAV,CAAqBJ,GAArB,EAA0B,YAA1B,EAAwCE,gBAAxC,EAA0D;AACxDd,YAAM,KAAKE;AAD6C,KAA1D;;AAIAR,6BAAyBuB,YAAzB,CAAsC,IAAtC,EAA4CL,GAA5C;;AAEA,WAAOA,GAAP;AACD,GAxB+C;;AA0BhDM,eAAa,uBAAW;AACtB,WAAO,KAAKd,WAAZ;AACD,GA5B+C;;AA8BhDe,oBAAkB,0BAASC,QAAT,EAAmBb,WAAnB,EAAgCG,OAAhC,EAAyC;AACzD,QAAIU,aAAa,KAAKnB,eAAtB,EAAuC;AACrC,WAAKA,eAAL,GAAuBmB,QAAvB;AACA,UAAIC,iBAAiB,KAAKD,QAA1B;AACA,UAAIC,mBAAmB,KAAKnB,WAA5B,EAAyC;AACvC,aAAKA,WAAL,GAAmBmB,cAAnB;AACAxB,kBAAUyB,UAAV,CAAqB,KAAKlB,WAA1B,EAAuC,YAAvC,EAAqD;AACnDJ,gBAAM,KAAKE;AADwC,SAArD;AAGD;AACF;AACF,GAzC+C;;AA2ChDqB,oBAAkB,4BAAW;AAC3B7B,6BAAyB8B,WAAzB,CAAqC,IAArC;AACA,SAAKvB,eAAL,GAAuB,IAAvB;AACA,SAAKC,WAAL,GAAmB,IAAnB;AACA,SAAKE,WAAL,GAAmB,CAAnB;AACD;AAhD+C,CAAlD;;AAmDAqB,OAAOC,OAAP,GAAiB3B,wBAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactNativeTextComponent\n */\n\n'use strict';\n\nvar ReactNativeComponentTree = require('ReactNativeComponentTree');\nvar ReactNativeTagHandles = require('ReactNativeTagHandles');\nvar UIManager = require('UIManager');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar ReactNativeTextComponent = function(text) {\n  // This is really a ReactText (ReactNode), not a ReactElement\n  this._currentElement = text;\n  this._stringText = '' + text;\n  this._hostParent = null;\n  this._rootNodeID = 0;\n};\n\nObject.assign(ReactNativeTextComponent.prototype, {\n  mountComponent: function(\n    transaction,\n    hostParent,\n    hostContainerInfo,\n    context,\n  ) {\n    // TODO: hostParent should have this context already. Stop abusing context.\n    invariant(\n      context.isInAParentText,\n      'RawText \"%s\" must be wrapped in an explicit <Text> component.',\n      this._stringText,\n    );\n    this._hostParent = hostParent;\n    var tag = ReactNativeTagHandles.allocateTag();\n    this._rootNodeID = tag;\n    var nativeTopRootTag = hostContainerInfo._tag;\n    UIManager.createView(tag, 'RCTRawText', nativeTopRootTag, {\n      text: this._stringText,\n    });\n\n    ReactNativeComponentTree.precacheNode(this, tag);\n\n    return tag;\n  },\n\n  getHostNode: function() {\n    return this._rootNodeID;\n  },\n\n  receiveComponent: function(nextText, transaction, context) {\n    if (nextText !== this._currentElement) {\n      this._currentElement = nextText;\n      var nextStringText = '' + nextText;\n      if (nextStringText !== this._stringText) {\n        this._stringText = nextStringText;\n        UIManager.updateView(this._rootNodeID, 'RCTRawText', {\n          text: this._stringText,\n        });\n      }\n    }\n  },\n\n  unmountComponent: function() {\n    ReactNativeComponentTree.uncacheNode(this);\n    this._currentElement = null;\n    this._stringText = null;\n    this._rootNodeID = 0;\n  },\n});\n\nmodule.exports = ReactNativeTextComponent;\n"]}]