["61703ec6184be4976ff971b6a90eb0955b20bbc2","7ba985f83137f80330ec15029b7a92e38543162d",["ColorPropType","NativeMethodsMixin","Platform","React","StyleSheet","ViewPropTypes","requireNativeComponent"],[44,95,141,174,209,252,308],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native/Libraries/Components/Switch/Switch.js"],"names":["ColorPropType","require","NativeMethodsMixin","Platform","React","StyleSheet","ViewPropTypes","requireNativeComponent","PropTypes","Switch","createClass","propTypes","value","bool","disabled","onValueChange","func","testID","string","tintColor","onTintColor","thumbTintColor","getDefaultProps","mixins","_rctSwitch","_onChange","event","OS","setNativeProps","on","props","onChange","nativeEvent","render","onStartShouldSetResponder","onResponderTerminationRequest","enabled","style","trackTintColor","styles","rctSwitchIOS","ref","create","height","width","RCTSwitch","nativeOnly","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Switch\n * @flow\n */\n'use strict';\n\nvar ColorPropType = require('ColorPropType');\nvar NativeMethodsMixin = require('NativeMethodsMixin');\nvar Platform = require('Platform');\nvar React = require('React');\nvar StyleSheet = require('StyleSheet');\nconst ViewPropTypes = require('ViewPropTypes');\n\nvar requireNativeComponent = require('requireNativeComponent');\n\nvar { PropTypes } = React;\n\ntype DefaultProps = {\n  value: boolean,\n  disabled: boolean,\n};\n\n/**\n * Renders a boolean input.\n *\n * This is a controlled component that requires an `onValueChange` callback that\n * updates the `value` prop in order for the component to reflect user actions.\n * If the `value` prop is not updated, the component will continue to render\n * the supplied `value` prop instead of the expected result of any user actions.\n *\n * @keyword checkbox\n * @keyword toggle\n */\n// $FlowFixMe(>=0.41.0)\nvar Switch = React.createClass({\n  propTypes: {\n    ...ViewPropTypes,\n    /**\n     * The value of the switch.  If true the switch will be turned on.\n     * Default value is false.\n     */\n    value: PropTypes.bool,\n    /**\n     * If true the user won't be able to toggle the switch.\n     * Default value is false.\n     */\n    disabled: PropTypes.bool,\n    /**\n     * Invoked with the new value when the value changes.\n     */\n    onValueChange: PropTypes.func,\n    /**\n     * Used to locate this view in end-to-end tests.\n     */\n    testID: PropTypes.string,\n\n    /**\n     * Border color on iOS and background color on Android when the switch is turned off.\n     */\n    tintColor: ColorPropType,\n    /**\n     * Background color when the switch is turned on.\n     */\n    onTintColor: ColorPropType,\n    /**\n     * Color of the foreground switch grip.\n     */\n    thumbTintColor: ColorPropType,\n  },\n\n  getDefaultProps: function(): DefaultProps {\n    return {\n      value: false,\n      disabled: false,\n    };\n  },\n\n  mixins: [NativeMethodsMixin],\n\n  _rctSwitch: {},\n  _onChange: function(event: Object) {\n    if (Platform.OS === 'android') {\n      this._rctSwitch.setNativeProps({on: this.props.value});\n    } else {\n      this._rctSwitch.setNativeProps({value: this.props.value});\n    }\n    //Change the props after the native props are set in case the props change removes the component\n    this.props.onChange && this.props.onChange(event);\n    this.props.onValueChange && this.props.onValueChange(event.nativeEvent.value);\n  },\n\n  render: function() {\n    var props = {...this.props};\n    props.onStartShouldSetResponder = () => true;\n    props.onResponderTerminationRequest = () => false;\n    if (Platform.OS === 'android') {\n      props.enabled = !this.props.disabled;\n      props.on = this.props.value;\n      props.style = this.props.style;\n      props.trackTintColor = this.props.value ? this.props.onTintColor : this.props.tintColor;\n    } else if (Platform.OS === 'ios') {\n      props.style = [styles.rctSwitchIOS, this.props.style];\n    }\n    return (\n      <RCTSwitch\n        {...props}\n        ref={(ref) => { this._rctSwitch = ref; }}\n        onChange={this._onChange}\n      />\n    );\n  },\n});\n\nvar styles = StyleSheet.create({\n  rctSwitchIOS: {\n    height: 31,\n    width: 51,\n  }\n});\n\nif (Platform.OS === 'android') {\n  var RCTSwitch = requireNativeComponent('AndroidSwitch', Switch, {\n    nativeOnly: {\n      onChange: true,\n      on: true,\n      enabled: true,\n      trackTintColor: true,\n    }\n  });\n} else {\n  var RCTSwitch = requireNativeComponent('RCTSwitch', Switch, {\n    nativeOnly: {\n      onChange: true\n    }\n  });\n}\n\nmodule.exports = Switch;\n"]}]