["ddeaf000676dcdd83f005bf46075e6db9b009b81","d6b44f85b14f7c28a6876ea981d6074c3970cf6c",["fbjs/lib/invariant"],[41],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native/Libraries/Renderer/src/renderers/shared/stack/reconciler/ReactHostComponent.js"],"names":["invariant","require","genericComponentClass","textComponentClass","ReactHostComponentInjection","injectGenericComponentClass","componentClass","injectTextComponentClass","createInternalComponent","element","type","createInstanceForText","text","isTextComponent","component","ReactHostComponent","injection","module","exports"],"mappings":";;AAWA;;AAEA,IAAIA,YAAYC,QAAQ,oBAAR,CAAhB;;AAEA,IAAIC,wBAAwB,IAA5B;AACA,IAAIC,qBAAqB,IAAzB;;AAEA,IAAIC,8BAA8B;AAGhCC,+BAA6B,qCAASC,cAAT,EAAyB;AACpDJ,4BAAwBI,cAAxB;AACD,GAL+B;;AAQhCC,4BAA0B,kCAASD,cAAT,EAAyB;AACjDH,yBAAqBG,cAArB;AACD;AAV+B,CAAlC;;AAmBA,SAASE,uBAAT,CAAiCC,OAAjC,EAA0C;AACxCT,YACEE,qBADF,EAEE,iDAFF,EAGEO,QAAQC,IAHV;AAKA,SAAO,IAAIR,qBAAJ,CAA0BO,OAA1B,CAAP;AACD;;AAMD,SAASE,qBAAT,CAA+BC,IAA/B,EAAqC;AACnC,SAAO,IAAIT,kBAAJ,CAAuBS,IAAvB,CAAP;AACD;;AAMD,SAASC,eAAT,CAAyBC,SAAzB,EAAoC;AAClC,SAAOA,qBAAqBX,kBAA5B;AACD;;AAED,IAAIY,qBAAqB;AACvBP,2BAAyBA,uBADF;AAEvBG,yBAAuBA,qBAFA;AAGvBE,mBAAiBA,eAHM;AAIvBG,aAAWZ;AAJY,CAAzB;;AAOAa,OAAOC,OAAP,GAAiBH,kBAAjB","sourcesContent":["/**\n * Copyright 2014-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactHostComponent\n */\n\n'use strict';\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar genericComponentClass = null;\nvar textComponentClass = null;\n\nvar ReactHostComponentInjection = {\n  // This accepts a class that receives the tag string. This is a catch all\n  // that can render any kind of tag.\n  injectGenericComponentClass: function(componentClass) {\n    genericComponentClass = componentClass;\n  },\n  // This accepts a text component class that takes the text string to be\n  // rendered as props.\n  injectTextComponentClass: function(componentClass) {\n    textComponentClass = componentClass;\n  },\n};\n\n/**\n * Get a host internal component class for a specific tag.\n *\n * @param {ReactElement} element The element to create.\n * @return {function} The internal class constructor function.\n */\nfunction createInternalComponent(element) {\n  invariant(\n    genericComponentClass,\n    'There is no registered component for the tag %s',\n    element.type,\n  );\n  return new genericComponentClass(element);\n}\n\n/**\n * @param {ReactText} text\n * @return {ReactComponent}\n */\nfunction createInstanceForText(text) {\n  return new textComponentClass(text);\n}\n\n/**\n * @param {ReactComponent} component\n * @return {boolean}\n */\nfunction isTextComponent(component) {\n  return component instanceof textComponentClass;\n}\n\nvar ReactHostComponent = {\n  createInternalComponent: createInternalComponent,\n  createInstanceForText: createInstanceForText,\n  isTextComponent: isTextComponent,\n  injection: ReactHostComponentInjection,\n};\n\nmodule.exports = ReactHostComponent;\n"]}]