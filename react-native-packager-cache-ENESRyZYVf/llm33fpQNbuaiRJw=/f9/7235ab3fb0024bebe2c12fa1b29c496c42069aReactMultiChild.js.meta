["89c3663c3bf31eba0a02f533e6bfff9aeaa8ed84","b6515595abc74d6cc47145e5ed69a483e5b37c9a",["ReactComponentEnvironment","ReactInstanceMap","ReactInstrumentation","react/lib/ReactCurrentOwner","ReactReconciler","ReactChildReconciler","fbjs/lib/emptyFunction","flattenChildren","fbjs/lib/invariant"],[57,118,174,232,294,349,403,460,504],{"version":3,"sources":["/var/www/geruapp/node_modules/react-native/Libraries/Renderer/src/renderers/shared/stack/reconciler/ReactMultiChild.js"],"names":["ReactComponentEnvironment","require","ReactInstanceMap","ReactInstrumentation","ReactCurrentOwner","ReactReconciler","ReactChildReconciler","emptyFunction","flattenChildren","invariant","makeInsertMarkup","markup","afterNode","toIndex","type","content","fromIndex","fromNode","makeMove","child","_mountIndex","getHostNode","makeRemove","node","makeSetMarkup","makeTextContent","textContent","enqueue","queue","update","push","processQueue","inst","updateQueue","processChildrenUpdates","setChildrenForInstrumentation","__DEV__","getDebugID","_debugID","internal","get","children","debugID","debugTool","onSetChildren","Object","keys","map","key","ReactMultiChild","_reconcilerInstantiateChildren","nestedChildren","transaction","context","selfDebugID","_currentElement","current","_owner","instantiateChildren","_reconcilerUpdateChildren","prevChildren","nextNestedChildrenElements","mountImages","removedNodes","nextChildren","updateChildren","_hostContainerInfo","mountChildren","_renderedChildren","index","name","hasOwnProperty","mountImage","mountComponent","call","updateTextContent","nextContent","unmountChildren","updates","updateMarkup","nextMarkup","_updateChildren","nextIndex","lastIndex","nextMountIndex","lastPlacedNode","prevChild","nextChild","moveChild","Math","max","_mountChildAtIndex","_unmountChild","safely","skipLifecycle","renderedChildren","createChild","removeChild","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactMultiChild\n */\n\n'use strict';\n\nvar ReactComponentEnvironment = require('ReactComponentEnvironment');\nvar ReactInstanceMap = require('ReactInstanceMap');\nvar ReactInstrumentation = require('ReactInstrumentation');\n\nvar ReactCurrentOwner = require('react/lib/ReactCurrentOwner');\nvar ReactReconciler = require('ReactReconciler');\nvar ReactChildReconciler = require('ReactChildReconciler');\n\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar flattenChildren = require('flattenChildren');\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * Make an update for markup to be rendered and inserted at a supplied index.\n *\n * @param {string} markup Markup that renders into an element.\n * @param {number} toIndex Destination index.\n * @private\n */\nfunction makeInsertMarkup(markup, afterNode, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  return {\n    type: 'INSERT_MARKUP',\n    content: markup,\n    fromIndex: null,\n    fromNode: null,\n    toIndex: toIndex,\n    afterNode: afterNode,\n  };\n}\n\n/**\n * Make an update for moving an existing element to another index.\n *\n * @param {number} fromIndex Source index of the existing element.\n * @param {number} toIndex Destination index of the element.\n * @private\n */\nfunction makeMove(child, afterNode, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  return {\n    type: 'MOVE_EXISTING',\n    content: null,\n    fromIndex: child._mountIndex,\n    fromNode: ReactReconciler.getHostNode(child),\n    toIndex: toIndex,\n    afterNode: afterNode,\n  };\n}\n\n/**\n * Make an update for removing an element at an index.\n *\n * @param {number} fromIndex Index of the element to remove.\n * @private\n */\nfunction makeRemove(child, node) {\n  // NOTE: Null values reduce hidden classes.\n  return {\n    type: 'REMOVE_NODE',\n    content: null,\n    fromIndex: child._mountIndex,\n    fromNode: node,\n    toIndex: null,\n    afterNode: null,\n  };\n}\n\n/**\n * Make an update for setting the markup of a node.\n *\n * @param {string} markup Markup that renders into an element.\n * @private\n */\nfunction makeSetMarkup(markup) {\n  // NOTE: Null values reduce hidden classes.\n  return {\n    type: 'SET_MARKUP',\n    content: markup,\n    fromIndex: null,\n    fromNode: null,\n    toIndex: null,\n    afterNode: null,\n  };\n}\n\n/**\n * Make an update for setting the text content.\n *\n * @param {string} textContent Text content to set.\n * @private\n */\nfunction makeTextContent(textContent) {\n  // NOTE: Null values reduce hidden classes.\n  return {\n    type: 'TEXT_CONTENT',\n    content: textContent,\n    fromIndex: null,\n    fromNode: null,\n    toIndex: null,\n    afterNode: null,\n  };\n}\n\n/**\n * Push an update, if any, onto the queue. Creates a new queue if none is\n * passed and always returns the queue. Mutative.\n */\nfunction enqueue(queue, update) {\n  if (update) {\n    queue = queue || [];\n    queue.push(update);\n  }\n  return queue;\n}\n\n/**\n * Processes any enqueued updates.\n *\n * @private\n */\nfunction processQueue(inst, updateQueue) {\n  ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);\n}\n\nvar setChildrenForInstrumentation = emptyFunction;\nif (__DEV__) {\n  var getDebugID = function(inst) {\n    if (!inst._debugID) {\n      // Check for ART-like instances. TODO: This is silly/gross.\n      var internal;\n      if ((internal = ReactInstanceMap.get(inst))) {\n        inst = internal;\n      }\n    }\n    return inst._debugID;\n  };\n  setChildrenForInstrumentation = function(children) {\n    var debugID = getDebugID(this);\n    // TODO: React Native empty components are also multichild.\n    // This means they still get into this method but don't have _debugID.\n    if (debugID !== 0) {\n      ReactInstrumentation.debugTool.onSetChildren(\n        debugID,\n        children\n          ? Object.keys(children).map(key => children[key]._debugID)\n          : [],\n      );\n    }\n  };\n}\n\n/**\n * Provides common functionality for components that must reconcile multiple\n * children. This is used by `ReactDOMComponent` to mount, update, and\n * unmount child components.\n */\nvar ReactMultiChild = {\n  _reconcilerInstantiateChildren: function(\n    nestedChildren,\n    transaction,\n    context,\n  ) {\n    if (__DEV__) {\n      var selfDebugID = getDebugID(this);\n      if (this._currentElement) {\n        try {\n          ReactCurrentOwner.current = this._currentElement._owner;\n          return ReactChildReconciler.instantiateChildren(\n            nestedChildren,\n            transaction,\n            context,\n            selfDebugID,\n          );\n        } finally {\n          ReactCurrentOwner.current = null;\n        }\n      }\n    }\n    return ReactChildReconciler.instantiateChildren(\n      nestedChildren,\n      transaction,\n      context,\n    );\n  },\n\n  _reconcilerUpdateChildren: function(\n    prevChildren,\n    nextNestedChildrenElements,\n    mountImages,\n    removedNodes,\n    transaction,\n    context,\n  ) {\n    var nextChildren;\n    var selfDebugID = 0;\n    if (__DEV__) {\n      selfDebugID = getDebugID(this);\n      if (this._currentElement) {\n        try {\n          ReactCurrentOwner.current = this._currentElement._owner;\n          nextChildren = flattenChildren(\n            nextNestedChildrenElements,\n            selfDebugID,\n          );\n        } finally {\n          ReactCurrentOwner.current = null;\n        }\n        ReactChildReconciler.updateChildren(\n          prevChildren,\n          nextChildren,\n          mountImages,\n          removedNodes,\n          transaction,\n          this,\n          this._hostContainerInfo,\n          context,\n          selfDebugID,\n        );\n        return nextChildren;\n      }\n    }\n    nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);\n    ReactChildReconciler.updateChildren(\n      prevChildren,\n      nextChildren,\n      mountImages,\n      removedNodes,\n      transaction,\n      this,\n      this._hostContainerInfo,\n      context,\n      selfDebugID,\n    );\n    return nextChildren;\n  },\n\n  /**\n   * Generates a \"mount image\" for each of the supplied children. In the case\n   * of `ReactDOMComponent`, a mount image is a string of markup.\n   *\n   * @param {?object} nestedChildren Nested child maps.\n   * @return {array} An array of mounted representations.\n   * @internal\n   */\n  mountChildren: function(nestedChildren, transaction, context) {\n    var children = this._reconcilerInstantiateChildren(\n      nestedChildren,\n      transaction,\n      context,\n    );\n    this._renderedChildren = children;\n\n    var mountImages = [];\n    var index = 0;\n    for (var name in children) {\n      if (children.hasOwnProperty(name)) {\n        var child = children[name];\n        var selfDebugID = 0;\n        if (__DEV__) {\n          selfDebugID = getDebugID(this);\n        }\n        var mountImage = ReactReconciler.mountComponent(\n          child,\n          transaction,\n          this,\n          this._hostContainerInfo,\n          context,\n          selfDebugID,\n        );\n        child._mountIndex = index++;\n        mountImages.push(mountImage);\n      }\n    }\n\n    if (__DEV__) {\n      setChildrenForInstrumentation.call(this, children);\n    }\n\n    return mountImages;\n  },\n\n  /**\n   * Replaces any rendered children with a text content string.\n   *\n   * @param {string} nextContent String of content.\n   * @internal\n   */\n  updateTextContent: function(nextContent) {\n    var prevChildren = this._renderedChildren;\n    // Remove any rendered children.\n    ReactChildReconciler.unmountChildren(\n      prevChildren,\n      false /* safely */,\n      false /* skipLifecycle */,\n    );\n    for (var name in prevChildren) {\n      if (prevChildren.hasOwnProperty(name)) {\n        invariant(false, 'updateTextContent called on non-empty component.');\n      }\n    }\n    // Set new text content.\n    var updates = [makeTextContent(nextContent)];\n    processQueue(this, updates);\n  },\n\n  /**\n   * Replaces any rendered children with a markup string.\n   *\n   * @param {string} nextMarkup String of markup.\n   * @internal\n   */\n  updateMarkup: function(nextMarkup) {\n    var prevChildren = this._renderedChildren;\n    // Remove any rendered children.\n    ReactChildReconciler.unmountChildren(\n      prevChildren,\n      false /* safely */,\n      false /* skipLifecycle */,\n    );\n    for (var name in prevChildren) {\n      if (prevChildren.hasOwnProperty(name)) {\n        invariant(false, 'updateTextContent called on non-empty component.');\n      }\n    }\n    var updates = [makeSetMarkup(nextMarkup)];\n    processQueue(this, updates);\n  },\n\n  /**\n   * Updates the rendered children with new children.\n   *\n   * @param {?object} nextNestedChildrenElements Nested child element maps.\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  updateChildren: function(nextNestedChildrenElements, transaction, context) {\n    // Hook used by React ART\n    this._updateChildren(nextNestedChildrenElements, transaction, context);\n  },\n\n  /**\n   * @param {?object} nextNestedChildrenElements Nested child element maps.\n   * @param {ReactReconcileTransaction} transaction\n   * @final\n   * @protected\n   */\n  _updateChildren: function(nextNestedChildrenElements, transaction, context) {\n    var prevChildren = this._renderedChildren;\n    var removedNodes = {};\n    var mountImages = [];\n    var nextChildren = this._reconcilerUpdateChildren(\n      prevChildren,\n      nextNestedChildrenElements,\n      mountImages,\n      removedNodes,\n      transaction,\n      context,\n    );\n    if (!nextChildren && !prevChildren) {\n      return;\n    }\n    var updates = null;\n    var name;\n    // `nextIndex` will increment for each child in `nextChildren`, but\n    // `lastIndex` will be the last index visited in `prevChildren`.\n    var nextIndex = 0;\n    var lastIndex = 0;\n    // `nextMountIndex` will increment for each newly mounted child.\n    var nextMountIndex = 0;\n    var lastPlacedNode = null;\n    for (name in nextChildren) {\n      if (!nextChildren.hasOwnProperty(name)) {\n        continue;\n      }\n      var prevChild = prevChildren && prevChildren[name];\n      var nextChild = nextChildren[name];\n      if (prevChild === nextChild) {\n        updates = enqueue(\n          updates,\n          this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex),\n        );\n        lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n        prevChild._mountIndex = nextIndex;\n      } else {\n        if (prevChild) {\n          // Update `lastIndex` before `_mountIndex` gets unset by unmounting.\n          lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n          // The `removedNodes` loop below will actually remove the child.\n        }\n        // The child must be instantiated before it's mounted.\n        updates = enqueue(\n          updates,\n          this._mountChildAtIndex(\n            nextChild,\n            mountImages[nextMountIndex],\n            lastPlacedNode,\n            nextIndex,\n            transaction,\n            context,\n          ),\n        );\n        nextMountIndex++;\n      }\n      nextIndex++;\n      lastPlacedNode = ReactReconciler.getHostNode(nextChild);\n    }\n    // Remove children that are no longer present.\n    for (name in removedNodes) {\n      if (removedNodes.hasOwnProperty(name)) {\n        updates = enqueue(\n          updates,\n          this._unmountChild(prevChildren[name], removedNodes[name]),\n        );\n      }\n    }\n    if (updates) {\n      processQueue(this, updates);\n    }\n    this._renderedChildren = nextChildren;\n\n    if (__DEV__) {\n      setChildrenForInstrumentation.call(this, nextChildren);\n    }\n  },\n\n  /**\n   * Unmounts all rendered children. This should be used to clean up children\n   * when this component is unmounted. It does not actually perform any\n   * backend operations.\n   *\n   * @internal\n   */\n  unmountChildren: function(safely, skipLifecycle) {\n    var renderedChildren = this._renderedChildren;\n    ReactChildReconciler.unmountChildren(\n      renderedChildren,\n      safely,\n      skipLifecycle,\n    );\n    this._renderedChildren = null;\n  },\n\n  /**\n   * Moves a child component to the supplied index.\n   *\n   * @param {ReactComponent} child Component to move.\n   * @param {number} toIndex Destination index of the element.\n   * @param {number} lastIndex Last index visited of the siblings of `child`.\n   * @protected\n   */\n  moveChild: function(child, afterNode, toIndex, lastIndex) {\n    // If the index of `child` is less than `lastIndex`, then it needs to\n    // be moved. Otherwise, we do not need to move it because a child will be\n    // inserted or moved before `child`.\n    if (child._mountIndex < lastIndex) {\n      return makeMove(child, afterNode, toIndex);\n    }\n  },\n\n  /**\n   * Creates a child component.\n   *\n   * @param {ReactComponent} child Component to create.\n   * @param {string} mountImage Markup to insert.\n   * @protected\n   */\n  createChild: function(child, afterNode, mountImage) {\n    return makeInsertMarkup(mountImage, afterNode, child._mountIndex);\n  },\n\n  /**\n   * Removes a child component.\n   *\n   * @param {ReactComponent} child Child to remove.\n   * @protected\n   */\n  removeChild: function(child, node) {\n    return makeRemove(child, node);\n  },\n\n  /**\n   * Mounts a child with the supplied name.\n   *\n   * NOTE: This is part of `updateChildren` and is here for readability.\n   *\n   * @param {ReactComponent} child Component to mount.\n   * @param {string} name Name of the child.\n   * @param {number} index Index at which to insert the child.\n   * @param {ReactReconcileTransaction} transaction\n   * @private\n   */\n  _mountChildAtIndex: function(\n    child,\n    mountImage,\n    afterNode,\n    index,\n    transaction,\n    context,\n  ) {\n    child._mountIndex = index;\n    return this.createChild(child, afterNode, mountImage);\n  },\n\n  /**\n   * Unmounts a rendered child.\n   *\n   * NOTE: This is part of `updateChildren` and is here for readability.\n   *\n   * @param {ReactComponent} child Component to unmount.\n   * @private\n   */\n  _unmountChild: function(child, node) {\n    var update = this.removeChild(child, node);\n    child._mountIndex = null;\n    return update;\n  },\n};\n\nmodule.exports = ReactMultiChild;\n"]}]