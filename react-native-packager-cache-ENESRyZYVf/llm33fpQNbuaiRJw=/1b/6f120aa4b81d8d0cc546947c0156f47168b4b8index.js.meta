["af6b97cfbf306fa2b1d595c24041ac9f30b86959","7c58c5ddb91057868ca520c8836eee5752297220",["react","react-native","react-native-vector-icons/Ionicons","react-timer-mixin","react-mixin"],[86,183,225,361,489],{"version":3,"sources":["/var/www/geruapp/src/components/react-native-animated-button/index.js"],"names":["screen","get","AnimatedButton","props","animatedValue","Value","animate","bind","_renderLoading","_renderContent","_timerDestroy","setValue","timing","toValue","duration","easing","cubic","start","onLoadingComplete","nextProps","loading","setTimeout","nextState","text","prevProps","prevState","iconable","icon","iconColor","styles","btnText","textStyle","disabled","widthTransaction","width","interpolate","inputRange","outputRange","opacity","borderRadius","onPress","container","style","btnContainer","propTypes","string","isRequired","bool","defaultProps","create","flexDirection","paddingHorizontal","height","justifyContent","alignItems","paddingVertical","backgroundColor","fontSize","color","prototype"],"mappings":"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","sourcesContent":["import React, { PropTypes, Component } from 'react'\nimport {\n\tView,\n\tText,\n\tStyleSheet,\n\tTouchableOpacity,\n\tAnimated,\n\tDimensions,\n\tEasing,\n\tActivityIndicator\n} from 'react-native'\nimport Icon from 'react-native-vector-icons/Ionicons'\nimport TimerMixin from 'react-timer-mixin'\nimport reactMixin from 'react-mixin'\n\nconst screen = Dimensions.get('window')\n\nexport default class AnimatedButton extends Component {\n\tconstructor(props) {\n\t  super(props)\n\n\t  this.animatedValue = new Animated.Value(0)\n\t  this.animate = this.animate.bind(this)\n\t  this._renderLoading = this._renderLoading.bind(this)\n\t  this._renderContent = this._renderContent.bind(this)\n\t  this._timerDestroy = this._timerDestroy.bind(this)\n\t}\n\n\tanimate() {\n\t\tthis.animatedValue.setValue(0)\n\t\tAnimated.timing(\n\t\t  this.animatedValue,\n\t\t  {\n\t\t    toValue: 1,\n\t\t    duration: 200,\n\t\t    easing: Easing.cubic\n\t\t  }\n\t\t).start()\n\t}\n\n\t_timerDestroy() {\n\t\tif(this.props.onLoadingComplete)\n\t\t\tthis.props.onLoadingComplete()\n    }\n\n    componentWillReceiveProps(nextProps) {\n    \tif(nextProps.loading == true) {\n    \t\tthis.setTimeout(() => this._timerDestroy() , 2000)\n    \t}\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n    \tif(this.props.loading != nextProps.loading) {\n    \t\treturn true\n    \t}\n\n    \tif(this.props.text != nextProps.text) {\n    \t\treturn true\n    \t}\n\n    \treturn false\n    }\n\n\tcomponentDidMount() {\n\t\tthis.animate()\n\t}\n\n\tcomponentDidUpdate(prevProps, prevState) {\n\t\tthis.animate()\n\t}\n\n\t_renderLoading() {\n\t\treturn (\n\t\t\t<ActivityIndicator animating={true}\n\t\t\t \t\t\t       color=\"#fff\"\n\t\t\t \t\t\t       size={40}\n\t\t\t/>\n\t\t)\n\t}\n\n\t_renderContent() {\n\t\tlet {\n\t\t\ttext,\n\t\t\ticonable,\n\t\t\ticon,\n\t\t\ticonColor,\n\t\t} = this.props\n\n\t\treturn (\n\t\t\t<View>\n\t\t\t\t{\n\t\t\t\t\ticonable && (\n\t\t\t\t\t\t<Icon name={icon}\n\t\t\t\t\t\t\t  size={30}\n\t\t\t\t\t\t\t  color={iconColor}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)\n\t\t\t\t}\n\n\t\t\t\t<Text style={[styles.btnText, this.props.textStyle]}>\n\t\t\t\t\t{text}\n\t\t\t\t</Text>\t\t\n\t\t\t</View>\n\t\t\t\n\t\t)\n\t}\n\n\trender() {\n\t\tlet {\n\t\t\tdisabled,\n\t\t\tloading,\n\t\t} = this.props\n\n\t\tlet widthTransaction = loading ? 60 : screen.width\n\n\t\tconst width = this.animatedValue.interpolate({\n\t\t    inputRange: [0, 1],\n\t\t    outputRange: [loading ? screen.width : 60, widthTransaction]\n\t\t})\n\n\t\tconst opacity = this.animatedValue.interpolate({\n\t\t    inputRange: [0, 1],\n\t\t    outputRange: [0, 1]\n\t\t})\n\n\t\tlet borderRadius = loading ? 60 : 0\n\n\t\treturn (\n\t\t\t<TouchableOpacity onPress={this.props.onPress}\n\t\t\t\t\t\t\t  activeOpacity={0.9}\n\t\t\t\t\t\t\t  disabled={disabled}\n\t\t\t\t\t\t\t  style={[styles.container, this.props.style]}>\n\t\t\t\t<Animated.View style={[styles.btnContainer, {\n\t\t\t\t\t\twidth,\n\t\t\t\t\t\tborderRadius,\n\t\t\t\t\t\topacity\n\t\t\t\t\t}]}>\n\t\t\t\t\t{\n\t\t\t\t\t\tloading ? this._renderLoading() : this._renderContent()\n\t\t\t\t\t}\n\t\t\t\t</Animated.View>\n\t\t\t</TouchableOpacity>\t\n\t\t)\n\t}\n}\n\nAnimatedButton.propTypes = {\n\ttext: PropTypes.string.isRequired,\n\ticonable: PropTypes.bool,\n\ticon: PropTypes.string,\n\ticonColor: PropTypes.string,\n\tdisabled: PropTypes.bool,\n\tloading: PropTypes.bool,\n}\n\nAnimatedButton.defaultProps = {\n\ticonable: false,\n\tdisabled: false,\n\tloading: false,\n}\n\nlet styles = StyleSheet.create({\n\tcontainer: {\n\t\tflexDirection: 'row',\n\t\t//paddingVertical: 5,\n\t\tpaddingHorizontal: 20,\n\t\theight: 60,\n\t\tjustifyContent: 'center',\n\t\talignItems: 'center',\n\t\tpaddingVertical: 5,\n\t},\n\n\tbtnContainer: {\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center',\n\t\tbackgroundColor: '#5fcf80',\n\t\theight: 60,\n\t},\n\n\tbtnText: {\n\t\tfontSize: 16,\n\t\tcolor: '#fff',\n\t}\t\n})\n\nreactMixin(AnimatedButton.prototype, TimerMixin)"]}]